<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTK-1.0</name>
    </assembly>
    <members>
        <member name="T:OpenTK.Audio.AudioCapture">
            <summary>
            Provides methods to instantiate, use and destroy an audio device for recording.
            Static methods are provided to list available devices known by the driver.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.#ctor">
            <summary>
            Opens the default device for audio recording.
            Implicitly set parameters are: 22050Hz, 16Bit Mono, 4096 samples ringbuffer.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.#ctor(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>Opens a device for audio recording.</summary>
            <param name="deviceName">The device name.</param>
            <param name="frequency">The frequency that the data should be captured at.</param>
            <param name="sampleFormat">The requested capture buffer format.</param>
            <param name="bufferSize">The size of OpenAL's capture internal ring-buffer. This value expects number of samples, not bytes.</param>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.CurrentDevice">
            <summary>
            The name of the device associated with this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.AvailableDevices">
            <summary>
            Returns a list of strings containing all known recording devices.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.DefaultDevice">
            <summary>
            Returns the name of the device that will be used as recording default.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.CheckErrors">
            <summary>
            Checks for ALC error conditions.
            </summary>
            <exception cref="T:System.OutOfMemoryException">Raised when an out of memory error is detected.</exception>
            <exception cref="T:OpenTK.Audio.AudioValueException">Raised when an invalid value is detected.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">Raised when an invalid device is detected.</exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">Raised when an invalid context is detected.</exception>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.CurrentError">
            <summary>Returns the ALC error code for this device.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.Start">
            <summary>
            Start recording samples.
            The number of available samples can be obtained through the <see cref="P:OpenTK.Audio.AudioCapture.AvailableSamples"/> property.
            The data can be queried with any <see cref="M:OpenTK.Audio.AudioCapture.ReadSamples(System.IntPtr,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.Stop">
            <summary>Stop recording samples. This will not clear previously recorded samples.</summary>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.AvailableSamples">
            <summary>Returns the number of available samples for capture.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.ReadSamples(System.IntPtr,System.Int32)">
            <summary>Fills the specified buffer with samples from the internal capture ring-buffer. This method does not block: it is an error to specify a sampleCount larger than AvailableSamples.</summary>
            <param name="buffer">A pointer to a previously initialized and pinned array.</param>
            <param name="sampleCount">The number of samples to be written to the buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.ReadSamples``1(``0[],System.Int32)">
            <summary>Fills the specified buffer with samples from the internal capture ring-buffer. This method does not block: it is an error to specify a sampleCount larger than AvailableSamples.</summary>
            <param name="buffer">The buffer to fill.</param>
            <param name="sampleCount">The number of samples to be written to the buffer.</param>
            <exception cref="T:System.ArgumentNullException">Raised when buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when sampleCount is larger than the buffer.</exception>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.SampleFormat">
            <summary>
            Gets the OpenTK.Audio.ALFormat for this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.SampleFrequency">
            <summary>
            Gets the sampling rate for this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioCapture.IsRunning">
            <summary>
            Gets a value indicating whether this instance is currently capturing samples.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.Finalize">
            <summary>
            Finalizes this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioCapture.Dispose">
            <summary>Closes the device and disposes the instance.</summary>
        </member>
        <member name="T:OpenTK.Audio.AudioContext">
            <summary>
            Provides methods to instantiate, use and destroy an audio context for playback.
            Static methods are provided to list available devices known by the driver.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#cctor">
            \internal
            <summary>
            Runs before the actual class constructor, to load available devices.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor">
            <summary>Constructs a new AudioContext, using the default audio device.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String)">
            <summary>
            Constructs a new AudioContext instance.
            </summary>
            <param name="device">The device name that will host this instance.</param>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Creates the audio context using the specified device and device parameters.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the device string is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,OpenTK.Audio.AudioContext.MaxAuxiliarySends)">
            <summary>Creates the audio context using the specified device and device parameters.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <param name="efxMaxAuxSends">Requires EFX enabled. The number of desired Auxiliary Sends per source.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the device string is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="T:OpenTK.Audio.AudioContext.MaxAuxiliarySends">
            <summary>May be passed at context construction time to indicate the number of desired auxiliary effect slot sends per source.</summary>
        </member>
        <member name="F:OpenTK.Audio.AudioContext.MaxAuxiliarySends.UseDriverDefault">
            <summary>Will chose a reliably working parameter.</summary>
        </member>
        <member name="F:OpenTK.Audio.AudioContext.MaxAuxiliarySends.One">
            <summary>One send per source.</summary>
        </member>
        <member name="F:OpenTK.Audio.AudioContext.MaxAuxiliarySends.Two">
            <summary>Two sends per source.</summary>
        </member>
        <member name="F:OpenTK.Audio.AudioContext.MaxAuxiliarySends.Three">
            <summary>Three sends per source.</summary>
        </member>
        <member name="F:OpenTK.Audio.AudioContext.MaxAuxiliarySends.Four">
            <summary>Four sends per source.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.CreateContext(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,OpenTK.Audio.AudioContext.MaxAuxiliarySends)">
            \internal
            <summary>Creates the audio context using the specified device.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices, or null for the default device.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <param name="efxAuxiliarySends">Requires EFX enabled. The number of desired Auxiliary Sends per source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.MakeCurrent(OpenTK.Audio.AudioContext)">
            \internal
            <summary>Makes the specified AudioContext current in the calling thread.</summary>
            <param name="context">The OpenTK.Audio.AudioContext to make current, or null.</param>
            <exception cref="T:System.ObjectDisposedException">
            Occurs if this function is called after the AudioContext has been disposed.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when the AudioContext could not be made current.
            </exception>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.IsCurrent">
            <summary>
            Gets or sets a System.Boolean indicating whether the AudioContext
            is current.
            </summary>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.CheckErrors">
            <summary>
            Checks for ALC error conditions.
            </summary>
            <exception cref="T:System.OutOfMemoryException">Raised when an out of memory error is detected.</exception>
            <exception cref="T:OpenTK.Audio.AudioValueException">Raised when an invalid value is detected.</exception>
            <exception cref="T:OpenTK.Audio.AudioDeviceException">Raised when an invalid device is detected.</exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">Raised when an invalid context is detected.</exception>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.CurrentError">
            <summary>
            Returns the ALC error code for this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.MakeCurrent">
            <summary>Makes the AudioContext current in the calling thread.</summary>
            <exception cref="T:System.ObjectDisposedException">
            Occurs if this function is called after the AudioContext has been disposed.
            </exception>
            <exception cref="T:OpenTK.Audio.AudioContextException">
            Occurs when the AudioContext could not be made current.
            </exception>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.IsProcessing">
            <summary>
            Gets a System.Boolean indicating whether the AudioContext is
            currently processing audio events.
            </summary>
            <seealso cref="M:OpenTK.Audio.AudioContext.Process"/>
            <seealso cref="M:OpenTK.Audio.AudioContext.Suspend"/>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.IsSynchronized">
            <summary>
            Gets a System.Boolean indicating whether the AudioContext is
            synchronized.
            </summary>
            <seealso cref="M:OpenTK.Audio.AudioContext.Process"/>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Process">
            <summary>
            Processes queued audio events.
            </summary>
            <remarks>
            <para>
            If AudioContext.IsSynchronized is true, this function will resume
            the internal audio processing thread. If AudioContext.IsSynchronized is false,
            you will need to call this function multiple times per second to process
            audio events.
            </para>
            <para>
            In some implementations this function may have no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Occurs when this function is called after the AudioContext had been disposed.</exception>
            <seealso cref="M:OpenTK.Audio.AudioContext.Suspend"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsProcessing"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsSynchronized"/>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Suspend">
            <summary>
            Suspends processing of audio events.
            </summary>
            <remarks>
            <para>
            To avoid audio artifacts when calling this function, set audio gain to zero before
            suspending an AudioContext.
            </para>
            <para>
            In some implementations, it can be faster to suspend processing before changing
            AudioContext state.
            </para>
            <para>
            In some implementations this function may have no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Occurs when this function is called after the AudioContext had been disposed.</exception>
            <seealso cref="M:OpenTK.Audio.AudioContext.Process"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsProcessing"/>
            <seealso cref="P:OpenTK.Audio.AudioContext.IsSynchronized"/>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.SupportsExtension(System.String)">
            <summary>
            Checks whether the specified OpenAL extension is supported.
            </summary>
            <param name="extension">The name of the extension to check (e.g. "ALC_EXT_EFX").</param>
            <returns>true if the extension is supported; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.CurrentDevice">
            <summary>
            Gets a System.String with the name of the device used in this context.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.CurrentContext">
            <summary>
            Gets the OpenTK.Audio.AudioContext which is current in the application.
            </summary>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.AvailableDevices">
            <summary>
            Returns a list of strings containing all known playback devices.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.AudioContext.DefaultDevice">
            <summary>
            Returns the name of the device that will be used as playback default.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Dispose">
            <summary>
            Disposes of the AudioContext, cleaning up all resources consumed by it.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Finalize">
            <summary>
            Finalizes this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.GetHashCode">
            <summary>
            Calculates the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.Equals(System.Object)">
            <summary>
            Compares this instance with another.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True, if obj refers to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.AudioContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that desrcibes this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that desrcibes this instance.</returns>
        </member>
        <member name="T:OpenTK.Audio.AudioContextException">
            <summary>Represents exceptions related to an OpenTK.Audio.AudioContext.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContextException.#ctor">
            <summary>Constructs a new AudioContextException.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioContextException.#ctor(System.String)">
            <summary>Constructs a new AudioContextException with the specified error message.</summary>
            <param name="message">The error message of the AudioContextException.</param>
        </member>
        <member name="T:OpenTK.Audio.AudioDeviceException">
            <summary>Represents exceptions related to an OpenTK.Audio device.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioDeviceException.#ctor">
            <summary>Constructs a new AudioDeviceException.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioDeviceException.#ctor(System.String)">
            <summary>Constructs a new AudioDeviceException with the specified error message.</summary>
            <param name="message">The error message of the AudioDeviceException.</param>
        </member>
        <member name="T:OpenTK.Audio.AudioException">
            <summary>Represents exceptions related to the OpenTK.Audio subsystem.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioException.#ctor">
            <summary>Constructs a new AudioException.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioException.#ctor(System.String)">
            <summary>Constructs a new AudioException with the specified error message.</summary>
            <param name="message">The error message of the AudioException.</param>
        </member>
        <member name="T:OpenTK.Audio.AudioValueException">
            <summary>Represents exceptions related to invalid values.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioValueException.#ctor">
            <summary>Constructs a new instance.</summary>
        </member>
        <member name="M:OpenTK.Audio.AudioValueException.#ctor(System.String)">
            <summary>Constructs a new instance with the specified error message.</summary>
            <param name="message">The error message of the AudioContextException.</param>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AL">
            <summary>
            Provides access to the OpenAL 1.1 flat API.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Enable(OpenTK.Audio.OpenAL.ALCapability)">
            <summary>This function enables a feature of the OpenAL driver. There are no capabilities defined in OpenAL 1.1 to be used with this function, but it may be used by an extension.</summary>
            <param name="capability">The name of a capability to enable.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Disable(OpenTK.Audio.OpenAL.ALCapability)">
            <summary>This function disables a feature of the OpenAL driver.</summary>
            <param name="capability">The name of a capability to disable.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsEnabled(OpenTK.Audio.OpenAL.ALCapability)">
            <summary>This function returns a boolean indicating if a specific feature is enabled in the OpenAL driver.</summary>
            <param name="capability">The name of a capability to enable.</param>
            <returns>True if enabled, False if disabled.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetString)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The property to be returned: Vendor, Version, Renderer and Extensions</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetErrorString(OpenTK.Audio.OpenAL.ALError)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The human-readable errorstring to be returned.</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetInteger)">
            <summary>This function returns an integer OpenAL state.</summary>
            <param name="param">the state to be queried: DistanceModel.</param>
            <returns>The integer state described by param will be returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetFloat)">
            <summary>This function returns a floating-point OpenAL state.</summary>
            <param name="param">the state to be queried: DopplerFactor, SpeedOfSound.</param>
            <returns>The floating-point state described by param will be returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetError">
            <summary>Error support. Obtain the most recent error generated in the AL state machine. When an error is detected by AL, a flag is set and the error code is recorded. Further errors, if they occur, do not affect this recorded code. When alGetError is called, the code is returned and the flag is cleared, so that a further error will again record its code.</summary>
            <returns>The first error that occured. can be used with AL.GetString. Returns an Alenum representing the error state. When an OpenAL error occurs, the error state is set and will not be changed until the error state is retrieved using alGetError. Whenever alGetError is called, the error state is cleared and the last state (the current state when the call was made) is returned. To isolate error detection to a specific portion of code, alGetError should be called before the isolated section to clear the current error state.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsExtensionPresent(System.String)">
            <summary>This function tests if a specific Extension is available for the OpenAL driver.</summary>
             <param name="extname">A string naming the desired extension. Example: "EAX-RAM"</param>
             <returns>Returns True if the Extension is available or False if not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetProcAddress(System.String)">
            <summary>This function returns the address of an OpenAL extension function. Handle with care.</summary>
            <param name="fname">A string containing the function name.</param>
            <returns>The return value is a pointer to the specified function. The return value will be IntPtr.Zero if the function is not found.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetEnumValue(System.String)">
            <summary>This function returns the enumeration value of an OpenAL token, described by a string.</summary>
            <param name="ename">A string describing an OpenAL token. Example "AL_DISTANCE_MODEL"</param>
            <returns>Returns the actual ALenum described by a string. Returns 0 if the string doesn’t describe a valid OpenAL token.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf,System.Single)">
            <summary>This function sets a floating-point property for the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListenerf.Gain</param>
            <param name="value">The float value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a floating-point property for the listener.</summary>
            <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="value1">The value to set the attribute to.</param>
            <param name="value2">The value to set the attribute to.</param>
            <param name="value3">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Vector3@)">
            <summary>This function sets a Math.Vector3 property for the listener.</summary>
            <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="values">The Math.Vector3 to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[]@)">
            <summary>This function sets a floating-point vector property of the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
            <param name="values">Pointer to floating-point vector values.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>This function sets two Math.Vector3 properties of the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListenerfv.Orientation</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf,System.Single@)">
            <summary>This function retrieves a floating-point property of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerf.Gain</param>
            <param name="value">a pointer to the floating-point value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves a set of three floating-point values from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="value1">The first floating-point value being retrieved.</param>
            <param name="value2">The second floating-point value  being retrieved.</param>
            <param name="value3">The third floating-point value  being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Vector3@)">
            <summary>This function retrieves a Math.Vector3 from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="values">A Math.Vector3 to hold the three floats being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)">
            <summary>This function retrieves a floating-point vector property of the listener. You must pin it manually.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
            <param name="values">A pointer to the floating-point vector value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>This function retrieves two Math.Vector3 properties of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerfv.Orientation</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.UInt32@)">
            <summary>This function generates one or more sources. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of uint values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32@)">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32[])">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32)">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <returns>Pointer to an array of int values which will store the names of the new sources.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSource">
            <summary>This function generates one source only. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <returns>Pointer to an int value which will store the name of the new source.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSource(System.UInt32@)">
            <summary>This function generates one source only. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="source">Pointer to an uint value which will store the name of the new source.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.UInt32*)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Pointer to an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.UInt32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.UInt32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSource(System.UInt32@)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSource(System.Int32)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsSource(System.UInt32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsSource(System.Int32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.UInt32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)">
            <summary>This function sets a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)">
            <summary>This function sets a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.UInt32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The three ALfloat values which the attribute will be set to.</param>
            <param name="value2">The three ALfloat values which the attribute will be set to.</param>
            <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The three ALfloat values which the attribute will be set to.</param>
            <param name="value2">The three ALfloat values which the attribute will be set to.</param>
            <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.UInt32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.UInt32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.UInt32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BindBufferToSource(System.UInt32,System.UInt32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BindBufferToSource(System.Int32,System.Int32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.UInt32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)">
             <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
             <param name="sid">Source name whose attribute is being set.</param>
             <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
             <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
             <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
            <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)">
             <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
             <param name="sid">Source name whose attribute is being set.</param>
             <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
             <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
             <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
            <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.UInt32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating-point value being retrieved</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating-point value being retrieved</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.UInt32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the value to retrieve.</param>
            <param name="value2">Pointer to the value to retrieve.</param>
            <param name="value3">Pointer to the value to retrieve.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the value to retrieve.</param>
            <param name="value2">Pointer to the value to retrieve.</param>
            <param name="value3">Pointer to the value to retrieve.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.UInt32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.UInt32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.UInt32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.UInt32*)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.UInt32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.UInt32@)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.UInt32*)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.UInt32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.UInt32@)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.UInt32*)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.UInt32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.UInt32@)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.UInt32*)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.UInt32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.UInt32@)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.UInt32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.UInt32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.UInt32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.UInt32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32*)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32@)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(System.Int32,System.Int32)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="source">The name of the source to queue buffers onto.</param>
            <param name="buffer">The name of the buffer to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32*)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.UInt32*)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32*)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.UInt32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)">
            <summary>This function generates one or more buffers, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <returns>Pointer to an array of uint values which will store the names of the new buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffer">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <returns>Pointer to an uint value which will store the name of the new buffer.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffer(System.UInt32@)">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="buffer">Pointer to an uint value which will store the names of the new buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.UInt32*)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32*)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.UInt32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.UInt32[])">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32[])">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffer(System.UInt32@)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffer(System.Int32)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsBuffer(System.UInt32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsBuffer(System.Int32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData(System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,``0[],System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">The audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetBuffer(System.UInt32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DopplerFactor(System.Single)">
            <summary>AL.DopplerFactor is a simple scaling of source and listener velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting from the calculation.</summary>
            <param name="value">A negative value will result in an error, the command is then ignored. The default value is 1f. The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DopplerVelocity(System.Single)">
            <summary>This function is deprecated and should not be used.</summary>
            <param name="value">The default is 1.0f.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SpeedOfSound(System.Single)">
            <summary>AL.SpeedOfSound allows the application to change the reference (propagation) speed used in the Doppler calculation. The source and listener velocities should be expressed in the same units as the speed of sound.</summary>
            <param name="value">A negative or zero value will result in an error, and the command is ignored. Default: 343.3f (appropriate for velocity units of meters and air as the propagation medium). The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)">
            <summary>This function selects the OpenAL distance model – ALDistanceModel.InverseDistance, ALDistanceModel.InverseDistanceClamped, ALDistanceModel.LinearDistance, ALDistanceModel.LinearDistanceClamped, ALDistanceModel.ExponentDistance, ALDistanceModel.ExponentDistanceClamped, or ALDistanceModel.None. The default distance model in OpenAL is ALDistanceModel.InverseDistanceClamped.</summary>
            <remarks>
            The ALDistanceModel .InverseDistance model works according to the following formula:
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
            The ALDistanceModel .InverseDistanceClamped model works according to the following formula:
            distance = max(distance,ALSourcef.ReferenceDistance);
            distance = min(distance,ALSourcef.MaxDistance);
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
            The ALDistanceModel.LinearDistance model works according to the following formula: 
            distance = min(distance, ALSourcef.MaxDistance) // avoid negative gain
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
            The ALDistanceModel.LinearDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
            The ALDistanceModel.ExponentDistance model works according to the following formula:
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor) 
            
            The ALDistanceModel.ExponentDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            
            The ALDistanceModel.None model works according to the following formula:
            gain = 1f;
            </remarks>
            <param name="distancemodel"></param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSourceState(System.UInt32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSourceState(System.Int32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSourceType(System.UInt32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSourceType(System.Int32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetDistanceModel">
            <summary>
            Returns the <see cref="T:OpenTK.Audio.OpenAL.ALDistanceModel"/> of the current context.
            </summary>
            <returns>The <see cref="T:OpenTK.Audio.OpenAL.ALDistanceModel"/> of the current context.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALCapability">
            <summary>A list of valid Enable/Disable/IsEnabled parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALCapability.Invalid">
            <summary>Currently no state toggles exist for vanilla OpenAL and no Extension uses it.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALListenerf">
            <summary>A list of valid 32-bit Float Listener/GetListener parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListenerf.Gain">
            <summary>Indicate the gain (Volume amplification) applied. Type: float Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is interpreted as zero volume and the channel is effectively disabled.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListenerf.EfxMetersPerUnit">
            <summary>(EFX Extension) This setting is critical if Air Absorption effects are enabled because the amount of Air Absorption applied is directly related to the real-world distance between the Source and the Listener. centimeters 0.01f meters 1.0f kilometers 1000.0f Range [float.MinValue .. float.MaxValue] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALListener3f">
            <summary>A list of valid Math.Vector3 Listener/GetListener parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListener3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListener3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALListenerfv">
            <summary>A list of valid float[] Listener/GetListener parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListenerfv.Orientation">
            <summary>Indicate Listener orientation. Expects two Vector3, At followed by Up.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourcef">
            <summary>A list of valid 32-bit Float Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ReferenceDistance">
            <summary>Source specific reference distance. Type: float Range: [0.0f - float.PositiveInfinity] At 0.0f, no distance attenuation occurs. Type: float Default: 1.0f.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.MaxDistance">
            <summary>Indicate distance above which Sources are not attenuated using the inverse clamped distance model. Default: float.PositiveInfinity Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.RolloffFactor">
            <summary>Source specific rolloff factor. Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.Pitch">
            <summary>Specify the pitch to be applied, either at Source, or on mixer results, at Listener. Range: [0.5f - 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.Gain">
            <summary>Indicate the gain (volume amplification) applied. Type: float. Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is meaningless with respect to a logarithmic scale; it is interpreted as zero volume - the channel is effectively disabled.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.MinGain">
            <summary>Indicate minimum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.MaxGain">
            <summary>Indicate maximum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ConeInnerAngle">
            <summary>Directional Source, inner cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ConeOuterAngle">
            <summary>Directional Source, outer cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ConeOuterGain">
            <summary>Directional Source, outer cone gain. Default: 0.0f Range: [0.0f - 1.0] (Logarithmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.SecOffset">
            <summary>The playback position, expressed in seconds.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.EfxAirAbsorptionFactor">
            <summary>(EFX Extension) This property is a multiplier on the amount of Air Absorption applied to the Source. The AL_AIR_ABSORPTION_FACTOR is multiplied by an internal Air Absorption Gain HF value of 0.994 (-0.05dB) per meter which represents normal atmospheric humidity and temperature. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.EfxRoomRolloffFactor">
            <summary>(EFX Extension) This property is defined the same way as the Reverb Room Rolloff property: it is one of two methods available in the Effect Extension to attenuate the reflected sound (early reflections and reverberation) according to source-listener distance. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.EfxConeOuterGainHighFrequency">
            <summary>(EFX Extension) A directed Source points in a specified direction. The Source sounds at full volume when the listener is directly in front of the source; it is attenuated as the listener circles the Source away from the front. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSource3f">
            <summary>A list of valid Math.Vector3 Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3f.Direction">
            <summary>Specify the current direction vector.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourceb">
            <summary>A list of valid 8-bit boolean Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.SourceRelative">
            <summary>Indicate that the Source has relative coordinates. Type: bool Range: [True, False]</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.Looping">
            <summary>Indicate whether the Source is looping. Type: bool Range: [True, False] Default: False.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.EfxDirectFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is set to True, this Source’s direct-path is automatically filtered according to the orientation of the source relative to the listener and the setting of the Source property Sourcef.ConeOuterGainHF. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.EfxAuxiliarySendFilterGainAuto">
            <summary>(EFX Extension) If this Source property is set to True, the intensity of this Source’s reflected sound is automatically attenuated according to source-listener distance and source directivity (as determined by the cone parameters). If it is False, the reflected sound is not attenuated according to distance and directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.EfxAuxiliarySendFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is AL_TRUE (its default value), the intensity of this Source’s reflected sound at high frequencies will be automatically attenuated according to the high-frequency source directivity as set by the Sourcef.ConeOuterGainHF property. If this property is AL_FALSE, the Source’s reflected sound is not filtered at all according to the Source’s directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourcei">
            <summary>A list of valid Int32 Source parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.SampleOffset">
            <summary>The playback position, expressed in samples.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.EfxDirectFilter">
            <summary>(EFX Extension) This Source property is used to apply filtering on the direct-path (dry signal) of a Source.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSource3i">
            <summary>A list of valid 3x Int32 Source/GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3i.EfxAuxiliarySendFilter">
            <summary>(EFX Extension) This Source property is used to establish connections between Sources and Auxiliary Effect Slots. For a Source to feed an Effect that has been loaded into an Auxiliary Effect Slot the application must configure one of the Source’s auxiliary sends. This process involves setting 3 variables – the destination Auxiliary Effect Slot ID, the Auxiliary Send number, and an optional Filter ID. Type: uint Range: any valid Filter Handle.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetSourcei">
            <summary>A list of valid Int32 GetSource parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.SampleOffset">
            <summary>The playback position, expressed in samples. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.SourceState">
            <summary>The state of the source (Stopped, Playing, etc.) Use the enum AlSourceState for comparison.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.BuffersQueued">
            <summary>The number of buffers queued on this source.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.BuffersProcessed">
            <summary>The number of buffers in the queue that have been processed.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourceState">
            <summary>Source state information, can be retrieved by AL.Source() with ALSourcei.SourceState.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Initial">
            <summary>Default State when loaded, can be manually set with AL.SourceRewind().</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Playing">
            <summary>The source is currently playing.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Paused">
            <summary>The source has paused playback.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Stopped">
            <summary>The source is not playing.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourceType">
            <summary>Source type information,  can be retrieved by AL.Source() with ALSourcei.SourceType.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceType.Static">
            <summary>Source is Static if a Buffer has been attached using AL.Source with the parameter Sourcei.Buffer.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceType.Streaming">
            <summary>Source is Streaming if one or more Buffers have been attached using AL.SourceQueueBuffers</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceType.Undetermined">
            <summary>Source is undetermined when it has a null Buffer attached</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALFormat">
            <summary>Sound samples: Format specifier.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Mono8">
            <summary>1 Channel, 8 bits per sample.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Mono16">
            <summary>1 Channel, 16 bits per sample.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Stereo8">
            <summary>2 Channels, 8 bits per sample each.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Stereo16">
            <summary>2 Channels, 16 bits per sample each.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoALawExt">
            <summary>1 Channel, A-law encoded data. Requires Extension: AL_EXT_ALAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoALawExt">
            <summary>2 Channels, A-law encoded data. Requires Extension: AL_EXT_ALAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoMuLawExt">
            <summary>1 Channel, µ-law encoded data. Requires Extension: AL_EXT_MULAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoMuLawExt">
            <summary>2 Channels, µ-law encoded data. Requires Extension: AL_EXT_MULAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.VorbisExt">
            <summary>Ogg Vorbis encoded data. Requires Extension: AL_EXT_vorbis</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Mp3Ext">
            <summary>MP3 encoded data. Requires Extension: AL_EXT_mp3</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoIma4Ext">
            <summary>1 Channel, IMA4 ADPCM encoded data. Requires Extension: AL_EXT_IMA4</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoIma4Ext">
            <summary>2 Channels, IMA4 ADPCM encoded data. Requires Extension: AL_EXT_IMA4</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoFloat32Ext">
            <summary>1 Channel, single-precision floating-point data. Requires Extension: AL_EXT_float32</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoFloat32Ext">
            <summary>2 Channels, single-precision floating-point data. Requires Extension: AL_EXT_float32</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoDoubleExt">
            <summary>1 Channel, double-precision floating-point data. Requires Extension: AL_EXT_double</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoDoubleExt">
            <summary>2 Channels, double-precision floating-point data. Requires Extension: AL_EXT_double</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi51Chn16Ext">
            <summary>Multichannel 5.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi51Chn32Ext">
            <summary>Multichannel 5.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi51Chn8Ext">
            <summary>Multichannel 5.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi61Chn16Ext">
            <summary>Multichannel 6.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi61Chn32Ext">
            <summary>Multichannel 6.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi61Chn8Ext">
            <summary>Multichannel 6.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi71Chn16Ext">
            <summary>Multichannel 7.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi71Chn32Ext">
            <summary>Multichannel 7.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi71Chn8Ext">
            <summary>Multichannel 7.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiQuad16Ext">
            <summary>Multichannel 4.0, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiQuad32Ext">
            <summary>Multichannel 4.0, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiQuad8Ext">
            <summary>Multichannel 4.0, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiRear16Ext">
            <summary>1 Channel rear speaker, 16-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiRear32Ext">
            <summary>1 Channel rear speaker, 32-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiRear8Ext">
            <summary>1 Channel rear speaker, 8-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetBufferi">
            <summary>A list of valid Int32 GetBuffer parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Frequency">
            <summary>Sound sample's frequency, in units of hertz [Hz]. This is the number of samples per second. Half of the sample frequency marks the maximum significant frequency component.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Bits">
            <summary>Bit depth of the buffer. Should be 8 or 16.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Channels">
            <summary>Number of channels in buffer. > 1 is valid, but buffer won’t be positioned when played. 1 for Mono, 2 for Stereo.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Size">
            <summary>size of the Buffer in bytes.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALBufferState">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALBufferState.Unused">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALBufferState.Pending">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALBufferState.Processed">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALError">
            <summary>Returned by AL.GetError</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.NoError">
            <summary>No OpenAL Error.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidName">
            <summary>Invalid Name paramater passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.IllegalEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidValue">
            <summary>Invalid OpenAL enum parameter value.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.IllegalCommand">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidOperation">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.OutOfMemory">
            <summary>No OpenAL memory left.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetString">
            <summary>A list of valid string AL.Get() parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Vendor">
            <summary>Gets the Vendor name.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Version">
            <summary>Gets the driver version.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Renderer">
            <summary>Gets the renderer mode.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Extensions">
            <summary>Gets a list of all available Extensions, separated with spaces.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetFloat">
            <summary>A list of valid 32-bit Float AL.Get() parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetFloat.DopplerFactor">
            <summary>Doppler scale. Default 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetFloat.DopplerVelocity">
            <summary>Tweaks speed of propagation. This functionality is deprecated.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetFloat.SpeedOfSound">
            <summary>Speed of Sound in units per second. Default: 343.3f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetInteger">
            <summary>A list of valid Int32 AL.Get() parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetInteger.DistanceModel">
            <summary>See enum ALDistanceModel.</summary><see cref="T:OpenTK.Audio.OpenAL.ALDistanceModel"/>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALDistanceModel">
            <summary>Used by AL.DistanceModel(), the distance model can be retrieved by AL.Get() with ALGetInteger.DistanceModel</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.None">
            <summary>Bypasses all distance attenuation calculation for all Sources.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.InverseDistance">
            <summary>InverseDistance is equivalent to the IASIG I3DL2 model with the exception that ALSourcef.ReferenceDistance does not imply any clamping.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.InverseDistanceClamped">
            <summary>InverseDistanceClamped is the IASIG I3DL2 model, with ALSourcef.ReferenceDistance indicating both the reference distance and the distance below which gain will be clamped.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.LinearDistance">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.LinearDistanceClamped">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.ExponentDistance">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.ExponentDistanceClamped">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Alc">
            <summary>Alc = Audio Library Context</summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CreateContext(System.IntPtr,System.Int32*)">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">a pointer to a device</param>
            <param name="attrlist">a pointer to a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC</param>
            <returns>Returns a pointer to the new context (NULL on failure). The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CreateContext(System.IntPtr,System.Int32[])">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">a pointer to a device</param>
            <param name="attriblist">an array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.MakeContextCurrent(OpenTK.ContextHandle)">
            <summary>This function makes a specified context the current context.</summary>
            <param name="context">A pointer to the new context.</param>
            <returns>Returns True on success, or False on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.ProcessContext(OpenTK.ContextHandle)">
            <summary>This function tells a context to begin processing. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. alcSuspendContext can be used to suspend a context, and then all the OpenAL state changes can be applied at once, followed by a call to alcProcessContext to apply all the state changes immediately. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">a pointer to the new context</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.SuspendContext(OpenTK.ContextHandle)">
            <summary>This function suspends processing on a specified context. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. A typical use of alcSuspendContext would be to suspend a context, apply all the OpenAL state changes at once, and then call alcProcessContext to apply all the state changes at once. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">a pointer to the context to be suspended.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.DestroyContext(OpenTK.ContextHandle)">
            <summary>This function destroys a context.</summary>
            <param name="context">a pointer to the new context.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetCurrentContext">
            <summary>This function retrieves the current context.</summary>
            <returns>Returns a pointer to the current context.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetContextsDevice(OpenTK.ContextHandle)">
            <summary>This function retrieves a context's device pointer.</summary>
            <param name="context">a pointer to a context.</param>
            <returns>Returns a pointer to the specified context's device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.OpenDevice(System.String)">
            <summary>This function opens a device by name.</summary>
            <param name="devicename">a null-terminated string describing a device.</param>
            <returns>Returns a pointer to the opened device. The return value will be NULL if there is an error.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CloseDevice(System.IntPtr)">
            <summary>This function closes a device by name.</summary>
            <param name="device">a pointer to an opened device</param>
            <returns>True will be returned on success or False on failure. Closing a device will fail if the device contains any contexts or buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetError(System.IntPtr)">
            <summary>This function retrieves the current context error state.</summary>
            <param name="device">a pointer to the device to retrieve the error state from</param>
            <returns>Errorcode Int32.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.IsExtensionPresent(System.IntPtr,System.String)">
            <summary>This function queries if a specified context extension is available.</summary>
            <param name="device">a pointer to the device to be queried for an extension.</param>
            <param name="extname">a null-terminated string describing the extension.</param>
            <returns>Returns True if the extension is available, False if the extension is not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetProcAddress(System.IntPtr,System.String)">
            <summary>This function retrieves the address of a specified context extension function.</summary>
            <param name="device">a pointer to the device to be queried for the function.</param>
            <param name="funcname">a null-terminated string describing the function.</param>
            <returns>Returns the address of the function, or NULL if it is not found.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetEnumValue(System.IntPtr,System.String)">
            <summary>This function retrieves the enum value for a specified enumeration name.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="enumname">a null terminated string describing the enum value.</param>
            <returns>Returns the enum value described by the enumName string. This is most often used for querying an enum value for an ALC extension.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetString(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetString)">
            <summary>This function returns pointers to strings related to the context.</summary>
            <remarks>
            ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.
            ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS</param>
            <returns>A string containing the name of the Device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetString(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetStringList)">
            <summary>This function returns a List of strings related to the context.</summary>
            <remarks>
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER</param>
            <returns>A List of strings containing the names of the Devices.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetInteger(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES</param>
            <param name="size">the size of the destination buffer provided, in number of integers.</param>
            <param name="data">a pointer to the buffer to be returned</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.GetInteger(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES</param>
            <param name="size">the size of the destination buffer provided, in number of integers.</param>
            <param name="data">a pointer to the buffer to be returned</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">a pointer to a device name string.</param>
            <param name="frequency">the frequency that the buffer should be captured at.</param>
            <param name="format">the requested capture buffer format.</param>
            <param name="buffersize">the size of the capture buffer in samples, not bytes.</param>
            <returns>Returns the capture device pointer, or NULL on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureOpenDevice(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">a pointer to a device name string.</param>
            <param name="frequency">the frequency that the buffer should be captured at.</param>
            <param name="format">the requested capture buffer format.</param>
            <param name="buffersize">the size of the capture buffer in samples, not bytes.</param>
            <returns>Returns the capture device pointer, or NULL on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureCloseDevice(System.IntPtr)">
            <summary>This function closes the specified capture device.</summary>
            <param name="device">a pointer to a capture device.</param>
            <returns>Returns True if the close operation was successful, False on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureStart(System.IntPtr)">
            <summary>This function begins a capture operation.</summary>
            <remarks>alcCaptureStart will begin recording to an internal ring buffer of the size specified when opening the capture device. The application can then retrieve the number of samples currently available using the ALC_CAPTURE_SAPMPLES token with alcGetIntegerv. When the application determines that enough samples are available for processing, then it can obtain them with a call to alcCaptureSamples.</remarks>
            <param name="device">a pointer to a capture device.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureStop(System.IntPtr)">
            <summary>This function stops a capture operation.</summary>
            <param name="device">a pointer to a capture device.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureSamples(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0@,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a reference to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0[],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0[0:,0:],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0[0:,0:,0:],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcContextAttributes">
            <summary>
            Defines available context attributes.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.Frequency">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.Refresh">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.Sync">
            <summary>Followed by AlBoolean.True, or AlBoolean.False</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.MonoSources">
            <summary>Followed by System.Int32 Num of requested Mono (3D) Sources</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.StereoSources">
            <summary>Followed by System.Int32 Num of requested Stereo Sources</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcError">
            <summary>
            Defines OpenAL context errors.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.NoError">
            <summary>There is no current error.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidDevice">
            <summary>No Device. The device handle or specifier names an inaccessible driver/server.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidContext">
            <summary>Invalid context ID. The Context argument does not name a valid context.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidEnum">
            <summary>Bad enum. A token used is not valid, or not applicable.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidValue">
            <summary>Bad value. A value (e.g. Attribute) is not valid, or not applicable.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.OutOfMemory">
            <summary>Out of memory. Unable to allocate memory.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcGetString">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.Alc.GetString(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetString)"/>.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.DefaultDeviceSpecifier">
            <summary>The specifier string for the default device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.Extensions">
            <summary>A list of available context extensions separated by spaces.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.CaptureDefaultDeviceSpecifier">
            <summary>The name of the default capture device</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.DefaultAllDevicesSpecifier">
            <summary>a list of the default devices.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.CaptureDeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.CaptureDeviceSpecifier. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.DeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.DeviceSpecifier</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.AllDevicesSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.AllDevicesSpecifier</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcGetStringList">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.Alc.GetString(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetStringList)"/>.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetStringList.CaptureDeviceSpecifier">
            <summary>The name of the specified capture device, or a list of all available capture devices if no capture device is specified. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetStringList.DeviceSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATION_EXT</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetStringList.AllDevicesSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATE_ALL_EXT</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcGetInteger">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.Alc.GetInteger(System.IntPtr,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])"/>.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.MajorVersion">
            <summary>The specification revision for this implementation (major version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.MinorVersion">
            <summary>The specification revision for this implementation (minor version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.AttributesSize">
            <summary>The size (number of ALCint values) required for a zero-terminated attributes list, for the current context. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.AllAttributes">
            <summary>Expects a destination of ALC_ATTRIBUTES_SIZE, and provides an attribute list for the current context of the specified device. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.CaptureSamples">
            <summary>The number of capture samples available. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.EfxMajorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Major version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.EfxMinorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Minor version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EffectsExtension">
            <summary>
            Provides access to the OpenAL effects extension.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindEffect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffectType)">
            <summary>(Helper) Selects the Effect type used by this Effect handle.</summary>
            <param name="eid">Effect id returned from a successful call to GenEffects.</param>
            <param name="type">Effect type.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindEffect(System.Int32,OpenTK.Audio.OpenAL.EfxEffectType)">
            <summary>(Helper) Selects the Effect type used by this Effect handle.</summary>
            <param name="eid">Effect id returned from a successful call to GenEffects.</param>
            <param name="type">Effect type.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindFilterToSource(System.UInt32,System.UInt32)">
            <summary>(Helper) reroutes the output of a Source through a Filter.</summary>
            <param name="source">A valid Source handle.</param>
            <param name="filter">A valid Filter handle.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindFilterToSource(System.Int32,System.Int32)">
            <summary>(Helper) reroutes the output of a Source through a Filter.</summary>
            <param name="source">A valid Source handle.</param>
            <param name="filter">A valid Filter handle.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindEffectToAuxiliarySlot(System.UInt32,System.UInt32)">
            <summary>(Helper) Attaches an Effect to an Auxiliary Effect Slot.</summary>
            <param name="auxiliaryeffectslot">The slot handle to attach the Effect to.</param>
            <param name="effect">The Effect handle that is being attached.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindEffectToAuxiliarySlot(System.Int32,System.Int32)">
            <summary>(Helper) Attaches an Effect to an Auxiliary Effect Slot.</summary>
            <param name="auxiliaryeffectslot">The slot handle to attach the Effect to.</param>
            <param name="effect">The Effect handle that is being attached.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindSourceToAuxiliarySlot(System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>(Helper) Reroutes a Source's output into an Auxiliary Effect Slot.</summary>
            <param name="source">The Source handle who's output is forwarded.</param>
            <param name="slot">The Auxiliary Effect Slot handle that receives input from the Source.</param>
            <param name="slotnumber">Every Source has only a limited number of slots it can feed buffer to. The number must stay below AlcContextAttributes.EfxMaxAuxiliarySends</param>
            <param name="filter">Filter handle to be attached between Source ouput and Auxiliary Slot input. Use 0 or EfxFilterType.FilterNull for no filter. </param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.BindSourceToAuxiliarySlot(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>(Helper) Reroutes a Source's output into an Auxiliary Effect Slot.</summary>
            <param name="source">The Source handle who's output is forwarded.</param>
            <param name="slot">The Auxiliary Effect Slot handle that receives input from the Source.</param>
            <param name="slotnumber">Every Source has only a limited number of slots it can feed buffer to. The number must stay below AlcContextAttributes.EfxMaxAuxiliarySends</param>
            <param name="filter">Filter handle to be attached between Source ouput and Auxiliary Slot input. Use 0 or EfxFilterType.FilterNull for no filter. </param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenEffects(System.Int32,System.UInt32@)">
            <summary>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object</summary>
            <remarks>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</remarks>
            <param name="n">Number of Effects to be created.</param>
            <param name="effects">Pointer addressing sufficient memory to store n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenEffects(System.Int32,System.Int32@)">
            <summary>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object</summary>
            <remarks>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</remarks>
            <param name="n">Number of Effects to be created.</param>
            <param name="effects">Pointer addressing sufficient memory to store n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenEffects(System.Int32)">
            <summary>Generates one or more effect objects.</summary>
            <param name="n">Number of Effect object identifiers to generate.</param>
            <remarks>
            <para>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object.</para>
            <para>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenEffect">
            <summary>Generates a single effect object.</summary>
            <returns>A handle to the generated effect object.</returns>
            <remarks>
            <para>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object.</para>
            <para>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenEffect(System.UInt32@)">
            <summary>Generates a single effect object.</summary>
            <param name="effect">A handle to the generated effect object.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteEffects(System.Int32,System.UInt32@)">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="n">Number of Effects to be deleted.</param>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteEffects(System.Int32,System.Int32@)">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="n">Number of Effects to be deleted.</param>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteEffects(System.Int32[])">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteEffects(System.UInt32[])">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteEffect(System.Int32)">
            <summary>This function deletes one Effect only.</summary>
            <param name="effect">Pointer to an effect name/handle identifying the Effect Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteEffect(System.UInt32@)">
            <summary>This function deletes one Effect only.</summary>
            <param name="effect">Pointer to an effect name/handle identifying the Effect Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.IsEffect(System.UInt32)">
            <summary>The IsEffect function is used to determine if an object identifier is a valid Effect object.</summary>
            <param name="eid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Effect, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.IsEffect(System.Int32)">
            <summary>The IsEffect function is used to determine if an object identifier is a valid Effect object.</summary>
            <param name="eid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Effect, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Effect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffecti,System.Int32)">
            <summary>This function is used to set integer properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Effect(System.Int32,OpenTK.Audio.OpenAL.EfxEffecti,System.Int32)">
            <summary>This function is used to set integer properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Effect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffectf,System.Single)">
            <summary>This function is used to set floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Effect(System.Int32,OpenTK.Audio.OpenAL.EfxEffectf,System.Single)">
            <summary>This function is used to set floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Effect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to set 3 floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="values">Pointer to Math.Vector3.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Effect(System.Int32,OpenTK.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to set 3 floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="values">Pointer to Math.Vector3.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetEffect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffecti,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EfxEffecti,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetEffect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffectf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EfxEffectf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetEffect(System.UInt32,OpenTK.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to retrieve 3 floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to retrieve.</param>
            <param name="values">A Math.Vector3 to hold the values.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to retrieve 3 floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to retrieve.</param>
            <param name="values">A Math.Vector3 to hold the values.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenFilters(System.Int32,System.UInt32@)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <param name="filters">Pointer addressing sufficient memory to store n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenFilters(System.Int32,System.Int32@)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <param name="filters">Pointer addressing sufficient memory to store n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenFilters(System.Int32)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <returns>Pointer addressing sufficient memory to store n Filter object identifiers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenFilter">
            <summary>This function generates only one Filter.</summary>
            <returns>Storage Int32 for the new filter name/handle.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenFilter(System.UInt32@)">
            <summary>This function generates only one Filter.</summary>
            <param name="filter">Storage UInt32 for the new filter name/handle.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteFilters(System.Int32,System.UInt32@)">
            <summary>The DeleteFilters function is used to delete and free resources for Filter objects previously created with GenFilters.</summary>
            <param name="n">Number of Filters to be deleted.</param>
            <param name="filters">Pointer to n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteFilters(System.Int32,System.Int32@)">
            <summary>The DeleteFilters function is used to delete and free resources for Filter objects previously created with GenFilters.</summary>
            <param name="n">Number of Filters to be deleted.</param>
            <param name="filters">Pointer to n Filter object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteFilters(System.UInt32[])">
            <summary>This function deletes one Filter only.</summary>
            <param name="filters">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteFilters(System.Int32[])">
            <summary>This function deletes one Filter only.</summary>
            <param name="filters">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteFilter(System.Int32)">
            <summary>This function deletes one Filter only.</summary>
            <param name="filter">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteFilter(System.UInt32@)">
            <summary>This function deletes one Filter only.</summary>
            <param name="filter">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.IsFilter(System.UInt32)">
            <summary>The IsFilter function is used to determine if an object identifier is a valid Filter object.</summary>
            <param name="fid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Filter, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.IsFilter(System.Int32)">
            <summary>The IsFilter function is used to determine if an object identifier is a valid Filter object.</summary>
            <param name="fid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Filter, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Filter(System.UInt32,OpenTK.Audio.OpenAL.EfxFilteri,System.Int32)">
            <summary>This function is used to set integer properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Filter(System.Int32,OpenTK.Audio.OpenAL.EfxFilteri,System.Int32)">
            <summary>This function is used to set integer properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Filter(System.UInt32,OpenTK.Audio.OpenAL.EfxFilterf,System.Single)">
            <summary>This function is used to set floating-point properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.Filter(System.Int32,OpenTK.Audio.OpenAL.EfxFilterf,System.Single)">
            <summary>This function is used to set floating-point properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetFilter(System.UInt32,OpenTK.Audio.OpenAL.EfxFilteri,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetFilter(System.Int32,OpenTK.Audio.OpenAL.EfxFilteri,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetFilter(System.UInt32,OpenTK.Audio.OpenAL.EfxFilterf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetFilter(System.Int32,OpenTK.Audio.OpenAL.EfxFilterf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32,System.UInt32@)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <param name="slots">Pointer addressing sufficient memory to store n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <param name="slots">Pointer addressing sufficient memory to store n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <returns>Pointer addressing sufficient memory to store n Effect Slot object identifiers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlot">
            <summary>This function generates only one Auxiliary Effect Slot.</summary>
            <returns>Storage Int32 for the new auxiliary effect slot name/handle.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlot(System.UInt32@)">
            <summary>This function generates only one Auxiliary Effect Slot.</summary>
            <returns>Storage UInt32 for the new auxiliary effect slot name/handle.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32,System.UInt32@)">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="n">Number of Auxiliary Effect Slots to be deleted.</param>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="n">Number of Auxiliary Effect Slots to be deleted.</param>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32[])">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.UInt32[])">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slots">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlot(System.Int32)">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slot">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlot(System.UInt32@)">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slot">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.IsAuxiliaryEffectSlot(System.UInt32)">
            <summary>The IsAuxiliaryEffectSlot function is used to determine if an object identifier is a valid Auxiliary Effect Slot object.</summary>
            <param name="slot">Effect Slot object identifier to validate.</param>
            <returns>True if the identifier is a valid Auxiliary Effect Slot, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.IsAuxiliaryEffectSlot(System.Int32)">
            <summary>The IsAuxiliaryEffectSlot function is used to determine if an object identifier is a valid Auxiliary Effect Slot object.</summary>
            <param name="slot">Effect Slot object identifier to validate.</param>
            <returns>True if the identifier is a valid Auxiliary Effect Slot, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.OpenAL.EfxAuxiliaryi,System.Int32)">
            <summary>This function is used to set integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EfxAuxiliaryi,System.Int32)">
            <summary>This function is used to set integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.OpenAL.EfxAuxiliaryf,System.Single)">
            <summary>This function is used to set floating-point properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EfxAuxiliaryf,System.Single)">
            <summary>This function is used to set floating-point properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.OpenAL.EfxAuxiliaryi,System.Int32@)">
            <summary>This function is used to retrieve integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EfxAuxiliaryi,System.Int32@)">
            <summary>This function is used to retrieve integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.UInt32,OpenTK.Audio.OpenAL.EfxAuxiliaryf,System.Single@)">
            <summary>This function is used to retrieve floating properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EfxAuxiliaryf,System.Single@)">
            <summary>This function is used to retrieve floating properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.EffectsExtension.IsInitialized">
            <summary>Returns True if the EFX Extension has been found and could be initialized.</summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.EffectsExtension.#ctor">
            <summary>
            Constructs a new EffectsExtension instance.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EffectsExtension.ReverbPresets">
            <summary>EAX Reverb Presets in legacy format - use ConvertReverbParameters() to convert to EFX EAX Reverb Presets for use with the OpenAL Effects Extension.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxEffectf">
            <summary>A list of valid 32-bit Float Effect/GetEffect parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbDensity">
            <summary>Reverb Modal Density controls the coloration of the late reverb. Lowering the value adds more coloration to the late reverb. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbDiffusion">
            <summary>The Reverb Diffusion property controls the echo density in the reverberation decay. The default 1.0f provides the highest density. Reducing diffusion gives the reverberation a more "grainy" character that is especially noticeable with percussive sound sources. If you set a diffusion value of 0.0f, the later reverberation sounds like a succession of distinct echoes. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbGain">
            <summary>The Reverb Gain property is the master volume control for the reflected sound - both early reflections and reverberation - that the reverb effect adds to all sound sources. Ranges from 1.0 (0db) (the maximum amount) to 0.0 (-100db) (no reflected sound at all) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.32f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbGainHF">
            <summary>The Reverb Gain HF property further tweaks reflected sound by attenuating it at high frequencies. It controls a low-pass filter that applies globally to the reflected sound of all sound sources feeding the particular instance of the reverb effect. Ranges from 1.0f (0db) (no filter) to 0.0f (-100db) (virtually no reflected sound) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.89f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbDecayTime">
            <summary>The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with very dead surfaces) to 20.0 (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f] Default: 1.49f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbDecayHFRatio">
            <summary>The Decay HF Ratio property sets the spectral quality of the Decay Time parameter. It is the ratio of high-frequency decay time relative to the time set by Decay Time.. Unit: linear multiplier Range [0.1f .. 2.0f] Default: 0.83f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbReflectionsGain">
            <summary>The Reflections Gain property controls the overall amount of initial reflections relative to the Gain property. The value of Reflections Gain ranges from a maximum of 3.16f (+10 dB) to a minimum of 0.0f (-100 dB) (no initial reflections at all), and is corrected by the value of the Gain property. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbReflectionsDelay">
            <summary>The Reflections Delay property is the amount of delay between the arrival time of the direct path from the source to the first reflection from the source. It ranges from 0 to 300 milliseconds. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbLateReverbGain">
            <summary>The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain property. The value of Late Reverb Gain ranges from a maximum of 10.0f (+20 dB) to a minimum of 0.0f (-100 dB) (no late reverberation at all). Unit: Linear gain Range [0.0f .. 10.0f] Default: 1.26f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbLateReverbDelay">
            <summary>The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range [0.0f .. 0.1f] Default: 0.011f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbAirAbsorptionGainHF">
            <summary>The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by the propagation medium and applies to reflected sound only. Unit: Linear gain per meter Range [0.892f .. 1.0f] Default: 0.994f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ReverbRoomRolloffFactor">
            <summary>The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL's Rolloff Factor, but operates on reverb sound instead of direct-path sound. Unit: Linear multiplier Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ChorusRate">
            <summary>This property sets the modulation rate of the low-frequency oscillator that controls the delay time of the delayed signals. Unit: Hz Range [0.0f .. 10.0f] Default: 1.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ChorusDepth">
            <summary>This property controls the amount by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default: 0.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ChorusFeedback">
            <summary>This property controls the amount of processed signal that is fed back to the input of the chorus effect. Negative values will reverse the phase of the feedback signal. At full magnitude the identical sample will repeat endlessly. Range [-1.0f .. +1.0f] Default: +0.25f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.ChorusDelay">
            <summary>This property controls the average amount of time the sample is delayed before it is played back, and with feedback, the amount of time between iterations of the sample. Larger values lower the pitch. Unit: Seconds Range [0.0f .. 0.016f] Default: 0.016f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.DistortionEdge">
            <summary>This property controls the shape of the distortion. The higher the value for Edge, the "dirtier" and "fuzzier" the effect. Range [0.0f .. 1.0f] Default: 0.2f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.DistortionGain">
            <summary>This property allows you to attenuate the distorted sound. Range [0.01f .. 1.0f] Default: 0.05f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.DistortionLowpassCutoff">
            <summary>Input signals can have a low pass filter applied, to limit the amount of high frequency signal feeding into the distortion effect. Unit: Hz Range [80.0f .. 24000.0f] Default: 8000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.DistortionEQCenter">
            <summary>This property controls the frequency at which the post-distortion attenuation (Distortion Gain) is active. Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.DistortionEQBandwidth">
            <summary>This property controls the bandwidth of the post-distortion attenuation. Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EchoDelay">
            <summary>This property controls the delay between the original sound and the first "tap", or echo instance. Subsequently, the value for Echo Delay is used to determine the time delay between each "second tap" and the next "first tap". Unit: Seconds Range [0.0f .. 0.207f] Default: 0.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EchoLRDelay">
            <summary>This property controls the delay between the "first tap" and the "second tap". Subsequently, the value for Echo LR Delay is used to determine the time delay between each "first tap" and the next "second tap". Unit: Seconds Range [0.0f .. 0.404f] Default: 0.1f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EchoDamping">
            <summary>This property controls the amount of high frequency damping applied to each echo. As the sound is subsequently fed back for further echoes, damping results in an echo which progressively gets softer in tone as well as intensity. Range [0.0f .. 0.99f] Default: 0.5f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EchoFeedback">
            <summary>This property controls the amount of feedback the output signal fed back into the input. Use this parameter to create "cascading" echoes. At full magnitude, the identical sample will repeat endlessly. Below full magnitude, the sample will repeat and fade. Range [0.0f .. 1.0f] Default: 0.5f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EchoSpread">
            <summary>This property controls how hard panned the individual echoes are. With a value of 1.0f, the first "tap" will be panned hard left, and the second "tap" hard right. –1.0f gives the opposite result and values near to 0.0f result in less emphasized panning. Range [-1.0f .. +1.0f] Default: -1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.FlangerRate">
            <summary>The number of times per second the low-frequency oscillator controlling the amount of delay repeats. Range [0.0f .. 10.0f] Default: 0.27f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.FlangerDepth">
            <summary>The ratio by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.FlangerFeedback">
            <summary>This is the amount of the output signal level fed back into the effect's input. A negative value will reverse the phase of the feedback signal. Range [-1.0f .. +1.0f] Default: -0.5f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.FlangerDelay">
            <summary>The average amount of time the sample is delayed before it is played back. When used with the Feedback property it's the amount of time between iterations of the sample. Unit: Seconds Range [0.0f .. 0.004f] Default: 0.002f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.FrequencyShifterFrequency">
            <summary>This is the carrier frequency. For carrier frequencies below the audible range, the single sideband modulator may produce phaser effects, spatial effects or a slight pitch-shift. As the carrier frequency increases, the timbre of the sound is affected. Unit: Hz Range [0.0f .. 24000.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.VocalMorpherRate">
            <summary>This controls the frequency of the low-frequency oscillator used to morph between the two phoneme filters. Unit: Hz Range [0.0f .. 10.0f] Default: 1.41f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.RingModulatorFrequency">
            <summary>This is the frequency of the carrier signal. If the carrier signal is slowly varying (less than 20 Hz), the result is a slow amplitude variation effect (tremolo). Unit: Hz Range [0.0f .. 8000.0f] Default: 440.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.RingModulatorHighpassCutoff">
            <summary>This controls the cutoff frequency at which the input signal is high-pass filtered before being ring modulated. Unit: Hz Range [0.0f .. 24000.0f] Default: 800.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.AutowahAttackTime">
            <summary>This property controls the time the filtering effect takes to sweep from minimum to maximum center frequency when it is triggered by input signal. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.AutowahReleaseTime">
            <summary>This property controls the time the filtering effect takes to sweep from maximum back to base center frequency, when the input signal ends. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.AutowahResonance">
            <summary>This property controls the resonant peak, sometimes known as emphasis or Q, of the auto-wah band-pass filter. Range [2.0f .. 1000.0f] Default: 1000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.AutowahPeakGain">
            <summary>This property controls the input signal level at which the band-pass filter will be fully opened. Range [0.00003f .. 31621.0f] Default: 11.22f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerLowGain">
            <summary>This property controls amount of cut or boost on the low frequency range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerLowCutoff">
            <summary>This property controls the low frequency below which signal will be cut off. Unit: Hz Range [50.0f .. 800.0f] Default: 200.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerMid1Gain">
            <summary>This property allows you to cut/boost signal on the "mid1" range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerMid1Center">
            <summary>This property sets the center frequency for the "mid1" range. Unit: Hz Range [200.0f .. 3000.0f] Default: 500.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerMid1Width">
            <summary>This property controls the width of the "mid1" range. Range [0.01f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerMid2Gain">
            <summary>This property allows you to cut/boost signal on the "mid2" range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerMid2Center">
            <summary>This property sets the center frequency for the "mid2" range. Unit: Hz Range [1000.0f .. 8000.0f] Default: 3000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerMid2Width">
            <summary>This property controls the width of the "mid2" range. Range [0.01f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerHighGain">
            <summary>This property allows to cut/boost the signal at high frequencies. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EqualizerHighCutoff">
            <summary>This property controls the high frequency above which signal will be cut off. Unit: Hz Range [4000.0f .. 16000.0f] Default: 6000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbDensity">
            <summary>Reverb Modal Density controls the coloration of the late reverb. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbDiffusion">
            <summary>The Reverb Diffusion property controls the echo density in the reverberation decay. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbGain">
            <summary>Reverb Gain controls the level of the reverberant sound in an environment. A high level of reverb is characteristic of rooms with highly reflective walls and/or small dimensions. Unit: Linear gain Range [0.0f .. 1.0f] Default: 0.32f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbGainHF">
            <summary>Gain HF is used to attenuate the high frequency content of all the reflected sound in an environment. You can use this property to give a room specific spectral characteristic. Unit: Linear gain Range [0.0f .. 1.0f] Default: 0.89f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbGainLF">
            <summary>Gain LF is the low frequency counterpart to Gain HF. Use this to reduce or boost the low frequency content in an environment. Unit: Linear gain Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbDecayTime">
            <summary>The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with very dead surfaces) to 20.0f (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f] Default: 1.49f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbDecayHFRatio">
            <summary>Decay HF Ratio scales the decay time of high frequencies relative to the value of the Decay Time property. By changing this value, you are changing the amount of time it takes for the high frequencies to decay compared to the mid frequencies of the reverb. Range [0.1f .. 2.0f] Default: 0.83f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbDecayLFRatio">
            <summary>Decay LF Ratio scales the decay time of low frequencies in the reverberation in the same manner that Decay HF Ratio handles high frequencies. Unit: Linear multiplier Range [0.1f .. 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbReflectionsGain">
            <summary>Reflections Gain sets the level of the early reflections in an environment. Early reflections are used as a cue for determining the size of the environment we are in. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbReflectionsDelay">
            <summary>Reflections Delay controls the amount of time it takes for the first reflected wave front to reach the listener, relative to the arrival of the direct-path sound. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbLateReverbGain">
            <summary>The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain property. Range [0.0f .. 10.0f] Default: 1.26f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbLateReverbDelay">
            <summary>The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range [0.0f .. 0.1f] Default: 0.011f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbEchoTime">
            <summary>Echo Time controls the rate at which the cyclic echo repeats itself along the reverberation decay. Range [0.075f .. 0.25f] Default: 0.25f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbEchoDepth">
            <summary>Echo Depth introduces a cyclic echo in the reverberation decay, which will be noticeable with transient or percussive sounds. Range [0.0f .. 1.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbModulationTime">
            <summary>Modulation Time controls the speed of the rate of periodic changes in pitch (vibrato). Range [0.04f .. 4.0f] Default: 0.25f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbModulationDepth">
            <summary>Modulation Depth controls the amount of pitch change. Low values of Diffusion will contribute to reinforcing the perceived effect by reducing the mixing of overlapping reflections in the reverberation decay. Range [0.0f .. 1.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbAirAbsorptionGainHF">
            <summary>The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by the propagation medium. It applies to reflected sound only. Range [0.892f .. 1.0f] Default: 0.994f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbHFReference">
            <summary>The property HF reference determines the frequency at which the high-frequency effects created by Reverb properties are measured. Unit: Hz Range [1000.0f .. 20000.0f] Default: 5000.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbLFReference">
            <summary>The property LF reference determines the frequency at which the low-frequency effects created by Reverb properties are measured. Unit: Hz Range [20.0f .. 1000.0f] Default: 250.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectf.EaxReverbRoomRolloffFactor">
            <summary>The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL Rolloff Factor, but operates on reverb sound instead of direct-path sound. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxEffect3f">
            <summary>A list of valid Math.Vector3 Effect/GetEffect parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffect3f.EaxReverbLateReverbPan">
            <summary>Reverb Pan does for the Reverb what Reflections Pan does for the Reflections. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}</summary>  
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffect3f.EaxReverbReflectionsPan">
            <summary>This Vector3 controls the spatial distribution of the cluster of early reflections. The direction of this vector controls the global direction of the reflections, while its magnitude controls how focused the reflections are towards this direction. For legacy reasons this Vector3 follows a left-handed co-ordinate system! Note that OpenAL uses a right-handed coordinate system. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxEffecti">
            <summary>A list of valid Int32 Effect/GetEffect parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.ChorusWaveform">
            <summary>This property sets the waveform shape of the low-frequency oscillator that controls the delay time of the delayed signals. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.ChorusPhase">
            <summary>This property controls the phase difference between the left and right low-frequency oscillators. At zero degrees the two low-frequency oscillators are synchronized. Unit: Degrees Range [-180 .. 180] Default: 90</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.FlangerWaveform">
            <summary>Selects the shape of the low-frequency oscillator waveform that controls the amount of the delay of the sampled signal. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.FlangerPhase">
            <summary>This changes the phase difference between the left and right low-frequency oscillator's. At zero degrees the two low-frequency oscillators are synchronized. Range [-180 .. +180] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.FrequencyShifterLeftDirection">
            <summary>These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.FrequencyShifterRightDirection">
            <summary>These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeA">
            <summary>Sets the vocal morpher 4-band formant filter A, used to impose vocal tract effects upon the input signal. The vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 0, "Phoneme A"</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeACoarseTuning">
            <summary>This is used to adjust the pitch of phoneme filter A in 1-semitone increments. Unit: Semitones Range [-24 .. +24] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeB">
            <summary>Sets the vocal morpher 4-band formant filter B, used to impose vocal tract effects upon the input signal. The vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 10, "Phoneme ER"</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeBCoarseTuning">
            <summary>This is used to adjust the pitch of phoneme filter B in 1-semitone increments. Unit: Semitones Range [-24 .. +24] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.VocalMorpherWaveform">
            <summary>This controls the shape of the low-frequency oscillator used to morph between the two phoneme filters. Unit: (0) Sinusoid, (1) Triangle, (2) Sawtooth Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.PitchShifterCoarseTune">
            <summary>This sets the number of semitones by which the pitch is shifted. There are 12 semitones per octave. Unit: Semitones Range [-12 .. +12] Default: +12</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.PitchShifterFineTune">
            <summary>This sets the number of cents between Semitones a pitch is shifted. A Cent is 1/100th of a Semitone. Unit: Cents Range [-50 .. +50] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.RingModulatorWaveform">
            <summary>This controls which waveform is used as the carrier signal. Traditional ring modulator and tremolo effects generally use a sinusoidal carrier. Unit: (0) Sinusoid, (1) Sawtooth, (2) Square Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.CompressorOnoff">
            <summary>Enabling this will result in audio exhibiting smaller variation in intensity between the loudest and quietest portions. Unit: (0) Off, (1) On Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.ReverbDecayHFLimit">
            <summary>When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived from the setting of the property Air Absorption HF. Unit: (0) False, (1) True Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.EaxReverbDecayHFLimit">
            <summary>When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived from the setting of the property AirAbsorptionGainHF. Unit: (0) False, (1) True Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffecti.EffectType">
            <summary>Used with the enum EfxEffectType as it's parameter.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxFormantFilterSettings">
            <summary>Vocal morpher effect parameters. If both parameters are set to the same phoneme, that determines the filtering effect that will be heard. If these two parameters are set to different phonemes, the filtering effect will morph between the two settings at a rate specified by EfxEffectf.VocalMorpherRate.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeA">
            <summary>
            The A phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeE">
            <summary>
            The E phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeI">
            <summary>
            The I phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeO">
            <summary>
            The O phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeU">
            <summary>
            The U phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAA">
            <summary>
            The AA phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAE">
            <summary>
            The AE phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAH">
            <summary>
            The AH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAO">
            <summary>
            The AO phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeEH">
            <summary>
            The EH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeER">
            <summary>
            The ER phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeIH">
            <summary>
            The IH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeIY">
            <summary>
            The IY phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeUH">
            <summary>
            The UH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeUW">
            <summary>
            The UW phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeB">
            <summary>
            The B phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeD">
            <summary>
            The D phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeF">
            <summary>
            The F phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeG">
            <summary>
            The G phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeJ">
            <summary>
            The J phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeK">
            <summary>
            The K phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeL">
            <summary>
            The L phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeM">
            <summary>
            The M phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeN">
            <summary>
            The N phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeP">
            <summary>
            The P phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeR">
            <summary>
            The R phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeS">
            <summary>
            The S phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeT">
            <summary>
            The T phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeV">
            <summary>
            The V phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeZ">
            <summary>
            The Z phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxEffectType">
            <summary>Effect type definitions to be used with EfxEffecti.EffectType.</summary>  
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Null">
            <summary>No Effect, disable. This Effect type is used when an Effect object is initially created.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Reverb">
            <summary>The Reverb effect is the standard Effects Extension's environmental reverberation effect. It is available on all Generic Software and Generic Hardware devices.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Chorus">
            <summary>The Chorus effect essentially replays the input audio accompanied by another slightly delayed version of the signal, creating a "doubling" effect.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Distortion">
            <summary>The Distortion effect simulates turning up (overdriving) the gain stage on a guitar amplifier or adding a distortion pedal to an instrument's output.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Echo">
            <summary>The Echo effect generates discrete, delayed instances of the input signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Flanger">
            <summary>The Flanger effect creates a "tearing" or "whooshing" sound, like a jet flying overhead.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.FrequencyShifter">
            <summary>The Frequency shifter is a single-sideband modulator, which translates all the component frequencies of the input signal by an equal amount.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.VocalMorpher">
            <summary>The Vocal morpher consists of a pair of 4-band formant filters, used to impose vocal tract effects upon the input signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.PitchShifter">
            <summary>The Pitch shifter applies time-invariant pitch shifting to the input signal, over a one octave range and controllable at a semi-tone and cent resolution.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.RingModulator">
            <summary>The Ring modulator multiplies an input signal by a carrier signal in the time domain, resulting in tremolo or inharmonic effects.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Autowah">
            <summary>The Auto-wah effect emulates the sound of a wah-wah pedal used with an electric guitar, or a mute on a brass instrument.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Compressor">
            <summary>The Compressor will boost quieter portions of the audio, while louder portions will stay the same or may even be reduced.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.Equalizer">
            <summary>The Equalizer is very flexible, providing tonal control over four different adjustable frequency ranges.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxEffectType.EaxReverb">
            <summary>The EAX Reverb has a more advanced parameter set than EfxEffectType.Reverb, but is only natively supported on devices that support the EAX 3.0 or above.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxAuxiliaryi">
            <summary>A list of valid Int32 AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxAuxiliaryi.EffectslotEffect">
            <summary>This property is used to attach an Effect object to the Auxiliary Effect Slot object. After the attachment, the Auxiliary Effect Slot object will contain the effect type and have the same effect parameters that were stored in the Effect object. Any Sources feeding the Auxiliary Effect Slot will immediate feed the new effect type and new effect parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxAuxiliaryi.EffectslotAuxiliarySendAuto">
            <summary>This property is used to enable or disable automatic send adjustments based on the physical positions of the sources and the listener. This property should be enabled when an application wishes to use a reverb effect to simulate the environment surrounding a listener or a collection of Sources. Range [False, True] Default: True </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxAuxiliaryf">
            <summary>A list of valid 32-bits Float AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxAuxiliaryf.EffectslotGain">
            <summary>This property is used to specify an output level for the Auxiliary Effect Slot. Setting the gain to 0.0f mutes the output. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxFilterf">
            <summary>A list of valid 32-bits Float Filter/GetFilter parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.LowpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.LowpassGainHF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.HighpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.HighpassGainLF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.BandpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.BandpassGainLF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterf.BandpassGainHF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxFilteri">
            <summary>A list of valid Int32 Filter/GetFilter parameters</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilteri.FilterType">
            <summary>Used with the enum EfxFilterType as Parameter to select a filter logic.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.EfxFilterType">
            <summary>Filter type definitions to be used with EfxFilteri.FilterType.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterType.Null">
            <summary>No Filter, disable. This Filter type is used when a Filter object is initially created.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterType.Lowpass">
            <summary>A low-pass filter is used to remove high frequency content from a signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterType.Highpass">
            <summary>Currently not implemented. A high-pass filter is used to remove low frequency content from a signal.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.EfxFilterType.Bandpass">
            <summary>Currently not implemented. A band-pass filter is used to remove high and low frequency content from a signal.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.XRamExtension">
            <summary>
            The X-Ram Extension is provided on the top-end Sound Blaster X-Fi solutions (Sound Blaster X-Fi Fatal1ty, Sound Blaster X-Fi Elite Pro, or later).
            These products feature 64MB of X-Ram that can only be used for audio purposes, which can be controlled by this Extension.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.XRamExtension.IsInitialized">
            <summary>Returns True if the X-Ram Extension has been found and could be initialized.</summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.XRamExtension.#ctor">
            <summary>
            Constructs a new XRamExtension instance.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.XRamExtension.GetRamSize">
            <summary>Query total amount of X-RAM in bytes.</summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.XRamExtension.GetRamFree">
            <summary>Query free X-RAM available in bytes.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.XRamExtension.XRamStorage">
            <summary>This enum is used to abstract the need of using AL.GetEnumValue() with the Extension. The values do NOT correspond to AL_STORAGE_* tokens!</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.XRamExtension.XRamStorage.Automatic">
            <summary>Put an Open AL Buffer into X-RAM if memory is available, otherwise use host RAM.  This is the default mode.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.XRamExtension.XRamStorage.Hardware">
            <summary>Force an Open AL Buffer into X-RAM, good for non-streaming buffers.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.XRamExtension.XRamStorage.Accessible">
            <summary>Force an Open AL Buffer into 'accessible' (currently host) RAM, good for streaming buffers.</summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.XRamExtension.SetBufferMode(System.Int32,System.UInt32@,OpenTK.Audio.OpenAL.XRamExtension.XRamStorage)">
            <summary>This function is used to set the storage Mode of an array of OpenAL Buffers.</summary>
            <param name="n">The number of OpenAL Buffers pointed to by buffer.</param>
            <param name="buffer">An array of OpenAL Buffer handles.</param>
            <param name="mode">The storage mode that should be used for all the given buffers. Should be the value of one of the following enum names: XRamStorage.Automatic, XRamStorage.Hardware, XRamStorage.Accessible</param>
            <returns>True if all the Buffers were successfully set to the requested storage mode, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.XRamExtension.SetBufferMode(System.Int32,System.Int32@,OpenTK.Audio.OpenAL.XRamExtension.XRamStorage)">
            <summary>This function is used to set the storage Mode of an array of OpenAL Buffers.</summary>
            <param name="n">The number of OpenAL Buffers pointed to by buffer.</param>
            <param name="buffer">An array of OpenAL Buffer handles.</param>
            <param name="mode">The storage mode that should be used for all the given buffers. Should be the value of one of the following enum names: XRamStorage.Automatic, XRamStorage.Hardware, XRamStorage.Accessible</param>
            <returns>True if all the Buffers were successfully set to the requested storage mode, False otherwise.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.XRamExtension.GetBufferMode(System.UInt32@)">
            <summary>This function is used to retrieve the storage Mode of a single OpenAL Buffer.</summary>
            <param name="buffer">The handle of an OpenAL Buffer.</param>
            <returns>The current Mode of the Buffer.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.XRamExtension.GetBufferMode(System.Int32@)">
            <summary>This function is used to retrieve the storage Mode of a single OpenAL Buffer.</summary>
            <param name="buffer">The handle of an OpenAL Buffer.</param>
            <returns>The current Mode of the Buffer.</returns>
        </member>
        <member name="T:OpenTK.AutoGeneratedAttribute">
            <summary>
            Indicates that this function is generated automatically by a tool.
            </summary>
        </member>
        <member name="F:OpenTK.AutoGeneratedAttribute.Category">
            <summary>
            Specifies the category of this OpenGL function.
            </summary>
        </member>
        <member name="F:OpenTK.AutoGeneratedAttribute.Version">
            <summary>
            Specifies the version of this OpenGL function.
            </summary>
        </member>
        <member name="F:OpenTK.AutoGeneratedAttribute.EntryPoint">
            <summary>
            Specifies the entry point of the OpenGL function.
            </summary>
        </member>
        <member name="M:OpenTK.AutoGeneratedAttribute.#ctor">
            <summary>
            Constructs a new AutoGeneratedAttribute instance.
            </summary>
        </member>
        <member name="T:OpenTK.BindingsBase">
            <summary>
            Provides a common foundation for all flat API bindings and implements the extension loading interface.
            </summary>
        </member>
        <member name="F:OpenTK.BindingsBase.DelegatesClass">
            <summary>
            A reflection handle to the nested type that contains the function delegates.
            </summary>
        </member>
        <member name="F:OpenTK.BindingsBase.CoreClass">
            <summary>
            A refection handle to the nested type that contains core functions (i.e. not extensions).
            </summary>
        </member>
        <member name="F:OpenTK.BindingsBase.CoreFunctionMap">
            <summary>
            A mapping of core function names to MethodInfo handles.
            </summary>
        </member>
        <member name="M:OpenTK.BindingsBase.#ctor">
            <summary>
            Constructs a new BindingsBase instance.
            </summary>
        </member>
        <member name="P:OpenTK.BindingsBase.RebuildExtensionList">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> that indicates whether the list of supported extensions may have changed.
            </summary>
        </member>
        <member name="M:OpenTK.BindingsBase.GetAddress(System.String)">
            <summary>
            Retrieves an unmanaged function pointer to the specified function.
            </summary>
            <param name="funcname">
            A <see cref="T:System.String"/> that defines the name of the function.
            </param>
            <returns>
            A <see cref="T:System.IntPtr"/> that contains the address of funcname or IntPtr.Zero,
            if the function is not supported by the drivers.
            </returns>
            <remarks>
            Note: some drivers are known to return non-zero values for unsupported functions.
            Typical values include 1 and 2 - inheritors are advised to check for and ignore these
            values.
            </remarks>
        </member>
        <member name="P:OpenTK.BindingsBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the bindings implementation.
            </summary>
            <remarks>This object should be unique across bindings but consistent between bindings
            of the same type. For example, ES10.GL, OpenGL.GL and CL10.CL should all return 
            unique objects, but all instances of ES10.GL should return the same object.</remarks>
        </member>
        <member name="T:OpenTK.BlittableValueType`1">
            <summary>
            Checks whether the specified type parameter is a blittable value type.
            </summary>
            <remarks>
            A blittable value type is a struct that only references other value types recursively,
            which allows it to be passed to unmanaged code directly.
            </remarks>
        </member>
        <member name="P:OpenTK.BlittableValueType`1.Stride">
            <summary>
            Gets the size of the type in bytes or 0 for non-blittable types.
            </summary>
            <remarks>
            This property returns 0 for non-blittable types.
            </remarks>
        </member>
        <member name="M:OpenTK.BlittableValueType`1.Check">
            <summary>
            Checks whether the current typename T is blittable.
            </summary>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BlittableValueType`1.Check(System.Type)">
            <summary>
            Checks whether type is a blittable value type.
            </summary>
            <param name="type">A System.Type to check.</param>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.BlittableValueType">
            <summary>
            Checks whether the specified type parameter is a blittable value type.
            </summary>
            <remarks>
            A blittable value type is a struct that only references other value types recursively,
            which allows it to be passed to unmanaged code directly.
            </remarks>
        </member>
        <member name="M:OpenTK.BlittableValueType.Check``1(``0)">
            <summary>
            Checks whether type is a blittable value type.
            </summary>
            <param name="type">An instance of the type to check.</param>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BlittableValueType.Check``1(``0[])">
            <summary>
            Checks whether type is a blittable value type.
            </summary>
            <param name="type">An instance of the type to check.</param>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BlittableValueType.Check``1(``0[0:,0:])">
            <summary>
            Checks whether type is a blittable value type.
            </summary>
            <param name="type">An instance of the type to check.</param>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BlittableValueType.Check``1(``0[0:,0:,0:])">
            <summary>
            Checks whether type is a blittable value type.
            </summary>
            <param name="type">An instance of the type to check.</param>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BlittableValueType.Check``1(``0[][])">
            <summary>
            Checks whether type is a blittable value type.
            </summary>
            <param name="type">An instance of the type to check.</param>
            <returns>True if T is blittable; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BlittableValueType.StrideOf``1(``0)">
            <summary>
            Returns the size of the specified value type in bytes or 0 if the type is not blittable.
            </summary>
            <typeparam name="T">The value type. Must be blittable.</typeparam>
            <param name="type">An instance of the value type.</param>
            <returns>An integer, specifying the size of the type in bytes.</returns>
            <exception cref="T:System.ArgumentException">Occurs when type is not blittable.</exception>
        </member>
        <member name="M:OpenTK.BlittableValueType.StrideOf``1(``0[])">
            <summary>
            Returns the size of a single array element in bytes  or 0 if the element is not blittable.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="type">An instance of the value type.</param>
            <returns>An integer, specifying the size of the type in bytes.</returns>
            <exception cref="T:System.ArgumentException">Occurs when type is not blittable.</exception>
        </member>
        <member name="M:OpenTK.BlittableValueType.StrideOf``1(``0[0:,0:])">
            <summary>
            Returns the size of a single array element in bytes or 0 if the element is not blittable.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="type">An instance of the value type.</param>
            <returns>An integer, specifying the size of the type in bytes.</returns>
            <exception cref="T:System.ArgumentException">Occurs when type is not blittable.</exception>
        </member>
        <member name="M:OpenTK.BlittableValueType.StrideOf``1(``0[0:,0:,0:])">
            <summary>
            Returns the size of a single array element in bytes or 0 if the element is not blittable.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="type">An instance of the value type.</param>
            <returns>An integer, specifying the size of the type in bytes.</returns>
            <exception cref="T:System.ArgumentException">Occurs when type is not blittable.</exception>
        </member>
        <member name="T:OpenTK.Configuration">
            <summary>Provides information about the underlying OS and runtime.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnAndroid">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on a Windows platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnWindows">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on a Windows platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnX11">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on an X11 platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnUnix">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether OpenTK is running on a Unix platform.
            </summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnLinux">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on an X11 platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnMacOS">
            <summary>Gets a System.Boolean indicating whether OpenTK is running on a MacOS platform.</summary>
        </member>
        <member name="P:OpenTK.Configuration.RunningOnMono">
            <summary>
            Gets a System.Boolean indicating whether OpenTK is running on the Mono runtime.
            </summary>
        </member>
        <member name="M:OpenTK.Configuration.DetectUnixKernel">
            <summary>
            Detects the unix kernel by p/invoking uname (libc).
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTK.ContextHandle">
            <summary>
            Represents a handle to an OpenGL or OpenAL context.
            </summary>
        </member>
        <member name="P:OpenTK.ContextHandle.Handle">
            <summary>
            Gets a System.IntPtr that represents the handle of this ContextHandle.
            </summary>
        </member>
        <member name="F:OpenTK.ContextHandle.Zero">
            <summary>A read-only field that represents a handle that has been initialized to zero.</summary>
        </member>
        <member name="M:OpenTK.ContextHandle.#ctor(System.IntPtr)">
            <summary>
            Constructs a new instance with the specified handle.
            </summary>
            <param name="h">A System.IntPtr containing the value for this instance.</param>
        </member>
        <member name="M:OpenTK.ContextHandle.ToString">
            <summary>
            Converts this instance to its equivalent string representation.
            </summary>
            <returns>A System.String that contains the string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.Equals(System.Object)">
            <summary>
            Compares this instance to the specified object.
            </summary>
            <param name="obj">The System.Object to compare to.</param>
            <returns>True if obj is a ContextHandle that is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A System.Int32 with the hash code of this instance.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Explicit(OpenTK.ContextHandle)~System.IntPtr">
            <summary>
            Converts the specified ContextHandle to the equivalent IntPtr.
            </summary>
            <param name="c">The ContextHandle to convert.</param>
            <returns>A System.IntPtr equivalent to the specified ContextHandle.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Explicit(System.IntPtr)~OpenTK.ContextHandle">
            <summary>
            Converts the specified IntPtr to the equivalent ContextHandle.
            </summary>
            <param name="p">The System.IntPtr to convert.</param>
            <returns>A ContextHandle equivalent to the specified IntPtr.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Equality(OpenTK.ContextHandle,OpenTK.ContextHandle)">
            <summary>
            Compares two ContextHandles for equality.
            </summary>
            <param name="left">The ContextHandle to compare.</param>
            <param name="right">The ContextHandle to compare to.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.op_Inequality(OpenTK.ContextHandle,OpenTK.ContextHandle)">
            <summary>
            Compares two ContextHandles for inequality.
            </summary>
            <param name="left">The ContextHandle to compare.</param>
            <param name="right">The ContextHandle to compare to.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.CompareTo(OpenTK.ContextHandle)">
            <summary>
            Compares the numerical value of this instance to the specified ContextHandle and
            returns a value indicating their relative order.
            </summary>
            <param name="other">The ContextHandle to compare to.</param>
            <returns>Less than 0, if this instance is less than other; 0 if both are equal; Greater than 0 if other is greater than this instance.</returns>
        </member>
        <member name="M:OpenTK.ContextHandle.Equals(OpenTK.ContextHandle)">
            <summary>
            Compares this instance to the specified ContextHandle for equality.
            </summary>
            <param name="other">The ContextHandle to compare to.</param>
            <returns>True if this instance is equal to other; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.DisplayDevice">
            <summary>
            Defines a display device on the underlying system, and provides
            methods to query and change its display parameters.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.Bounds">
            <summary>
            Gets the bounds of this instance in pixel coordinates..
            </summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.Width">
            <summary>Gets a System.Int32 that contains the width of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.Height">
            <summary>Gets a System.Int32 that contains the height of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.BitsPerPixel">
            <summary>Gets a System.Int32 that contains number of bits per pixel of this display. Typical values include 8, 16, 24 and 32.</summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.RefreshRate">
            <summary>
            Gets a System.Single representing the vertical refresh rate of this display.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.IsPrimary">
            <summary>Gets a System.Boolean that indicates whether this Display is the primary Display in systems with multiple Displays.</summary>
        </member>
        <member name="M:OpenTK.DisplayDevice.SelectResolution(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Selects an available resolution that matches the specified parameters.
            </summary>
            <param name="width">The width of the requested resolution in pixels.</param>
            <param name="height">The height of the requested resolution in pixels.</param>
            <param name="bitsPerPixel">The bits per pixel of the requested resolution.</param>
            <param name="refreshRate">The refresh rate of the requested resolution in hertz.</param>
            <returns>The requested DisplayResolution or null if the parameters cannot be met.</returns>
            <remarks>
            <para>If a matching resolution is not found, this function will retry ignoring the specified refresh rate,
            bits per pixel and resolution, in this order. If a matching resolution still doesn't exist, this function will
            return the current resolution.</para>
            <para>A parameter set to 0 or negative numbers will not be used in the search (e.g. if refreshRate is 0,
            any refresh rate will be considered valid).</para>
            <para>This function allocates memory.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.DisplayDevice.AvailableResolutions">
            <summary>
            Gets the list of <see cref="T:OpenTK.DisplayResolution"/> objects available on this device.
            </summary>
        </member>
        <member name="M:OpenTK.DisplayDevice.ChangeResolution(OpenTK.DisplayResolution)">
            <summary>Changes the resolution of the DisplayDevice.</summary>
            <param name="resolution">The resolution to set. <see cref="M:OpenTK.DisplayDevice.SelectResolution(System.Int32,System.Int32,System.Int32,System.Single)"/></param>
            <exception cref="T:OpenTK.Graphics.GraphicsModeException">Thrown if the requested resolution could not be set.</exception>
            <remarks>If the specified resolution is null, this function will restore the original DisplayResolution.</remarks>
        </member>
        <member name="M:OpenTK.DisplayDevice.ChangeResolution(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>Changes the resolution of the DisplayDevice.</summary>
            <param name="width">The new width of the DisplayDevice.</param>
            <param name="height">The new height of the DisplayDevice.</param>
            <param name="bitsPerPixel">The new bits per pixel of the DisplayDevice.</param>
            <param name="refreshRate">The new refresh rate of the DisplayDevice.</param>
            <exception cref="T:OpenTK.Graphics.GraphicsModeException">Thrown if the requested resolution could not be set.</exception>
        </member>
        <member name="M:OpenTK.DisplayDevice.RestoreResolution">
            <summary>Restores the original resolution of the DisplayDevice.</summary>
            <exception cref="T:OpenTK.Graphics.GraphicsModeException">Thrown if the original resolution could not be restored.</exception>
        </member>
        <member name="P:OpenTK.DisplayDevice.AvailableDisplays">
            <summary>
            Gets the list of available <see cref="T:OpenTK.DisplayDevice"/> objects.
            This function allocates memory.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayDevice.Default">
            <summary>Gets the default (primary) display of this system.</summary>
        </member>
        <member name="M:OpenTK.DisplayDevice.GetDisplay(OpenTK.DisplayIndex)">
            <summary>
            Gets the <see cref="T:OpenTK.DisplayDevice"/> for the specified <see cref="T:OpenTK.DisplayIndex"/>.
            </summary>
            <param name="index">The <see cref="T:OpenTK.DisplayIndex"/> that defines the desired display.</param>
            <returns>A <see cref="T:OpenTK.DisplayDevice"/> or null, if no device corresponds to the specified index.</returns>
        </member>
        <member name="M:OpenTK.DisplayDevice.ToString">
            <summary>
            Returns a System.String representing this DisplayDevice.
            </summary>
            <returns>A System.String representing this DisplayDevice.</returns>
        </member>
        <member name="T:OpenTK.DisplayIndex">
            <summary>
            Defines <see cref="T:OpenTK.DisplayDevice"/> indices.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.First">
            <summary>
            The first DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Second">
            <summary>
            The second DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Third">
            <summary>
            The third DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Fourth">
            <summary>
            The fourth DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Fifth">
            <summary>
            The fifth DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Sixth">
            <summary>
            The sixth DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Primary">
            <summary>
            The default (primary) DisplayDevice.
            </summary>
        </member>
        <member name="F:OpenTK.DisplayIndex.Default">
            <summary>
            The default (primary) DisplayDevice.
            </summary>
        </member>
        <member name="T:OpenTK.DisplayResolution">
            <summary>Contains information regarding a monitor's display resolution.</summary>
        </member>
        <member name="P:OpenTK.DisplayResolution.Bounds">
            <summary>
            Gets a System.Drawing.Rectangle that contains the bounds of this display device.
            </summary>
        </member>
        <member name="P:OpenTK.DisplayResolution.Width">
            <summary>Gets a System.Int32 that contains the width of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.DisplayResolution.Height">
            <summary>Gets a System.Int32 that contains the height of this display in pixels.</summary>
        </member>
        <member name="P:OpenTK.DisplayResolution.BitsPerPixel">
            <summary>Gets a System.Int32 that contains number of bits per pixel of this display. Typical values include 8, 16, 24 and 32.</summary>
        </member>
        <member name="P:OpenTK.DisplayResolution.RefreshRate">
            <summary>
            Gets a System.Single representing the vertical refresh rate of this display.
            </summary>
        </member>
        <member name="M:OpenTK.DisplayResolution.ToString">
            <summary>
            Returns a System.String representing this DisplayResolution.
            </summary>
            <returns>A System.String representing this DisplayResolution.</returns>
        </member>
        <member name="M:OpenTK.DisplayResolution.Equals(System.Object)">
            <summary>Determines whether the specified resolutions are equal.</summary>
            <param name="obj">The System.Object to check against.</param>
            <returns>True if the System.Object is an equal DisplayResolution; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.DisplayResolution.GetHashCode">
            <summary>Returns a unique hash representing this resolution.</summary>
            <returns>A System.Int32 that may serve as a hash code for this resolution.</returns>
        </member>
        <member name="M:OpenTK.DisplayResolution.op_Equality(OpenTK.DisplayResolution,OpenTK.DisplayResolution)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.DisplayResolution.op_Inequality(OpenTK.DisplayResolution,OpenTK.DisplayResolution)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.ContextExistsException">
            <summary>
            This exception is thrown when a GraphicsContext property cannot be changed after creation.
            </summary>
        </member>
        <member name="M:OpenTK.ContextExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ContextExistsException instance.
            </summary>
            <param name="message">A System.String explaining the cause of this exception.</param>
        </member>
        <member name="P:OpenTK.ContextExistsException.Message">
            <summary>
            Gets a System.String explaining the cause of this exception.
            </summary>
        </member>
        <member name="T:OpenTK.FrameEventArgs">
            <summary>
            Defines the arguments for frame events.
            A FrameEventArgs instance is only valid for the duration of the relevant event;
            do not store references to FrameEventArgs outside this event.
            </summary>
        </member>
        <member name="M:OpenTK.FrameEventArgs.#ctor">
            <summary>
            Constructs a new FrameEventArgs instance. 
            </summary>
        </member>
        <member name="M:OpenTK.FrameEventArgs.#ctor(System.Double)">
            <summary>
            Constructs a new FrameEventArgs instance. 
            </summary>
            <param name="elapsed">The amount of time that has elapsed since the previous event, in seconds.</param>
        </member>
        <member name="P:OpenTK.FrameEventArgs.Time">
            <summary>
            Gets a <see cref="T:System.Double"/> that indicates how many seconds of time elapsed since the previous event.
            </summary>
        </member>
        <member name="T:OpenTK.GameWindowFlags">
            <summary>
            Defines bitwise combianations of GameWindow construction options.
            </summary>
        </member>
        <member name="F:OpenTK.GameWindowFlags.Default">
            <summary>
            Indicates default construction options.
            </summary>
        </member>
        <member name="F:OpenTK.GameWindowFlags.Fullscreen">
            <summary>
            Indicates that the GameWindow should cover the whole screen.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.Color4">
            <summary>
            Represents a color with 4 floating-point components (R, G, B, A).
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.R">
            <summary>
            The red component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.G">
            <summary>
            The green component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.B">
            <summary>
            The blue component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.Color4.A">
            <summary>
            The alpha component of this Color4 structure.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
            <param name="a">The alpha component of the new Color4 structure.</param>
        </member>
        <member name="M:OpenTK.Graphics.Color4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
            <param name="a">The alpha component of the new Color4 structure.</param>
        </member>
        <member name="M:OpenTK.Graphics.Color4.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new Color4 structure from the specified System.Drawing.Color.
            </summary>
            <param name="color">The System.Drawing.Color containing the component values.</param>
        </member>
        <member name="M:OpenTK.Graphics.Color4.ToArgb">
            <summary>
            Converts this color to an integer representation with 8 bits per channel.
            </summary>
            <returns>A <see cref="T:System.Int32"/> that represents this instance.</returns>
            <remarks>This method is intended only for compatibility with System.Drawing. It compresses the color into 8 bits per channel, which means color information is lost.</remarks>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Equality(OpenTK.Graphics.Color4,OpenTK.Graphics.Color4)">
            <summary>
            Compares the specified Color4 structures for equality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Inequality(OpenTK.Graphics.Color4,OpenTK.Graphics.Color4)">
            <summary>
            Compares the specified Color4 structures for inequality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Implicit(System.Drawing.Color)~OpenTK.Graphics.Color4">
            <summary>
            Converts the specified System.Drawing.Color to a Color4 structure.
            </summary>
            <param name="color">The System.Drawing.Color to convert.</param>
            <returns>A new Color4 structure containing the converted components.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.op_Explicit(OpenTK.Graphics.Color4)~System.Drawing.Color">
            <summary>
            Converts the specified Color4 to a System.Drawing.Color structure.
            </summary>
            <param name="color">The Color4 to convert.</param>
            <returns>A new System.Drawing.Color structure containing the converted components.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.Equals(System.Object)">
            <summary>
            Compares whether this Color4 structure is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
            <returns>True obj is a Color4 structure with the same components as this Color4; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.GetHashCode">
            <summary>
            Calculates the hash code for this Color4 structure.
            </summary>
            <returns>A System.Int32 containing the hashcode of this Color4 structure.</returns>
        </member>
        <member name="M:OpenTK.Graphics.Color4.ToString">
            <summary>
            Creates a System.String that describes this Color4 structure.
            </summary>
            <returns>A System.String that describes this Color4 structure.</returns>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Transparent">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 255, 255, 0).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.AliceBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (240, 248, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.AntiqueWhite">
            <summary>
            Gets the system color with (R, G, B, A) = (250, 235, 215, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Aqua">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 255, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Aquamarine">
            <summary>
            Gets the system color with (R, G, B, A) = (127, 255, 212, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Azure">
            <summary>
            Gets the system color with (R, G, B, A) = (240, 255, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Beige">
            <summary>
            Gets the system color with (R, G, B, A) = (245, 245, 220, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Bisque">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 228, 196, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Black">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 0, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.BlanchedAlmond">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 235, 205, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Blue">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 0, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.BlueViolet">
            <summary>
            Gets the system color with (R, G, B, A) = (138, 43, 226, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Brown">
            <summary>
            Gets the system color with (R, G, B, A) = (165, 42, 42, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.BurlyWood">
            <summary>
            Gets the system color with (R, G, B, A) = (222, 184, 135, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.CadetBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (95, 158, 160, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Chartreuse">
            <summary>
            Gets the system color with (R, G, B, A) = (127, 255, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Chocolate">
            <summary>
            Gets the system color with (R, G, B, A) = (210, 105, 30, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Coral">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 127, 80, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.CornflowerBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (100, 149, 237, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Cornsilk">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 248, 220, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Crimson">
            <summary>
            Gets the system color with (R, G, B, A) = (220, 20, 60, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Cyan">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 255, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 0, 139, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkCyan">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 139, 139, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkGoldenrod">
            <summary>
            Gets the system color with (R, G, B, A) = (184, 134, 11, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkGray">
            <summary>
            Gets the system color with (R, G, B, A) = (169, 169, 169, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 100, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkKhaki">
            <summary>
            Gets the system color with (R, G, B, A) = (189, 183, 107, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkMagenta">
            <summary>
            Gets the system color with (R, G, B, A) = (139, 0, 139, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkOliveGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (85, 107, 47, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkOrange">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 140, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkOrchid">
            <summary>
            Gets the system color with (R, G, B, A) = (153, 50, 204, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkRed">
            <summary>
            Gets the system color with (R, G, B, A) = (139, 0, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkSalmon">
            <summary>
            Gets the system color with (R, G, B, A) = (233, 150, 122, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkSeaGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (143, 188, 139, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkSlateBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (72, 61, 139, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkSlateGray">
            <summary>
            Gets the system color with (R, G, B, A) = (47, 79, 79, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkTurquoise">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 206, 209, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DarkViolet">
            <summary>
            Gets the system color with (R, G, B, A) = (148, 0, 211, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DeepPink">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 20, 147, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DeepSkyBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 191, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DimGray">
            <summary>
            Gets the system color with (R, G, B, A) = (105, 105, 105, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.DodgerBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (30, 144, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Firebrick">
            <summary>
            Gets the system color with (R, G, B, A) = (178, 34, 34, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.FloralWhite">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 250, 240, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.ForestGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (34, 139, 34, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Fuchsia">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 0, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Gainsboro">
            <summary>
            Gets the system color with (R, G, B, A) = (220, 220, 220, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.GhostWhite">
            <summary>
            Gets the system color with (R, G, B, A) = (248, 248, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Gold">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 215, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Goldenrod">
            <summary>
            Gets the system color with (R, G, B, A) = (218, 165, 32, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Gray">
            <summary>
            Gets the system color with (R, G, B, A) = (128, 128, 128, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Green">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 128, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.GreenYellow">
            <summary>
            Gets the system color with (R, G, B, A) = (173, 255, 47, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Honeydew">
            <summary>
            Gets the system color with (R, G, B, A) = (240, 255, 240, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.HotPink">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 105, 180, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.IndianRed">
            <summary>
            Gets the system color with (R, G, B, A) = (205, 92, 92, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Indigo">
            <summary>
            Gets the system color with (R, G, B, A) = (75, 0, 130, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Ivory">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 255, 240, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Khaki">
            <summary>
            Gets the system color with (R, G, B, A) = (240, 230, 140, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Lavender">
            <summary>
            Gets the system color with (R, G, B, A) = (230, 230, 250, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LavenderBlush">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 240, 245, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LawnGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (124, 252, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LemonChiffon">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 250, 205, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (173, 216, 230, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightCoral">
            <summary>
            Gets the system color with (R, G, B, A) = (240, 128, 128, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightCyan">
            <summary>
            Gets the system color with (R, G, B, A) = (224, 255, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightGoldenrodYellow">
            <summary>
            Gets the system color with (R, G, B, A) = (250, 250, 210, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (144, 238, 144, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightGray">
            <summary>
            Gets the system color with (R, G, B, A) = (211, 211, 211, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightPink">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 182, 193, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightSalmon">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 160, 122, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightSeaGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (32, 178, 170, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightSkyBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (135, 206, 250, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightSlateGray">
            <summary>
            Gets the system color with (R, G, B, A) = (119, 136, 153, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightSteelBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (176, 196, 222, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LightYellow">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 255, 224, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Lime">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 255, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.LimeGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (50, 205, 50, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Linen">
            <summary>
            Gets the system color with (R, G, B, A) = (250, 240, 230, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Magenta">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 0, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Maroon">
            <summary>
            Gets the system color with (R, G, B, A) = (128, 0, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumAquamarine">
            <summary>
            Gets the system color with (R, G, B, A) = (102, 205, 170, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 0, 205, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumOrchid">
            <summary>
            Gets the system color with (R, G, B, A) = (186, 85, 211, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumPurple">
            <summary>
            Gets the system color with (R, G, B, A) = (147, 112, 219, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumSeaGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (60, 179, 113, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumSlateBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (123, 104, 238, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumSpringGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 250, 154, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumTurquoise">
            <summary>
            Gets the system color with (R, G, B, A) = (72, 209, 204, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MediumVioletRed">
            <summary>
            Gets the system color with (R, G, B, A) = (199, 21, 133, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MidnightBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (25, 25, 112, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MintCream">
            <summary>
            Gets the system color with (R, G, B, A) = (245, 255, 250, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.MistyRose">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 228, 225, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Moccasin">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 228, 181, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.NavajoWhite">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 222, 173, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Navy">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 0, 128, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.OldLace">
            <summary>
            Gets the system color with (R, G, B, A) = (253, 245, 230, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Olive">
            <summary>
            Gets the system color with (R, G, B, A) = (128, 128, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.OliveDrab">
            <summary>
            Gets the system color with (R, G, B, A) = (107, 142, 35, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Orange">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 165, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.OrangeRed">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 69, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Orchid">
            <summary>
            Gets the system color with (R, G, B, A) = (218, 112, 214, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PaleGoldenrod">
            <summary>
            Gets the system color with (R, G, B, A) = (238, 232, 170, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PaleGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (152, 251, 152, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PaleTurquoise">
            <summary>
            Gets the system color with (R, G, B, A) = (175, 238, 238, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PaleVioletRed">
            <summary>
            Gets the system color with (R, G, B, A) = (219, 112, 147, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PapayaWhip">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 239, 213, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PeachPuff">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 218, 185, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Peru">
            <summary>
            Gets the system color with (R, G, B, A) = (205, 133, 63, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Pink">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 192, 203, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Plum">
            <summary>
            Gets the system color with (R, G, B, A) = (221, 160, 221, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.PowderBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (176, 224, 230, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Purple">
            <summary>
            Gets the system color with (R, G, B, A) = (128, 0, 128, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Red">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 0, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.RosyBrown">
            <summary>
            Gets the system color with (R, G, B, A) = (188, 143, 143, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.RoyalBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (65, 105, 225, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SaddleBrown">
            <summary>
            Gets the system color with (R, G, B, A) = (139, 69, 19, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Salmon">
            <summary>
            Gets the system color with (R, G, B, A) = (250, 128, 114, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SandyBrown">
            <summary>
            Gets the system color with (R, G, B, A) = (244, 164, 96, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SeaGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (46, 139, 87, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SeaShell">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 245, 238, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Sienna">
            <summary>
            Gets the system color with (R, G, B, A) = (160, 82, 45, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Silver">
            <summary>
            Gets the system color with (R, G, B, A) = (192, 192, 192, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SkyBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (135, 206, 235, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SlateBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (106, 90, 205, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SlateGray">
            <summary>
            Gets the system color with (R, G, B, A) = (112, 128, 144, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Snow">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 250, 250, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SpringGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 255, 127, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.SteelBlue">
            <summary>
            Gets the system color with (R, G, B, A) = (70, 130, 180, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Tan">
            <summary>
            Gets the system color with (R, G, B, A) = (210, 180, 140, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Teal">
            <summary>
            Gets the system color with (R, G, B, A) = (0, 128, 128, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Thistle">
            <summary>
            Gets the system color with (R, G, B, A) = (216, 191, 216, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Tomato">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 99, 71, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Turquoise">
            <summary>
            Gets the system color with (R, G, B, A) = (64, 224, 208, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Violet">
            <summary>
            Gets the system color with (R, G, B, A) = (238, 130, 238, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Wheat">
            <summary>
            Gets the system color with (R, G, B, A) = (245, 222, 179, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.White">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 255, 255, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.WhiteSmoke">
            <summary>
            Gets the system color with (R, G, B, A) = (245, 245, 245, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.Yellow">
            <summary>
            Gets the system color with (R, G, B, A) = (255, 255, 0, 255).
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.Color4.YellowGreen">
            <summary>
            Gets the system color with (R, G, B, A) = (154, 205, 50, 255).
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.Color4.Equals(OpenTK.Graphics.Color4)">
            <summary>
            Compares whether this Color4 structure is equal to the specified Color4.
            </summary>
            <param name="other">The Color4 structure to compare to.</param>
            <returns>True if both Color4 structures contain the same components; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.Graphics.ColorFormat">
            <summary>Defines the ColorFormat component of a GraphicsMode.</summary>
            <remarks>
            <para>A ColorFormat contains Red, Green, Blue and Alpha components that descibe
            the allocated bits per pixel for the corresponding color.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.#ctor(System.Int32)">
            <summary>
            Constructs a new ColorFormat with the specified aggregate bits per pixel.
            </summary>
            <param name="bpp">The bits per pixel sum for the Red, Green, Blue and Alpha color channels.</param>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new ColorFormat with the specified bits per pixel for 
            the Red, Green, Blue and Alpha color channels.
            </summary>
            <param name="red">Bits per pixel for the Red color channel.</param>
            <param name="green">Bits per pixel for the Green color channel.</param>
            <param name="blue">Bits per pixel for the Blue color channel.</param>
            <param name="alpha">Bits per pixel for the Alpha color channel.</param>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Red">
            <summary>Gets the bits per pixel for the Red channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Green">
            <summary>Gets the bits per pixel for the Green channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Blue">
            <summary>Gets the bits per pixel for the Blue channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.Alpha">
            <summary>Gets the bits per pixel for the Alpha channel.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.IsIndexed">
            <summary>Gets a System.Boolean indicating whether this ColorFormat is indexed.</summary>
        </member>
        <member name="P:OpenTK.Graphics.ColorFormat.BitsPerPixel">
            <summary>Gets the sum of Red, Green, Blue and Alpha bits per pixel.</summary>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_Implicit(System.Int32)~OpenTK.Graphics.ColorFormat">
            <summary>
            Converts the specified bpp into a new ColorFormat.
            </summary>
            <param name="bpp">The bits per pixel to convert.</param>
            <returns>A ColorFormat with the specified bits per pixel.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.CompareTo(OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances.
            </summary>
            <param name="other">The other instance.</param>
            <returns>
            Zero if this instance is equal to other;
            a positive value  if this instance is greater than other;
            a negative value otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if this instance is equal to obj; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_Equality(OpenTK.Graphics.ColorFormat,OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_Inequality(OpenTK.Graphics.ColorFormat,OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_GreaterThan(OpenTK.Graphics.ColorFormat,OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True if left is greater than right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_GreaterThanOrEqual(OpenTK.Graphics.ColorFormat,OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True if left is greater than or equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_LessThan(OpenTK.Graphics.ColorFormat,OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True if left is less than right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.op_LessThanOrEqual(OpenTK.Graphics.ColorFormat,OpenTK.Graphics.ColorFormat)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True if left is less than or equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A System.Int32 with the hash code of this instance.</returns>
        </member>
        <member name="M:OpenTK.Graphics.ColorFormat.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that describes this instance.</returns>
        </member>
        <member name="T:OpenTK.Graphics.ES10.GL">
            <summary>
            Provides access to OpenGL ES 1.0 methods.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.ES10.GL.SyncRoot">
            <summary>
            Returns a synchronization token unique for the GL class.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.ES11.GL">
            <summary>
            Provides access to OpenGL ES 1.1 methods.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.ES11.GL.SyncRoot">
            <summary>
            Returns a synchronization token unique for the GL class.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.ES20.GL">
            <summary>
            Provides access to OpenGL ES 2.0 methods.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.ES20.GL.SyncRoot">
            <summary>
            Returns a synchronization token unique for the GL class.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.ES30.GL">
            <summary>
            Provides access to OpenGL ES 3.0 methods.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.ES30.GL.SyncRoot">
            <summary>
            Returns a synchronization token unique for the GL class.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.ES31.GL">
            <summary>
            Provides access to OpenGL ES 3.1 methods.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.ES31.GL.SyncRoot">
            <summary>
            Returns a synchronization token unique for the GL class.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsBindingsBase">
            <summary>
            Implements BindingsBase for the OpenTK.Graphics namespace (OpenGL and OpenGL|ES).
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsBindingsBase.GetAddress(System.String)">
            <summary>
            Retrieves an unmanaged function pointer to the specified function.
            </summary>
            <param name="funcname">
            A <see cref="T:System.String"/> that defines the name of the function.
            </param>
            <returns>
            A <see cref="T:System.IntPtr"/> that contains the address of funcname or IntPtr.Zero,
            if the function is not supported by the drivers.
            </returns>
            <remarks>
            Note: some drivers are known to return non-zero values for unsupported functions.
            Typical values include 1 and 2 - inheritors are advised to check for and ignore these
            values.
            </remarks>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContext">
            <summary>
            Represents and provides methods to manipulate an OpenGL render context.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.#ctor(OpenTK.Graphics.GraphicsMode,OpenTK.Platform.IWindowInfo)">
            <summary>
            Constructs a new GraphicsContext with the specified GraphicsMode and attaches it to the specified window.
            </summary>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GraphicsContext.</param>
            <param name="window">The OpenTK.Platform.IWindowInfo to attach the GraphicsContext to.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.#ctor(OpenTK.Graphics.GraphicsMode,OpenTK.Platform.IWindowInfo,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
            <summary>
            Constructs a new GraphicsContext with the specified GraphicsMode, version and flags,  and attaches it to the specified window.
            </summary>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the GraphicsContext.</param>
            <param name="window">The OpenTK.Platform.IWindowInfo to attach the GraphicsContext to.</param>
            <param name="major">The major version of the new GraphicsContext.</param>
            <param name="minor">The minor version of the new GraphicsContext.</param>
            <param name="flags">The GraphicsContextFlags for the GraphicsContext.</param>
            <remarks>
            Different hardware supports different flags, major and minor versions. Invalid parameters will be silently ignored.
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.#ctor(OpenTK.ContextHandle,OpenTK.Platform.IWindowInfo)">
            <summary>
            Constructs a new GraphicsContext from a pre-existing context created outside of OpenTK.
            </summary>
            <param name="handle">The handle of the existing context. This must be a valid, unique handle that is not known to OpenTK.</param>
            <param name="window">The window this context is bound to. This must be a valid window obtained through Utilities.CreateWindowInfo.</param>
            <exception cref="T:OpenTK.Graphics.GraphicsContextException">Occurs if handle is identical to a context already registered with OpenTK.</exception>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.#ctor(OpenTK.ContextHandle,OpenTK.Platform.IWindowInfo,OpenTK.Graphics.IGraphicsContext,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
            <summary>
            Constructs a new GraphicsContext from a pre-existing context created outside of OpenTK.
            </summary>
            <param name="handle">The handle of the existing context. This must be a valid, unique handle that is not known to OpenTK.</param>
            <param name="window">The window this context is bound to. This must be a valid window obtained through Utilities.CreateWindowInfo.</param>
            <param name="shareContext">A different context that shares resources with this instance, if any.
            Pass null if the context is not shared or if this is the first GraphicsContext instruct you construct.</param>
            <param name="major">The major version of the context (e.g. "2" for "2.1").</param>
            <param name="minor">The minor version of the context (e.g. "1" for "2.1").</param>
            <param name="flags">A bitwise combination of <see cref="T:OpenTK.Graphics.GraphicsContextFlags"/> that describe this context.</param>
            <exception cref="T:OpenTK.Graphics.GraphicsContextException">Occurs if handle is identical to a context already registered with OpenTK.</exception>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representing this instance.
            </summary>
            <returns>A <see cref="T:System.String"/>  that contains a string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A System.Int32 with the hash code of this instance.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Equals(System.Object)">
            <summary>
            Compares two instances.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True, if obj is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.CreateDummyContext">
            <summary>
            Creates a dummy GraphicsContext to allow OpenTK to work with contexts created by external libraries.
            </summary>
            <returns>A new, dummy GraphicsContext instance.</returns>
            <remarks>
            <para>Instances created by this method will not be functional. Instance methods will have no effect.</para>
            <para>This method requires that a context is current on the calling thread.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.CreateDummyContext(OpenTK.ContextHandle)">
            <summary>
            Creates a dummy GraphicsContext to allow OpenTK to work with contexts created by external libraries.
            </summary>
            <param name="handle">The handle of a context.</param>
            <returns>A new, dummy GraphicsContext instance.</returns>
            <remarks>
            <para>Instances created by this method will not be functional. Instance methods will have no effect.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Assert">
            <summary>
            Checks if a GraphicsContext exists in the calling thread and throws a GraphicsContextMissingException if it doesn't.
            </summary>
            <exception cref="T:OpenTK.Graphics.GraphicsContextMissingException">Generated when no GraphicsContext is current in the calling thread.</exception>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.CurrentContext">
            <summary>
            Gets the GraphicsContext that is current in the calling thread.
            </summary>
            <remarks>
            Note: this property will not function correctly when both desktop and EGL contexts are
            available in the same process. This scenario is very unlikely to appear in practice.
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.ShareContexts">
            <summary>Gets or sets a System.Boolean, indicating whether GraphicsContext resources are shared</summary>
            <remarks>
            <para>If ShareContexts is true, new GLContexts will share resources. If this value is
            false, new GLContexts will not share resources.</para>
            <para>Changing this value will not affect already created GLContexts.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.DirectRendering">
            <summary>Gets or sets a System.Boolean, indicating whether GraphicsContexts will perform direct rendering.</summary>
            <remarks>
            <para>
            If DirectRendering is true, new contexts will be constructed with direct rendering capabilities, if possible.
            If DirectRendering is false, new contexts will be constructed with indirect rendering capabilities.
            </para>
            <para>This property does not affect existing GraphicsContexts, unless they are recreated.</para>
            <para>
            This property is ignored on Operating Systems without support for indirect rendering, like Windows and OS X.
            </para>
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.ErrorChecking">
            <summary>
            Gets or sets a System.Boolean, indicating whether automatic error checking should be performed.
            Influences the debug version of OpenTK.dll, only.
            </summary>
            <remarks>Automatic error checking will clear the OpenGL error state. Set CheckErrors to false if you use
            the OpenGL error state in your code flow (e.g. for checking supported texture formats).</remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.CreateContext(System.Boolean,OpenTK.Graphics.IGraphicsContext)">
            <summary>
            Creates an OpenGL context with the specified direct/indirect rendering mode and sharing state with the
            specified IGraphicsContext.
            </summary>
            <param name="direct">Set to true for direct rendering or false otherwise.</param>
            <param name="source">The source IGraphicsContext to share state from.</param>.
            <remarks>
            <para>
            Direct rendering is the default rendering mode for OpenTK, since it can provide higher performance
            in some circumastances.
            </para>
            <para>
            The 'direct' parameter is a hint, and will ignored if the specified mode is not supported (e.g. setting
            indirect rendering on Windows platforms).
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.SwapBuffers">
            <summary>
            Swaps buffers on a context. This presents the rendered scene to the user.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.MakeCurrent(OpenTK.Platform.IWindowInfo)">
            <summary>
            Makes the GraphicsContext the current rendering target.
            </summary>
            <param name="window">A valid <see cref="T:OpenTK.Platform.IWindowInfo" /> structure.</param>
            <remarks>
            You can use this method to bind the GraphicsContext to a different window than the one it was created from.
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.IsCurrent">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this instance is current in the calling thread.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.IsDisposed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this instance has been disposed.
            It is an error to access any instance methods if this property returns true.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.VSync">
            <summary>
            [obsolete] Use SwapInterval property instead.
            Gets or sets a value indicating whether VSync is enabled. When VSync is
            enabled, <see cref="M:OpenTK.Graphics.GraphicsContext.SwapBuffers"/> calls will be synced to the refresh
            rate of the <see cref="T:OpenTK.DisplayDevice"/> that contains improving visual
            quality and reducing CPU usage. However, systems that cannot maintain
            the requested rendering rate will suffer from large jumps in performance.
            This can be counteracted by increasing the <see cref="P:OpenTK.Graphics.GraphicsContext.SwapInterval"/>
            value.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.SwapInterval">
            <summary>
            Gets or sets a positive integer in the range [1, n), indicating the number of
            <see cref="T:OpenTK.DisplayDevice"/> refreshes between consecutive
            <see cref="M:OpenTK.Graphics.GraphicsContext.SwapBuffers"/> calls. The maximum value for n is
            implementation-dependent. The default value is 1.
            This value will only affect instances where <see cref="P:OpenTK.Graphics.GraphicsContext.VSync"/> is enabled.
            Invalid values will be clamped to the valid range.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Update(OpenTK.Platform.IWindowInfo)">
            <summary>
            Updates the graphics context.  This must be called when the render target
            is resized for proper behavior on Mac OS X.
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.LoadAll">
            <summary>
            Loads all OpenGL entry points.
            </summary>
            <exception cref="T:OpenTK.Graphics.GraphicsContextException">
            Occurs when this instance is not current on the calling thread.
            </exception>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#Implementation">
            <summary>
            Gets the platform-specific implementation of this IGraphicsContext.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#Context">
            <summary>
            Gets a handle to the OpenGL rendering context.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContext.GraphicsMode">
            <summary>
            Gets the GraphicsMode of the context.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.OpenTK#Graphics#IGraphicsContextInternal#GetAddress(System.String)">
            <summary>
            Gets the address of an OpenGL extension function.
            </summary>
            <param name="function">The name of the OpenGL function (e.g. "glGetString")</param>
            <returns>
            A pointer to the specified function or IntPtr.Zero if the function isn't
            available in the current opengl context.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContext.Dispose">
            <summary>
            Disposes of the GraphicsContext.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextException">
            <summary>
            Represents errors related to a GraphicsContext.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContextException.#ctor">
            <summary>
            Constructs a new GraphicsContextException.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContextException.#ctor(System.String)">
            <summary>
            Constructs a new GraphicsContextException with the given error message.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextFlags">
            <summary>
            Enumerates various flags that affect the creation of new GraphicsContexts.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.Default">
            <summary>
            The default value of the GraphicsContextFlags enumeration.
            </summary>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.Debug">
            <summary>
            Indicates that this is a debug GraphicsContext. Debug contexts may provide
            additional debugging information at the cost of performance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.ForwardCompatible">
            <summary>
            Indicates that this is a forward compatible GraphicsContext. Forward-compatible contexts
            do not support functionality marked as deprecated in the current GraphicsContextVersion.
            </summary>
            <remarks>Forward-compatible contexts are defined only for OpenGL versions 3.0 and later.</remarks>
        </member>
        <member name="F:OpenTK.Graphics.GraphicsContextFlags.Embedded">
            <summary>
            Indicates that this GraphicsContext is targeting OpenGL|ES.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextMissingException">
            <summary>
            Thrown when an operation that required GraphicsContext is performed, when no
            GraphicsContext is current in the calling thread.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsContextMissingException.#ctor">
            <summary>
            Constructs a new GraphicsContextMissingException.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsContextVersion">
            <summary>
            Defines the version information of a GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Minor">
            <summary>
            Gets a System.Int32 indicating the minor version of a GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Major">
            <summary>
            Gets a System.Int32 indicating the major version of a GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Vendor">
            <summary>
            Gets a System.String indicating the vendor of a GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsContextVersion.Renderer">
            <summary>
            Gets a System.String indicating the renderer of a GraphicsContext instance.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsErrorException">
            <summary>
            Identifies a specific OpenGL or OpenGL|ES error. Such exceptions are only thrown
            when OpenGL or OpenGL|ES automatic error checking is enabled -
            <see cref="P:OpenTK.Graphics.GraphicsContext.ErrorChecking"/> property.
            Important: Do *not* catch this exception. Rather, fix the underlying issue that caused the error.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsErrorException.#ctor(System.String)">
            <summary>
            Constructs a new GraphicsErrorException instance with the specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsMode">
            <summary>Defines the format for graphics operations.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor">
            <summary>Constructs a new GraphicsMode with sensible default parameters.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.ColorFormat)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="accum">The ColorFormat of the accumilliary buffer.</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.ColorFormat,System.Int32)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="accum">The ColorFormat of the accumilliary buffer.</param>
            <param name="buffers">The number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering).</param>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.ColorFormat,System.Int32,System.Boolean)">
            <summary>Constructs a new GraphicsMode with the specified parameters.</summary>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="accum">The ColorFormat of the accumilliary buffer.</param>
            <param name="stereo">Set to true for a GraphicsMode with stereographic capabilities.</param>
            <param name="buffers">The number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering).</param>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Index">
            <summary>
            Gets a nullable <see cref="T:System.IntPtr"/> value, indicating the platform-specific index for this GraphicsMode.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.ColorFormat">
            <summary>
            Gets an OpenTK.Graphics.ColorFormat that describes the color format for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.AccumulatorFormat">
            <summary>
            Gets an OpenTK.Graphics.ColorFormat that describes the accumulator format for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Depth">
            <summary>
            Gets a System.Int32 that contains the bits per pixel for the depth buffer
            for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Stencil">
            <summary>
            Gets a System.Int32 that contains the bits per pixel for the stencil buffer
            of this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Samples">
            <summary>
            Gets a System.Int32 that contains the number of FSAA samples per pixel for this GraphicsFormat.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Stereo">
            <summary>
            Gets a System.Boolean indicating whether this DisplayMode is stereoscopic.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Buffers">
            <summary>
            Gets a System.Int32 containing the number of buffers associated with this
            DisplayMode.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.GraphicsMode.Default">
            <summary>Returns an OpenTK.GraphicsFormat compatible with the underlying platform.</summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.ToString">
            <summary>Returns a System.String describing the current GraphicsFormat.</summary>
            <returns>! System.String describing the current GraphicsFormat.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A <see cref="T:System.Int32"/> hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.Equals(System.Object)">
            <summary>
            Indicates whether obj is equal to this instance.
            </summary>
            <param name="obj">An object instance to compare for equality.</param>
            <returns>True, if obj equals this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsMode.Equals(OpenTK.Graphics.GraphicsMode)">
            <summary>
            Indicates whether other represents the same mode as this instance.
            </summary>
            <param name="other">The GraphicsMode to compare to.</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.Graphics.GraphicsModeException">
            <summary>
            Represents errors related to unavailable graphics parameters.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsModeException.#ctor">
            <summary>
            Constructs a new GraphicsModeException.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.GraphicsModeException.#ctor(System.String)">
            <summary>
            Constructs a new GraphicsModeException with the given error message.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.IGraphicsContext">
            <summary>
            Provides methods for creating and interacting with an OpenGL context.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.SwapBuffers">
            <summary>Swaps buffers, presenting the rendered scene to the user.</summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.MakeCurrent(OpenTK.Platform.IWindowInfo)">
            <summary>Makes the GraphicsContext current in the calling thread.</summary>
            <param name="window">An OpenTK.Platform.IWindowInfo structure that points to a valid window.</param>
            <remarks>
            <para>OpenGL commands in one thread, affect the GraphicsContext which is current in that thread.</para>
            <para>It is an error to issue an OpenGL command in a thread without a current GraphicsContext.</para>
            </remarks>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.IsCurrent">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this instance is current in the calling thread.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.IsDisposed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this instance has been disposed.
            It is an error to access any instance methods if this property returns true.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.VSync">
            <summary>
            Gets or sets a value indicating whether VSync is enabled. When VSync is
            enabled, <see cref="M:OpenTK.Graphics.IGraphicsContext.SwapBuffers"/> calls will be synced to the refresh
            rate of the <see cref="T:OpenTK.DisplayDevice"/> that contains improving visual
            quality and reducing CPU usage. However, systems that cannot maintain
            the requested rendering rate will suffer from large jumps in performance.
            This can be counteracted by increasing the <see cref="P:OpenTK.Graphics.IGraphicsContext.SwapInterval"/>
            value.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.SwapInterval">
            <summary>
            Gets or sets a positive integer in the range [1, n), indicating the number of
            <see cref="T:OpenTK.DisplayDevice"/> refreshes between consecutive
            <see cref="M:OpenTK.Graphics.IGraphicsContext.SwapBuffers"/> calls. The maximum value for n is
            implementation-dependent. The default value is 1.
            This value will only affect instances where <see cref="P:OpenTK.Graphics.IGraphicsContext.VSync"/> is enabled.
            Invalid values will be clamped to the valid range.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.Update(OpenTK.Platform.IWindowInfo)">
            <summary>
            Updates the graphics context.  This must be called when the region the graphics context
            is drawn to is resized.
            </summary>
            <param name="window"></param>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.GraphicsMode">
            <summary>Gets the GraphicsMode of this instance.</summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContext.ErrorChecking">
            <summary>
            Gets or sets a System.Boolean, indicating whether automatic error checking should be performed.
            </summary>
            <remarks>
            <para>It is an error to enable error checking inside a Begin()-End() region.</para>
            <para>This method only affects the debug version of OpenTK.dll.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContext.LoadAll">
            <summary>
            Loads all OpenGL entry points. Requires this instance to be current on the calling thread.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.IGraphicsContextInternal">
            <summary>
            Provides methods to create new GraphicsContexts. Should only be used for extending OpenTK.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContextInternal.Implementation">
            <summary>
            Gets the internal implementation of the current instance.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContextInternal.LoadAll">
            <summary>
            Loads all OpenGL entry points. Requires this instance to be current on the calling thread.
            </summary>
        </member>
        <member name="P:OpenTK.Graphics.IGraphicsContextInternal.Context">
            <summary>
            Gets a handle to the OpenGL rendering context.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.IGraphicsContextInternal.GetAddress(System.String)">
            <summary>
            Gets the address of an OpenGL extension function.
            </summary>
            <param name="function">The name of the OpenGL function (e.g. "glGetString")</param>
            <returns>
            A pointer to the specified function or IntPtr.Zero if the function isn't
            available in the current opengl context.
            </returns>
        </member>
        <member name="T:OpenTK.GraphicsException">
            <summary>Represents errors related to Graphics operations.</summary>
        </member>
        <member name="M:OpenTK.GraphicsException.#ctor">
            <summary>Constructs a new GraphicsException.</summary>
        </member>
        <member name="M:OpenTK.GraphicsException.#ctor(System.String)">
            <summary>Constructs a new GraphicsException with the specified excpetion message.</summary>
            <param name="message"></param>
        </member>
        <member name="T:OpenTK.Platform.IGameWindow">
            <summary>
            Defines the interface for a GameWindow.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.IGameWindow.Run">
            <summary>
            Enters the game loop of the GameWindow using the maximum update rate.
            </summary>
            <seealso cref="M:OpenTK.Platform.IGameWindow.Run(System.Double)"/>
        </member>
        <member name="M:OpenTK.Platform.IGameWindow.Run(System.Double)">
            <summary>
            Enters the game loop of the GameWindow using the specified update rate.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.IGameWindow.MakeCurrent">
            <summary>
            Makes the GraphicsContext current on the calling thread.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.IGameWindow.SwapBuffers">
            <summary>
            Swaps the front and back buffers of the current GraphicsContext, presenting the rendered scene to the user.
            </summary>
        </member>
        <member name="E:OpenTK.Platform.IGameWindow.Load">
            <summary>
            Occurs before the window is displayed for the first time.
            </summary>
        </member>
        <member name="E:OpenTK.Platform.IGameWindow.Unload">
            <summary>
            Occurs before the window is destroyed. 
            </summary>
        </member>
        <member name="E:OpenTK.Platform.IGameWindow.UpdateFrame">
            <summary>
            Occurs when it is time to update a frame.
            </summary>
        </member>
        <member name="E:OpenTK.Platform.IGameWindow.RenderFrame">
            <summary>
            Occurs when it is time to render a frame.
            </summary>
        </member>
        <member name="P:OpenTK.Platform.Android.AndroidGameView.Visible">
            <summary>The visibility of the window. Always returns true.</summary>
            <value></value>
            <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
        </member>
        <member name="P:OpenTK.Platform.Android.AndroidGameView.WindowInfo">
            <summary>Gets information about the containing window.</summary>
            <value>By default, returns an instance of <see cref="F:OpenTK.Platform.Android.AndroidWindow" /></value>
            <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
        </member>
        <member name="P:OpenTK.Platform.Android.AndroidGameView.WindowState">
            <summary>Always returns <see cref="F:OpenTK.WindowState.Normal" />.</summary>
            <value></value>
            <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
        </member>
        <member name="P:OpenTK.Platform.Android.AndroidGameView.WindowBorder">
            <summary>Always returns <see cref="F:OpenTK.WindowBorder.Hidden" />.</summary>
            <value></value>
            <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
        </member>
        <member name="P:OpenTK.Platform.Android.AndroidGameView.Size">
            <summary>The size of the current view.</summary>
            <value>A <see cref="T:System.Drawing.Size" /> which is the size of the current view.</value>
            <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
        </member>
        <member name="T:OpenTK.Platform.Android.AndroidGraphicsMode">
            <summary>
              This class wraps an <see cref="T:Javax.Microedition.Khronos.Egl.EGLConfig" /> that represents this
              graphics configuration in the OpenGL space. The underlying <see cref="T:Javax.Microedition.Khronos.Egl.EGLConfig" />
              will only be created if there is a valid <see cref="T:Javax.Microedition.Khronos.Egl.EGLDisplay" /> passed to
              one of the constructors. If user code does not pass a valid <see cref="T:Javax.Microedition.Khronos.Egl.EGLDisplay" />
              the <see cref="T:OpenTK.Platform.Android.AndroidGraphicsContext" /> initialization will create one when
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.CreateFrameBuffer" /> is called, or if user code calls
              <see cref="M:OpenTK.Platform.Android.AndroidGraphicsMode.Initialize(Javax.Microedition.Khronos.Egl.EGLDisplay,int)" />
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Android.AndroidGraphicsMode.#ctor(OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              Creates an AndroidGraphicsMode instance with the defined settings.
              Defaults to EGL 1.x. To use EGL 2.0, call the
              <see cref="M:OpenTK.Platform.Android.AndroidGraphicsMode(Javax.Microedition.Khronos.Egl.EGLDisplay,int,OpenTK.Graphics.GraphicsMode)" />
              or
              <see cref="M:OpenTK.Platform.Android.AndroidGraphicsMode(Javax.Microedition.Khronos.Egl.EGLDisplay,int,OpenTK.Graphics.ColorFormat,int,int,int,int,bool)" />
              constructors (pass null to the display parameter for lazy initialization)
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Android.AndroidGraphicsMode.#ctor(Javax.Microedition.Khronos.Egl.EGLDisplay,System.Int32,OpenTK.Graphics.GraphicsMode)">
            <summary>
              Creates an AndroidGraphicsMode instance, copying the values set in the mode parameter.
              Passing null to the display parameter for lazy initialization is recommended.
            </summary>
            <param name="display">
              A <see cref="T:Javax.Microedition.Khronos.Egl.EGLDisplay" /> with the display to use for creating the
              <see cref="T:Javax.Microedition.Khronos.Egl.EGLConfig" /> that represents this graphics configuration in
             the OpenGL space. Pass null for lazy initialization.
            </param>
            <param name="version">Requested OpenGL version (1 or 2)</param>
            <param name="mode">GraphicsMode to copy values from.</param>
        </member>
        <member name="M:OpenTK.Platform.Android.AndroidGraphicsMode.#ctor(Javax.Microedition.Khronos.Egl.EGLDisplay,System.Int32,OpenTK.Graphics.ColorFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              Creates an AndroidGraphicsMode instance with the required settings.
              Passing null to the display parameter for lazy initialization is recommended.
            </summary>
            <param name="display">
              A <see cref="T:Javax.Microedition.Khronos.Egl.EGLDisplay" /> with the display to use for creating the
              <see cref="T:Javax.Microedition.Khronos.Egl.EGLConfig" /> that represents this graphics configuration in
             the OpenGL space. Pass null for lazy initialization.
            </param>
            <param name="version">Requested OpenGL version (1 or 2)</param>
            <param name="color">The ColorFormat of the color buffer.</param>
            <param name="depth">The number of bits in the depth buffer.</param>
            <param name="stencil">The number of bits in the stencil buffer.</param>
            <param name="samples">The number of samples for FSAA.</param>
            <param name="stereo">Set to true for a GraphicsMode with stereographic capabilities.</param>
            <param name="buffers">The number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering).</param>
        </member>
        <member name="T:OpenTK.Platform.Dummy.DummyGLContext">
            \internal
            <summary>
            An empty IGraphicsContext implementation to be used inside the Visual Studio designer.
            This class supports OpenTK, and is not intended for use by OpenTK programs.
            </summary>
        </member>
        <member name="T:OpenTK.Platform.IWindowInfo">
            <summary>Descibes an OS window.</summary>
        </member>
        <member name="T:OpenTK.Platform.Utilities">
            <summary>
            Provides cross-platform utilities to help interact with the underlying platform.
            </summary>
        </member>
        <member name="M:OpenTK.Platform.Utilities.LoadExtensions(System.Type)">
            <internal />
            <summary>Loads all extensions for the specified class. This function is intended
            for OpenGL, Wgl, Glx, OpenAL etc.</summary>
            <param name="type">The class to load extensions for.</param>
            <remarks>
            <para>The Type must contain a nested class called "Delegates".</para>
            <para>
            The Type must also implement a static function called LoadDelegate with the
            following signature:
            <code>static Delegate LoadDelegate(string name, Type signature)</code>
            </para>
            <para>This function allocates memory.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Utilities.TryLoadExtension(System.Type,System.String)">
            <internal />
            <summary>Loads the specified extension for the specified class. This function is intended
            for OpenGL, Wgl, Glx, OpenAL etc.</summary>
            <param name="type">The class to load extensions for.</param>
            <param name="extension">The extension to load.</param>
            <remarks>
            <para>The Type must contain a nested class called "Delegates".</para>
            <para>
            The Type must also implement a static function called LoadDelegate with the
            following signature:
            <code>static Delegate LoadDelegate(string name, Type signature)</code>
            </para>
            <para>This function allocates memory.</para>
            </remarks>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateGraphicsContext(OpenTK.Graphics.GraphicsMode,OpenTK.Platform.IWindowInfo,System.Int32,System.Int32,OpenTK.Graphics.GraphicsContextFlags)">
            <summary>
            Creates an IGraphicsContext instance for the specified window.
            </summary>
            <param name="mode">The GraphicsMode for the GraphicsContext.</param>
            <param name="window">An IWindowInfo instance describing the parent window for this IGraphicsContext.</param>
            <param name="major">The major OpenGL version number for this IGraphicsContext.</param>
            <param name="minor">The minor OpenGL version number for this IGraphicsContext.</param>
            <param name="flags">A bitwise collection of GraphicsContextFlags with specific options for this IGraphicsContext.</param>
            <returns>A new IGraphicsContext instance.</returns>
        </member>
        <member name="M:OpenTK.Platform.Utilities.CreateDummyWindowInfo">
            <summary>
            Creates an IWindowInfo instance for the dummy platform.
            </summary>
            <returns>A new IWindowInfo instance.</returns>
        </member>
        <member name="T:OpenTK.INativeWindow">
            <summary>
            Defines the interface for a native window. 
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Focused">
            <summary>
            Gets a System.Boolean that indicates whether this window has input focus.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Visible">
            <summary>
            Gets or sets a System.Boolean that indicates whether the window is visible.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Exists">
            <summary>
            Gets a System.Boolean that indicates whether the window has been created and has not been destroyed.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.WindowInfo">
            <summary>
            Gets the <see cref="T:OpenTK.Platform.IWindowInfo"/> for this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.WindowState">
            <summary>
            Gets or sets the <see cref="T:OpenTK.WindowState"/> for this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.WindowBorder">
            <summary>
            Gets or sets the <see cref="T:OpenTK.WindowBorder"/> for this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Bounds">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Rectangle"/> structure the contains the external bounds of this window, in screen coordinates.
            External bounds include the title bar, borders and drawing area of the window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Location">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that contains the location of this window on the desktop.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Size">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Size"/> structure that contains the external size of this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.X">
            <summary>
            Gets or sets the horizontal location of this window on the desktop.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Y">
            <summary>
            Gets or sets the vertical location of this window on the desktop.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Width">
            <summary>
            Gets or sets the external width of this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.Height">
            <summary>
            Gets or sets the external height of this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.ClientRectangle">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Rectangle"/> structure that contains the internal bounds of this window, in client coordinates.
            The internal bounds include the drawing area of the window, but exclude the titlebar and window borders.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.ClientSize">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Size"/> structure that contains the internal size this window.
            </summary>
        </member>
        <member name="P:OpenTK.INativeWindow.InputDriver">
            <summary>
            This property is deprecated and should not be used.
            </summary>
        </member>
        <member name="M:OpenTK.INativeWindow.Close">
            <summary>
            Closes this window.
            </summary>
        </member>
        <member name="M:OpenTK.INativeWindow.ProcessEvents">
            <summary>
            Processes pending window events.
            </summary>
        </member>
        <member name="M:OpenTK.INativeWindow.PointToClient(System.Drawing.Point)">
            <summary>
            Transforms the specified point from screen to client coordinates. 
            </summary>
            <param name="point">
            A <see cref="T:System.Drawing.Point"/> to transform.
            </param>
            <returns>
            The point transformed to client coordinates.
            </returns>
        </member>
        <member name="M:OpenTK.INativeWindow.PointToScreen(System.Drawing.Point)">
            <summary>
            Transforms the specified point from client to screen coordinates. 
            </summary>
            <param name="point">
            A <see cref="T:System.Drawing.Point"/> to transform.
            </param>
            <returns>
            The point transformed to screen coordinates.
            </returns>
        </member>
        <member name="E:OpenTK.INativeWindow.Move">
            <summary>
            Occurs whenever the window is moved. 
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.Resize">
            <summary>
            Occurs whenever the window is resized. 
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.Closing">
            <summary>
            Occurs when the window is about to close. 
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.Closed">
            <summary>
            Occurs after the window has closed. 
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.Disposed">
            <summary>
            Occurs when the window is disposed. 
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.TitleChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.INativeWindow.Title"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.INativeWindow.Visible"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.FocusedChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.INativeWindow.Focused"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.WindowBorderChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.INativeWindow.WindowBorder"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.WindowStateChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.INativeWindow.WindowState"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.KeyPress">
            <summary>
            Occurs whenever a character is typed.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.MouseLeave">
            <summary>
            Occurs whenever the mouse cursor leaves the window <see cref="P:OpenTK.INativeWindow.Bounds"/>.
            </summary>
        </member>
        <member name="E:OpenTK.INativeWindow.MouseEnter">
            <summary>
            Occurs whenever the mouse cursor enters the window <see cref="P:OpenTK.INativeWindow.Bounds"/>.
            </summary>
        </member>
        <member name="T:OpenTK.Input.ButtonState">
            <summary>
            Enumerates possible mouse button states.
            </summary>
        </member>
        <member name="F:OpenTK.Input.ButtonState.Released">
            <summary>
            Indicates that a mouse button is released.
            </summary>
        </member>
        <member name="F:OpenTK.Input.ButtonState.Pressed">
            <summary>
            Indicates that a mouse button is pressed.
            </summary>
        </member>
        <member name="T:OpenTK.Input.GamePad">
            <summary>
            Provides access to GamePad devices. Note: this API is not implemented yet.
            </summary>
        </member>
        <member name="T:OpenTK.Input.GamePadState">
            <summary>
            Encapsulates the state of a GamePad device.
            </summary>
        </member>
        <member name="T:OpenTK.Input.IInputDevice">
            <summary>
            Defines a common interface for all input devices.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IInputDevice.Description">
            <summary>
            Gets a System.String with a unique description of this IInputDevice instance.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IInputDevice.DeviceType">
            <summary>
            Gets an OpenTK.Input.InputDeviceType value, representing the device type of this IInputDevice instance.
            </summary>
        </member>
        <member name="T:OpenTK.Input.InputDeviceType">
            <summary>
            The type of the input device.
            </summary>
        </member>
        <member name="F:OpenTK.Input.InputDeviceType.Keyboard">
            <summary>
            Device is a keyboard.
            </summary>
        </member>
        <member name="F:OpenTK.Input.InputDeviceType.Mouse">
            <summary>
            Device is a mouse.
            </summary>
        </member>
        <member name="F:OpenTK.Input.InputDeviceType.Hid">
            <summary>
            Device is a Human Interface Device. Joysticks, joypads, pens
            and some specific usb keyboards/mice fall into this category.
            </summary>
        </member>
        <member name="T:OpenTK.Input.IInputDriver">
            <summary>
            Defines the interface for an input driver.
            </summary>
        </member>
        <member name="M:OpenTK.Input.IInputDriver.Poll">
            <summary>
            Updates the state of the driver.
            </summary>
        </member>
        <member name="T:OpenTK.Input.IJoystickDriver">
            <summary>
            Defines the interface for JoystickDevice drivers.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IJoystickDriver.Joysticks">
            <summary>
            Gets the list of available JoystickDevices.
            </summary>
        </member>
        <member name="M:OpenTK.Input.IKeyboardDriver2.GetState">
            <summary>
            Retrieves the combined <see cref="T:OpenTK.Input.KeyboardState"/> for all keyboard devices.
            </summary>
            <returns>An <see cref="T:OpenTK.Input.KeyboardState"/> structure containing the combined state for all keyboard devices.</returns>
        </member>
        <member name="M:OpenTK.Input.IKeyboardDriver2.GetState(System.Int32)">
            <summary>
            Retrieves the <see cref="T:OpenTK.Input.KeyboardState"/> for the specified keyboard device.
            </summary>
            <param name="index">The index of the keyboard device.</param>
            <returns>An <see cref="T:OpenTK.Input.KeyboardState"/> structure containing the state of the keyboard device.</returns>
        </member>
        <member name="M:OpenTK.Input.IKeyboardDriver2.GetDeviceName(System.Int32)">
            <summary>
            Retrieves the device name for the keyboard device.
            </summary>
            <param name="index">The index of the keyboard device.</param>
            <returns>A <see cref="T:System.String"/> with the name of the specified device or <see cref="F:System.String.Empty"/>.</returns>
            <remarks>
            <para>If no device exists at the specified index, the return value is <see cref="F:System.String.Empty"/>.</para></remarks>
        </member>
        <member name="T:OpenTK.Input.IKeyboardDriver">
            <summary>
            Defines the interface for KeyboardDevice drivers.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IKeyboardDriver.Keyboard">
            <summary>
            Gets the list of available KeyboardDevices.
            </summary>
        </member>
        <member name="T:OpenTK.Input.IMouseDriver">
            <summary>
            Defines the interface for MouseDevice drivers.
            </summary>
        </member>
        <member name="P:OpenTK.Input.IMouseDriver.Mouse">
            <summary>
            Gets the list of available MouseDevices.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickDevice">
            <summary>
            Represents a joystick device and provides methods to query its status.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.Axis">
            <summary>
            Gets a JoystickAxisCollection containing the state of each axis on this instance. Values are normalized in the [-1, 1] range.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.Button">
            <summary>
            Gets JoystickButtonCollection containing the state of each button on this instance. True indicates that the button is pressed.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.Description">
            <summary>
            Gets a System.String containing a unique description for this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickDevice.DeviceType">
            <summary>
            Gets a value indicating the InputDeviceType of this InputDevice. 
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickDevice.Move">
            <summary>
            Occurs when an axis of this JoystickDevice instance is moved.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickDevice.ButtonDown">
            <summary>
            Occurs when a button of this JoystickDevice instance is pressed.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickDevice.ButtonUp">
            <summary>
            Occurs when a button of this JoystickDevice is released.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickEventArgs">
            <summary>
            The base class for JoystickDevice event arguments.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickButtonEventArgs">
            <summary>
            Provides data for the <see cref="F:OpenTK.Input.JoystickDevice.ButtonDown"/> and <see cref="F:OpenTK.Input.JoystickDevice.ButtonUp"/> events.
            This class is cached for performance reasons - avoid storing references outside the scope of the event.
            </summary>
        </member>
        <member name="M:OpenTK.Input.JoystickButtonEventArgs.#ctor(OpenTK.Input.JoystickButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.JoystickButtonEventArgs"/> class.
            </summary>
            <param name="button">The index of the joystick button for the event.</param>
            <param name="pressed">The current state of the button.</param>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonEventArgs.Button">
            <summary>
            The index of the joystick button for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonEventArgs.Pressed">
            <summary>
            Gets a System.Boolean representing the state of the button for the event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickMoveEventArgs">
            <summary>
            Provides data for the <see cref="F:OpenTK.Input.JoystickDevice.Move"/> event.
            This class is cached for performance reasons - avoid storing references outside the scope of the event.
            </summary>
        </member>
        <member name="M:OpenTK.Input.JoystickMoveEventArgs.#ctor(OpenTK.Input.JoystickAxis,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Input.JoystickMoveEventArgs"/> class.
            </summary>
            <param name="axis">The index of the joystick axis that was moved.</param>
            <param name="value">The absolute value of the joystick axis.</param>
            <param name="delta">The relative change in value of the joystick axis.</param>
        </member>
        <member name="P:OpenTK.Input.JoystickMoveEventArgs.Axis">
            <summary>
            Gets a System.Int32 representing the index of the axis that was moved.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickMoveEventArgs.Value">
            <summary>
            Gets a System.Single representing the absolute position of the axis.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickMoveEventArgs.Delta">
            <summary>
            Gets a System.Single representing the relative change in the position of the axis.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickButton">
            <summary>
            Defines available JoystickDevice buttons.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button0">
            <summary>The first button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button1">
            <summary>The second button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button2">
            <summary>The third button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button3">
            <summary>The fourth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button4">
            <summary>The fifth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button5">
            <summary>The sixth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button6">
            <summary>The seventh button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button7">
            <summary>The eighth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button8">
            <summary>The ninth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button9">
            <summary>The tenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button10">
            <summary>The eleventh button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button11">
            <summary>The twelfth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button12">
            <summary>The thirteenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button13">
            <summary>The fourteenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button14">
            <summary>The fifteenth button of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickButton.Button15">
            <summary>The sixteenth button of the JoystickDevice.</summary>
        </member>
        <member name="T:OpenTK.Input.JoystickButtonCollection">
            <summary>
            Defines a collection of JoystickButtons.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonCollection.Item(System.Int32)">
            <summary>
            Gets a System.Boolean indicating whether the JoystickButton with the specified index is pressed.
            </summary>
            <param name="index">The index of the JoystickButton to check.</param>
            <returns>True if the JoystickButton is pressed; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonCollection.Item(OpenTK.Input.JoystickButton)">
            <summary>
            Gets a System.Boolean indicating whether the specified JoystickButton is pressed.
            </summary>
            <param name="button">The JoystickButton to check.</param>
            <returns>True if the JoystickButton is pressed; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickButtonCollection.Count">
            <summary>
            Gets a System.Int32 indicating the available amount of JoystickButtons.
            </summary>
        </member>
        <member name="T:OpenTK.Input.JoystickAxis">
            <summary>
            Defines available JoystickDevice axes.
            </summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis0">
            <summary>The first axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis1">
            <summary>The second axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis2">
            <summary>The third axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis3">
            <summary>The fourth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis4">
            <summary>The fifth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis5">
            <summary>The sixth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis6">
            <summary>The seventh axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis7">
            <summary>The eighth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis8">
            <summary>The ninth axis of the JoystickDevice.</summary>
        </member>
        <member name="F:OpenTK.Input.JoystickAxis.Axis9">
            <summary>The tenth axis of the JoystickDevice.</summary>
        </member>
        <member name="T:OpenTK.Input.JoystickAxisCollection">
            <summary>
            Defines a collection of JoystickAxes.
            </summary>
        </member>
        <member name="P:OpenTK.Input.JoystickAxisCollection.Item(System.Int32)">
            <summary>
            Gets a System.Single indicating the absolute position of the JoystickAxis with the specified index.
            </summary>
            <param name="index">The index of the JoystickAxis to check.</param>
            <returns>A System.Single in the range [-1, 1].</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickAxisCollection.Item(OpenTK.Input.JoystickAxis)">
            <summary>
            Gets a System.Single indicating the absolute position of the JoystickAxis.
            </summary>
            <param name="axis">The JoystickAxis to check.</param>
            <returns>A System.Single in the range [-1, 1].</returns>
        </member>
        <member name="P:OpenTK.Input.JoystickAxisCollection.Count">
            <summary>
            Gets a System.Int32 indicating the available amount of JoystickAxes.
            </summary>
        </member>
        <member name="T:OpenTK.Input.Keyboard">
            <summary>
            Provides access to keyboard devices. Note: this API is not implemented yet.
            </summary>
        </member>
        <member name="M:OpenTK.Input.Keyboard.GetState">
            <summary>
            Retrieves the combined <see cref="T:OpenTK.Input.KeyboardState"/> for all keyboard devices.
            </summary>
            <returns>An <see cref="T:OpenTK.Input.KeyboardState"/> structure containing the combined state for all keyboard devices.</returns>
        </member>
        <member name="M:OpenTK.Input.Keyboard.GetState(System.Int32)">
            <summary>
            Retrieves the <see cref="T:OpenTK.Input.KeyboardState"/> for the specified keyboard device.
            </summary>
            <param name="index">The index of the keyboard device.</param>
            <returns>An <see cref="T:OpenTK.Input.KeyboardState"/> structure containing the state of the keyboard device.</returns>
        </member>
        <member name="T:OpenTK.Input.KeyboardDevice">
            <summary>
            Represents a keyboard device and provides methods to query its status. 
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.Item(OpenTK.Input.Key)">
            <summary>
            Gets a value indicating the status of the specified Key.
            </summary>
            <param name="key">The Key to check.</param>
            <returns>True if the Key is pressed, false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.NumberOfKeys">
            <summary>
            Gets an integer representing the number of keys on this KeyboardDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.NumberOfFunctionKeys">
            <summary>
            Gets an integer representing the number of function keys (F-keys) on this KeyboardDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.NumberOfLeds">
            <summary>
            Gets a value indicating the number of led indicators on this KeyboardDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.DeviceID">
            <summary>
            Gets an IntPtr representing a device dependent ID.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.KeyRepeat">
            <summary>
            Gets or sets a System.Boolean indicating key repeat status.
            </summary>
            <remarks>
            If KeyRepeat is true, multiple KeyDown events will be generated while a key is being held.
            Otherwise only one KeyDown event will be reported.
            <para>
            The rate of the generated KeyDown events is controlled by the Operating System. Usually,
            one KeyDown event will be reported, followed by a small (250-1000ms) pause and several
            more KeyDown events (6-30 events per second).
            </para>
            <para>
            Set to true to handle text input (where keyboard repeat is desirable), but set to false
            for game input.
            </para>
            </remarks>
        </member>
        <member name="E:OpenTK.Input.KeyboardDevice.KeyDown">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:OpenTK.Input.KeyboardDevice.KeyUp">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.Description">
            <summary>
            Gets a <see cref="T:System.String"/> which describes this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardDevice.DeviceType">
            <summary>
            Gets the <see cref="T:OpenTK.Input.InputDeviceType"/> for this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Input.KeyboardDevice.GetHashCode">
            <summary>Returns the hash code for this KeyboardDevice.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardDevice.ToString">
            <summary>
            Returns a System.String representing this KeyboardDevice.
            </summary>
            <returns>A System.String representing this KeyboardDevice.</returns>
        </member>
        <member name="T:OpenTK.Input.KeyboardKeyEventArgs">
            <summary>
            Defines the event data for <see cref="T:OpenTK.Input.KeyboardDevice"/> events.
            </summary>
            <remarks>
            <para>
            Do not cache instances of this type outside their event handler.
            If necessary, you can clone a KeyboardEventArgs instance using the 
            <see cref="M:OpenTK.Input.KeyboardKeyEventArgs.#ctor(OpenTK.Input.KeyboardKeyEventArgs)"/> constructor.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Input.KeyboardKeyEventArgs.#ctor">
            <summary>
            Constructs a new KeyboardEventArgs instance.
            </summary>
        </member>
        <member name="M:OpenTK.Input.KeyboardKeyEventArgs.#ctor(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            Constructs a new KeyboardEventArgs instance.
            </summary>
            <param name="args">An existing KeyboardEventArgs instance to clone.</param>
        </member>
        <member name="P:OpenTK.Input.KeyboardKeyEventArgs.Key">
            <summary>
            Gets the <see cref="P:OpenTK.Input.KeyboardKeyEventArgs.Key"/> that generated this event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.KeyboardState">
            <summary>
            Encapsulates the state of a Keyboard device.
            </summary>
        </member>
        <member name="P:OpenTK.Input.KeyboardState.Item(OpenTK.Input.Key)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the specified
            <see cref="T:OpenTK.Input.Key"/> is pressed.
            </summary>
            <param name="key">The <see cref="T:OpenTK.Input.Key"/> to check.</param>
            <returns>True if key is pressed; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.IsKeyDown(OpenTK.Input.Key)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this key is down.
            </summary>
            <param name="key">The <see cref="T:OpenTK.Input.Key"/> to check.</param>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.IsKeyUp(OpenTK.Input.Key)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this key is up.
            </summary>
            <param name="key">The <see cref="T:OpenTK.Input.Key"/> to check.</param>
        </member>
        <member name="P:OpenTK.Input.KeyboardState.IsConnected">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this keyboard
            is connected.
            </summary>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.op_Equality(OpenTK.Input.KeyboardState,OpenTK.Input.KeyboardState)">
            <summary>
            Checks whether two <see cref="T:OpenTK.Input.KeyboardState" /> instances are equal.
            </summary>
            <param name="left">
            A <see cref="T:OpenTK.Input.KeyboardState"/> instance.
            </param>
            <param name="right">
            A <see cref="T:OpenTK.Input.KeyboardState"/> instance.
            </param>
            <returns>
            True if both left is equal to right; false otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.op_Inequality(OpenTK.Input.KeyboardState,OpenTK.Input.KeyboardState)">
            <summary>
            Checks whether two <see cref="T:OpenTK.Input.KeyboardState" /> instances are not equal.
            </summary>
            <param name="left">
            A <see cref="T:OpenTK.Input.KeyboardState"/> instance.
            </param>
            <param name="right">
            A <see cref="T:OpenTK.Input.KeyboardState"/> instance.
            </param>
            <returns>
            True if both left is not equal to right; false otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.Equals(System.Object)">
            <summary>
            Compares to an object instance for equality.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare to.
            </param>
            <returns>
            True if this instance is equal to obj; false otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.GetHashCode">
            <summary>
            Generates a hashcode for the current instance.
            </summary>
            <returns>
            A <see cref="T:System.Int32"/> represting the hashcode for this instance.
            </returns>
        </member>
        <member name="M:OpenTK.Input.KeyboardState.Equals(OpenTK.Input.KeyboardState)">
            <summary>
            Compares two KeyboardState instances.
            </summary>
            <param name="other">The instance to compare two.</param>
            <returns>True, if both instances are equal; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.Input.Key">
            <summary>
            The available keyboard keys.
            </summary>
        </member>
        <member name="F:OpenTK.Input.Key.Unknown">
            <summary>A key outside the known keys.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.ShiftLeft">
            <summary>The left shift key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.LShift">
            <summary>The left shift key (equivalent to ShiftLeft).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.ShiftRight">
            <summary>The right shift key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.RShift">
            <summary>The right shift key (equivalent to ShiftRight).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.ControlLeft">
            <summary>The left control key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.LControl">
            <summary>The left control key (equivalent to ControlLeft).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.ControlRight">
            <summary>The right control key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.RControl">
            <summary>The right control key (equivalent to ControlRight).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.AltLeft">
            <summary>The left alt key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.LAlt">
            <summary>The left alt key (equivalent to AltLeft.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.AltRight">
            <summary>The right alt key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.RAlt">
            <summary>The right alt key (equivalent to AltRight).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.WinLeft">
            <summary>The left win key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.LWin">
            <summary>The left win key (equivalent to WinLeft).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.WinRight">
            <summary>The right win key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.RWin">
            <summary>The right win key (equivalent to WinRight).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Menu">
            <summary>The menu key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F1">
            <summary>The F1 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F2">
            <summary>The F2 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F3">
            <summary>The F3 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F4">
            <summary>The F4 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F5">
            <summary>The F5 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F6">
            <summary>The F6 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F7">
            <summary>The F7 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F8">
            <summary>The F8 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F9">
            <summary>The F9 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F10">
            <summary>The F10 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F11">
            <summary>The F11 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F12">
            <summary>The F12 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F13">
            <summary>The F13 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F14">
            <summary>The F14 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F15">
            <summary>The F15 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F16">
            <summary>The F16 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F17">
            <summary>The F17 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F18">
            <summary>The F18 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F19">
            <summary>The F19 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F20">
            <summary>The F20 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F21">
            <summary>The F21 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F22">
            <summary>The F22 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F23">
            <summary>The F23 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F24">
            <summary>The F24 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F25">
            <summary>The F25 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F26">
            <summary>The F26 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F27">
            <summary>The F27 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F28">
            <summary>The F28 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F29">
            <summary>The F29 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F30">
            <summary>The F30 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F31">
            <summary>The F31 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F32">
            <summary>The F32 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F33">
            <summary>The F33 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F34">
            <summary>The F34 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F35">
            <summary>The F35 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Up">
            <summary>The up arrow key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Down">
            <summary>The down arrow key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Left">
            <summary>The left arrow key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Right">
            <summary>The right arrow key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Enter">
            <summary>The enter key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Escape">
            <summary>The escape key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Space">
            <summary>The space key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Tab">
            <summary>The tab key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.BackSpace">
            <summary>The backspace key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Back">
            <summary>The backspace key (equivalent to BackSpace).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Insert">
            <summary>The insert key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Delete">
            <summary>The delete key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.PageUp">
            <summary>The page up key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.PageDown">
            <summary>The page down key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Home">
            <summary>The home key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.End">
            <summary>The end key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.CapsLock">
            <summary>The caps lock key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.ScrollLock">
            <summary>The scroll lock key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.PrintScreen">
            <summary>The print screen key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Pause">
            <summary>The pause key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.NumLock">
            <summary>The num lock key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Clear">
            <summary>The clear key (Keypad5 with NumLock disabled, on typical keyboards).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Sleep">
            <summary>The sleep key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad0">
            <summary>The keypad 0 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad1">
            <summary>The keypad 1 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad2">
            <summary>The keypad 2 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad3">
            <summary>The keypad 3 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad4">
            <summary>The keypad 4 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad5">
            <summary>The keypad 5 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad6">
            <summary>The keypad 6 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad7">
            <summary>The keypad 7 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad8">
            <summary>The keypad 8 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Keypad9">
            <summary>The keypad 9 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadDivide">
            <summary>The keypad divide key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadMultiply">
            <summary>The keypad multiply key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadSubtract">
            <summary>The keypad subtract key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadMinus">
            <summary>The keypad minus key (equivalent to KeypadSubtract).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadAdd">
            <summary>The keypad add key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadPlus">
            <summary>The keypad plus key (equivalent to KeypadAdd).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadDecimal">
            <summary>The keypad decimal key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.KeypadEnter">
            <summary>The keypad enter key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.A">
            <summary>The A key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.B">
            <summary>The B key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.C">
            <summary>The C key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.D">
            <summary>The D key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.E">
            <summary>The E key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.F">
            <summary>The F key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.G">
            <summary>The G key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.H">
            <summary>The H key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.I">
            <summary>The I key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.J">
            <summary>The J key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.K">
            <summary>The K key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.L">
            <summary>The L key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.M">
            <summary>The M key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.N">
            <summary>The N key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.O">
            <summary>The O key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.P">
            <summary>The P key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Q">
            <summary>The Q key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.R">
            <summary>The R key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.S">
            <summary>The S key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.T">
            <summary>The T key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.U">
            <summary>The U key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.V">
            <summary>The V key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.W">
            <summary>The W key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.X">
            <summary>The X key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Y">
            <summary>The Y key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Z">
            <summary>The Z key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number0">
            <summary>The number 0 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number1">
            <summary>The number 1 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number2">
            <summary>The number 2 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number3">
            <summary>The number 3 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number4">
            <summary>The number 4 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number5">
            <summary>The number 5 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number6">
            <summary>The number 6 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number7">
            <summary>The number 7 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number8">
            <summary>The number 8 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Number9">
            <summary>The number 9 key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Tilde">
            <summary>The tilde key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Minus">
            <summary>The minus key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Plus">
            <summary>The plus key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.BracketLeft">
            <summary>The left bracket key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.LBracket">
            <summary>The left bracket key (equivalent to BracketLeft).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.BracketRight">
            <summary>The right bracket key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.RBracket">
            <summary>The right bracket key (equivalent to BracketRight).</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Semicolon">
            <summary>The semicolon key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Quote">
            <summary>The quote key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Comma">
            <summary>The comma key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Period">
            <summary>The period key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.Slash">
            <summary>The slash key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.BackSlash">
            <summary>The backslash key.</summary>
        </member>
        <member name="F:OpenTK.Input.Key.LastKey">
            <summary>Indicates the last available keyboard key.</summary>
        </member>
        <member name="T:OpenTK.Input.MouseButton">
            <summary>
            Enumerates all possible mouse buttons.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button1">
            <summary>
            The first extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button2">
            <summary>
            The second extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button3">
            <summary>
            The third extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button4">
            <summary>
            The fourth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button5">
            <summary>
            The fifth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button6">
            <summary>
            The sixth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button7">
            <summary>
            The seventh extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button8">
            <summary>
            The eigth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.Button9">
            <summary>
            The ninth extra mouse button.
            </summary>
        </member>
        <member name="F:OpenTK.Input.MouseButton.LastButton">
            <summary>
            Indicates the last available mouse button.
            </summary>
        </member>
        <member name="T:OpenTK.Input.Mouse">
            <summary>
            Provides access to mouse devices. Note: this API is not implemented yet.
            </summary>
        </member>
        <member name="M:OpenTK.Input.Mouse.GetState">
            <summary>
            Retrieves the combined <see cref="T:OpenTK.Input.MouseState"/> for all specified mouse devices.
            </summary>
            <returns>A <see cref="T:OpenTK.Input.MouseState"/> structure containing the combined state of all mouse devices.</returns>
        </member>
        <member name="M:OpenTK.Input.Mouse.GetState(System.Int32)">
            <summary>
            Retrieves the <see cref="T:OpenTK.Input.MouseState"/> for the specified mouse device.
            </summary>
            <param name="index">The index of the mouse device.</param>
            <returns>A <see cref="T:OpenTK.Input.MouseState"/> structure containing the state for the specified mouse device.</returns>
        </member>
        <member name="M:OpenTK.Input.Mouse.SetPosition(System.Double,System.Double)">
             <summary>
            Moves the mouse cursor to the specified screen position.
             </summary>
             <param name="x">
             A <see cref="T:System.Double"/> that represents the absolute x position of the cursor in screen coordinates.
             </param>
             <param name="y">
             A <see cref="T:System.Double"/> that represents the absolute y position of the cursor in screen coordinates.
             </param>
        </member>
        <member name="T:OpenTK.Input.MouseDevice">
            <summary>
            Represents a mouse device and provides methods to query its status.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Description">
            <summary>
            Gets a string describing this MouseDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.DeviceType">
            <summary>
            Gets a value indicating the InputDeviceType of this InputDevice. 
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.NumberOfButtons">
            <summary>
            Gets an integer representing the number of buttons on this MouseDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.NumberOfWheels">
            <summary>
            Gets an integer representing the number of wheels on this MouseDevice.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.DeviceID">
            <summary>
            Gets an IntPtr representing a device dependent ID.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Wheel">
            <summary>
            Gets the absolute wheel position in integer units.
            To support high-precision mice, it is recommended to use <see cref="P:OpenTK.Input.MouseDevice.WheelPrecise"/> instead.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.WheelPrecise">
            <summary>
            Gets the absolute wheel position in floating-point units.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.X">
            <summary>
            Gets an integer representing the absolute x position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Y">
            <summary>
            Gets an integer representing the absolute y position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Item(OpenTK.Input.MouseButton)">
            <summary>
            Gets a System.Boolean indicating the state of the specified MouseButton.
            </summary>
            <param name="button">The MouseButton to check.</param>
            <returns>True if the MouseButton is pressed, false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.Position">
            <summary>
            Sets a System.Drawing.Point representing the absolute position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.Move">
            <summary>
            Occurs when the mouse's position is moved.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.ButtonDown">
            <summary>
            Occurs when a button is pressed.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.ButtonUp">
            <summary>
            Occurs when a button is released.
            </summary>
        </member>
        <member name="E:OpenTK.Input.MouseDevice.WheelChanged">
            <summary>
            Occurs when one of the mouse wheels is moved.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseDevice.GetHashCode">
            <summary>
            Calculates the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Input.MouseDevice.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that describes this instance.</returns>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.WheelDelta">
            <summary>
            Gets an integer representing the relative wheel movement.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.XDelta">
            <summary>
            Gets an integer representing the relative x movement of the pointer, in pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseDevice.YDelta">
            <summary>
            Gets an integer representing the relative y movement of the pointer, in pixel coordinates.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseEventArgs">
            <summary>
            Defines the event data for <see cref="T:OpenTK.Input.MouseDevice"/> events.
            </summary>
            <remarks>
            <para>
            Do not cache instances of this type outside their event handler.
            If necessary, you can clone an instance using the 
            <see cref="M:OpenTK.Input.MouseEventArgs.#ctor(OpenTK.Input.MouseEventArgs)"/> constructor.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Input.MouseEventArgs.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
        </member>
        <member name="M:OpenTK.Input.MouseEventArgs.#ctor(OpenTK.Input.MouseEventArgs)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="args">The <see cref="T:OpenTK.Input.MouseEventArgs"/> instance to clone.</param>
        </member>
        <member name="P:OpenTK.Input.MouseEventArgs.X">
            <summary>
            Gets the X position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseEventArgs.Y">
            <summary>
            Gets the Y position of the mouse for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseEventArgs.Position">
            <summary>
            Gets a System.Drawing.Points representing the location of the mouse for the event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseMoveEventArgs">
            <summary>
            Defines the event data for <see cref="E:OpenTK.Input.MouseDevice.Move"/> events.
            </summary>
            <remarks>
            <para>
            Do not cache instances of this type outside their event handler.
            If necessary, you can clone an instance using the 
            <see cref="M:OpenTK.Input.MouseMoveEventArgs.#ctor(OpenTK.Input.MouseMoveEventArgs)"/> constructor.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Input.MouseMoveEventArgs.#ctor">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseMoveEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> instance.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="xDelta">The change in X position produced by this event.</param>
            <param name="yDelta">The change in Y position produced by this event.</param>
        </member>
        <member name="M:OpenTK.Input.MouseMoveEventArgs.#ctor(OpenTK.Input.MouseMoveEventArgs)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> instance.
            </summary>
            <param name="args">The <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> instance to clone.</param>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.XDelta">
            <summary>
            Gets the change in X position produced by this event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseMoveEventArgs.YDelta">
            <summary>
            Gets the change in Y position produced by this event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseButtonEventArgs">
            <summary>
            Defines the event data for <see cref="E:OpenTK.Input.MouseDevice.ButtonDown"/> and <see cref="E:OpenTK.Input.MouseDevice.ButtonUp"/> events.
            </summary>
            <remarks>
            <para>
            Do not cache instances of this type outside their event handler.
            If necessary, you can clone an instance using the 
            <see cref="M:OpenTK.Input.MouseButtonEventArgs.#ctor(OpenTK.Input.MouseButtonEventArgs)"/> constructor.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Input.MouseButtonEventArgs.#ctor">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseButtonEventArgs.#ctor(System.Int32,System.Int32,OpenTK.Input.MouseButton,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> instance.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="button">The mouse button for the event.</param>
            <param name="pressed">The current state of the button.</param>
        </member>
        <member name="M:OpenTK.Input.MouseButtonEventArgs.#ctor(OpenTK.Input.MouseButtonEventArgs)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> instance.
            </summary>
            <param name="args">The <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> instance to clone.</param>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.Button">
            <summary>
            The mouse button for the event.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseButtonEventArgs.IsPressed">
            <summary>
            Gets a System.Boolean representing the state of the mouse button for the event.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseWheelEventArgs">
            <summary>
            Defines the event data for <see cref="E:OpenTK.Input.MouseDevice.WheelChanged"/> events.
            </summary>
            <remarks>
            <para>
            Do not cache instances of this type outside their event handler.
            If necessary, you can clone an instance using the 
            <see cref="M:OpenTK.Input.MouseWheelEventArgs.#ctor(OpenTK.Input.MouseWheelEventArgs)"/> constructor.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Input.MouseWheelEventArgs.#ctor">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseWheelEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseWheelEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseWheelEventArgs"/> instance.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="value">The value of the wheel.</param>
            <param name="delta">The change in value of the wheel for this event.</param>
        </member>
        <member name="M:OpenTK.Input.MouseWheelEventArgs.#ctor(OpenTK.Input.MouseWheelEventArgs)">
            <summary>
            Constructs a new <see cref="T:OpenTK.Input.MouseWheelEventArgs"/> instance.
            </summary>
            <param name="args">The <see cref="T:OpenTK.Input.MouseWheelEventArgs"/> instance to clone.</param>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.Value">
            <summary>
            Gets the value of the wheel in integer units.
            To support high-precision mice, it is recommended to use <see cref="P:OpenTK.Input.MouseWheelEventArgs.ValuePrecise"/> instead.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.Delta">
            <summary>
            Gets the change in value of the wheel for this event in integer units.
            To support high-precision mice, it is recommended to use <see cref="P:OpenTK.Input.MouseWheelEventArgs.DeltaPrecise"/> instead.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.ValuePrecise">
            <summary>
            Gets the precise value of the wheel in floating-point units.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseWheelEventArgs.DeltaPrecise">
            <summary>
            Gets the precise change in value of the wheel for this event in floating-point units.
            </summary>
        </member>
        <member name="T:OpenTK.Input.MouseState">
            <summary>
            Encapsulates the state of a mouse device.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.Item(OpenTK.Input.MouseButton)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the specified
            <see cref="T:OpenTK.Input.MouseButton"/> is pressed.
            </summary>
            <param name="button">The <see cref="T:OpenTK.Input.MouseButton"/> to check.</param>
            <returns>True if key is pressed; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Input.MouseState.IsButtonDown(OpenTK.Input.MouseButton)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this button is down.
            </summary>
            <param name="button">The <see cref="T:OpenTK.Input.MouseButton"/> to check.</param>
        </member>
        <member name="M:OpenTK.Input.MouseState.IsButtonUp(OpenTK.Input.MouseButton)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this button is up.
            </summary>
            <param name="button">The <see cref="T:OpenTK.Input.MouseButton"/> to check.</param>
        </member>
        <member name="P:OpenTK.Input.MouseState.Wheel">
            <summary>
            Gets the absolute wheel position in integer units.
            To support high-precision mice, it is recommended to use <see cref="P:OpenTK.Input.MouseState.WheelPrecise"/> instead.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.WheelPrecise">
            <summary>
            Gets the absolute wheel position in floating-point units.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.X">
            <summary>
            Gets an integer representing the absolute x position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.Y">
            <summary>
            Gets an integer representing the absolute y position of the pointer, in window pixel coordinates.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.LeftButton">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the left mouse button is pressed.
            This property is intended for XNA compatibility.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.MiddleButton">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the middle mouse button is pressed.
            This property is intended for XNA compatibility.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.RightButton">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the right mouse button is pressed.
            This property is intended for XNA compatibility.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.XButton1">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the first extra mouse button is pressed.
            This property is intended for XNA compatibility.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.XButton2">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the second extra mouse button is pressed.
            This property is intended for XNA compatibility.
            </summary>
        </member>
        <member name="P:OpenTK.Input.MouseState.ScrollWheelValue">
            <summary>
            Gets the absolute wheel position in integer units. This property is intended for XNA compatibility.
            To support high-precision mice, it is recommended to use <see cref="P:OpenTK.Input.MouseState.WheelPrecise"/> instead.
            </summary>
        </member>
        <member name="M:OpenTK.Input.MouseState.op_Equality(OpenTK.Input.MouseState,OpenTK.Input.MouseState)">
            <summary>
            Checks whether two <see cref="T:OpenTK.Input.MouseState" /> instances are equal.
            </summary>
            <param name="left">
            A <see cref="T:OpenTK.Input.MouseState"/> instance.
            </param>
            <param name="right">
            A <see cref="T:OpenTK.Input.MouseState"/> instance.
            </param>
            <returns>
            True if both left is equal to right; false otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Input.MouseState.op_Inequality(OpenTK.Input.MouseState,OpenTK.Input.MouseState)">
            <summary>
            Checks whether two <see cref="T:OpenTK.Input.MouseState" /> instances are not equal.
            </summary>
            <param name="left">
            A <see cref="T:OpenTK.Input.MouseState"/> instance.
            </param>
            <param name="right">
            A <see cref="T:OpenTK.Input.MouseState"/> instance.
            </param>
            <returns>
            True if both left is not equal to right; false otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Input.MouseState.Equals(System.Object)">
            <summary>
            Compares to an object instance for equality.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare to.
            </param>
            <returns>
            True if this instance is equal to obj; false otherwise.
            </returns>
        </member>
        <member name="M:OpenTK.Input.MouseState.GetHashCode">
            <summary>
            Generates a hashcode for the current instance.
            </summary>
            <returns>
            A <see cref="T:System.Int32"/> represting the hashcode for this instance.
            </returns>
        </member>
        <member name="M:OpenTK.Input.MouseState.Equals(OpenTK.Input.MouseState)">
            <summary>
            Compares two MouseState instances.
            </summary>
            <param name="other">The instance to compare two.</param>
            <returns>True, if both instances are equal; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.KeyPressEventArgs">
            <summary>
            Defines the event arguments for KeyPress events. Instances of this class are cached:
            KeyPressEventArgs should only be used inside the relevant event, unless manually cloned.
            </summary>
        </member>
        <member name="M:OpenTK.KeyPressEventArgs.#ctor(System.Char)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="keyChar">The ASCII character that was typed.</param>
        </member>
        <member name="P:OpenTK.KeyPressEventArgs.KeyChar">
            <summary>
            Gets a <see cref="T:System.Char"/> that defines the ASCII character that was typed.
            </summary>
        </member>
        <member name="T:OpenTK.BezierCurve">
            <summary>
            Represents a bezier curve with as many points as you want.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurve.Parallel">
            <summary>
            The parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.0f to the orignal curve at any point.</remarks>
        </member>
        <member name="P:OpenTK.BezierCurve.Points">
            <summary>
            Gets the points of this curve.
            </summary>
            <remarks>The first point and the last points represent the anchor points.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{OpenTK.Vector2})">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(OpenTK.Vector2[])">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(System.Single,OpenTK.Vector2[])">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(System.Single,System.Collections.Generic.IEnumerable{OpenTK.Vector2})">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of curve.</returns>
            <remarks>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculateLength(System.Collections.Generic.IList{OpenTK.Vector2},System.Single)">
            <summary>
            Calculates the length of the specified bezier curve.
            </summary>
            <param name="points">The points.</param>
            <param name="precision">The precision value.</param>
            <returns>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</returns>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculateLength(System.Collections.Generic.IList{OpenTK.Vector2},System.Single,System.Single)">
            <summary>
            Calculates the length of the specified bezier curve.
            </summary>
            <param name="points">The points.</param>
            <param name="precision">The precision value.</param>
            <param name="parallel">The parallel value.</param>
            <returns>Length of curve.</returns>
            <remarks><para>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</para>
            <para>The <paramref name="parallel"/> parameter defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f represents a curve that has always a distance
            of 5.0f to the orignal curve.</para></remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePoint(System.Collections.Generic.IList{OpenTK.Vector2},System.Single)">
            <summary>
            Calculates the point on the given bezier curve with the specified t parameter.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, a value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePoint(System.Collections.Generic.IList{OpenTK.Vector2},System.Single,System.Single)">
            <summary>
            Calculates the point on the given bezier curve with the specified t parameter.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, a value between 0.0f and 1.0f.</param>
            <param name="parallel">The parallel value.</param>
            <returns>Resulting point.</returns>
            <remarks>The <paramref name="parallel"/> parameter defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f represents a curve that has always a distance
            of 5.0f to the orignal curve.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePointOfDerivative(System.Collections.Generic.IList{OpenTK.Vector2},System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of the given bezier function.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="T:OpenTK.BezierCurveCubic">
            <summary>
            Represents a cubic bezier curve with two anchor and two control points.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.StartAnchor">
            <summary>
            Start anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.EndAnchor">
            <summary>
            End anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.FirstControlPoint">
            <summary>
            First control point, controls the direction of the curve start.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.SecondControlPoint">
            <summary>
            Second control point, controls the direction of the curve end.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.Parallel">
            <summary>
            Gets or sets the parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveCubic"/>.
            </summary>
            <param name="startAnchor">The start anchor point.</param>
            <param name="endAnchor">The end anchor point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.#ctor(System.Single,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveCubic"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="startAnchor">The start anchor point.</param>
            <param name="endAnchor">The end anchor point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.CalculatePointOfDerivative(System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of this function.
            </summary>
            <param name="t">The t, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of the curve.</returns>
            <remarks>The precision gets better when the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="T:OpenTK.BezierCurveQuadric">
            <summary>
            Represents a quadric bezier curve with two anchor and one control point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.StartAnchor">
            <summary>
            Start anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.EndAnchor">
            <summary>
            End anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.ControlPoint">
            <summary>
            Control point, controls the direction of both endings of the curve.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.Parallel">
            <summary>
            The parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveQuadric"/>.
            </summary>
            <param name="startAnchor">The start anchor.</param>
            <param name="endAnchor">The end anchor.</param>
            <param name="controlPoint">The control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.#ctor(System.Single,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveQuadric"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="startAnchor">The start anchor.</param>
            <param name="endAnchor">The end anchor.</param>
            <param name="controlPoint">The control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.CalculatePointOfDerivative(System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of this function.
            </summary>
            <param name="t">The t, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of curve.</returns>
            <remarks>The precision gets better when the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="T:OpenTK.Box2">
            <summary>
            Defines a 2d box (rectangle).
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Left">
            <summary>
            The left boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Right">
            <summary>
            The right boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Top">
            <summary>
            The top boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Bottom">
            <summary>
            The bottom boundary of the structure.
            </summary>
        </member>
        <member name="M:OpenTK.Box2.#ctor(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new Box2 with the specified dimensions.
            </summary>
            <param name="topLeft">AnOpenTK.Vector2 describing the top-left corner of the Box2.</param>
            <param name="bottomRight">An OpenTK.Vector2 describing the bottom-right corner of the Box2.</param>
        </member>
        <member name="M:OpenTK.Box2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Box2 with the specified dimensions.
            </summary>
            <param name="left">The position of the left boundary.</param>
            <param name="top">The position of the top boundary.</param>
            <param name="right">The position of the right boundary.</param>
            <param name="bottom">The position of the bottom boundary.</param>
        </member>
        <member name="M:OpenTK.Box2.FromTLRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Box2 with the specified dimensions.
            </summary>
            <param name="top">The position of the top boundary.</param>
            <param name="left">The position of the left boundary.</param>
            <param name="right">The position of the right boundary.</param>
            <param name="bottom">The position of the bottom boundary.</param>
            <returns>A new OpenTK.Box2 with the specfied dimensions.</returns>
        </member>
        <member name="P:OpenTK.Box2.Width">
            <summary>
            Gets a float describing the width of the Box2 structure.
            </summary>
        </member>
        <member name="P:OpenTK.Box2.Height">
            <summary>
            Gets a float describing the height of the Box2 structure.
            </summary>
        </member>
        <member name="M:OpenTK.Box2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> describing the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTK.Functions">
            <summary>
            Contains mathematical functions for the OpenTK.Math toolkit.
            </summary>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:OpenTK.Functions.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:OpenTK.Functions.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.Functions.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.Functions.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenTK.Functions.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="F:OpenTK.Functions.PIF">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.RTODF">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.DTORF">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.PI">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.RTOD">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.DTOR">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:OpenTK.Functions.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:OpenTK.Functions.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="T:OpenTK.Half">
            <summary>
            The name Half is derived from half-precision floating-point number.
            It occupies only 16 bits, which are split into 1 Sign bit, 5 Exponent bits and 10 Mantissa bits.
            </summary>
            <remarks>
            Quote from ARB_half_float_pixel specification:
            Any representable 16-bit floating-point value is legal as input to a GL command that accepts 16-bit floating-point data.  The
            result of providing a value that is not a floating-point number (such as infinity or NaN) to such a command is unspecified,
            but must not lead to GL interruption or termination. Providing a denormalized number or negative zero to GL must yield
            predictable results.
            </remarks>
        </member>
        <member name="P:OpenTK.Half.IsZero">
            <summary>Returns true if the Half is zero.</summary>
        </member>
        <member name="P:OpenTK.Half.IsNaN">
            <summary>Returns true if the Half represents Not A Number (NaN)</summary>
        </member>
        <member name="P:OpenTK.Half.IsPositiveInfinity">
            <summary>Returns true if the Half represents positive infinity.</summary>
        </member>
        <member name="P:OpenTK.Half.IsNegativeInfinity">
            <summary>Returns true if the Half represents negative infinity.</summary>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Single)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="f">32-bit single-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Single,System.Boolean)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="f">32-bit single-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Double)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="d">64-bit double-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Double,System.Boolean)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="d">64-bit double-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Half.SingleToHalf(System.Int32)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:OpenTK.Half.ToSingle">
            <summary>Converts the 16-bit half to 32-bit floating-point.</summary>
            <returns>A single-precision floating-point number.</returns>
        </member>
        <member name="M:OpenTK.Half.HalfToFloat(System.UInt16)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:OpenTK.Half.op_Explicit(System.Single)~OpenTK.Half">
            <summary>
            Converts a System.Single to a OpenTK.Half.
            </summary>
            <param name="f">The value to convert.
            A <see cref="T:System.Single"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:OpenTK.Half"/>
            </returns>
        </member>
        <member name="M:OpenTK.Half.op_Explicit(System.Double)~OpenTK.Half">
            <summary>
            Converts a System.Double to a OpenTK.Half.
            </summary>
            <param name="d">The value to convert.
            A <see cref="T:System.Double"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:OpenTK.Half"/>
            </returns>
        </member>
        <member name="M:OpenTK.Half.op_Implicit(OpenTK.Half)~System.Single">
            <summary>
            Converts a OpenTK.Half to a System.Single.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:OpenTK.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Single"/>
            </returns>
        </member>
        <member name="M:OpenTK.Half.op_Implicit(OpenTK.Half)~System.Double">
            <summary>
            Converts a OpenTK.Half to a System.Double.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:OpenTK.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Double"/>
            </returns>
        </member>
        <member name="F:OpenTK.Half.SizeInBytes">
            <summary>The size in bytes for an instance of the Half struct.</summary>
        </member>
        <member name="F:OpenTK.Half.MinValue">
            <summary>Smallest positive half</summary>
        </member>
        <member name="F:OpenTK.Half.MinNormalizedValue">
            <summary>Smallest positive normalized half</summary>
        </member>
        <member name="F:OpenTK.Half.MaxValue">
            <summary>Largest positive half</summary>
        </member>
        <member name="F:OpenTK.Half.Epsilon">
            <summary>Smallest positive e for which half (1.0 + e) != half (1.0)</summary>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Half.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Half.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the Half by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Half.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the Half into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Half.Equals(OpenTK.Half)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified OpenTK.Half value.
            </summary>
            <param name="other">OpenTK.Half object to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Half.CompareTo(OpenTK.Half)">
            <summary>
            Compares this instance to a specified half-precision floating-point number
            and returns an integer that indicates whether the value of this instance
            is less than, equal to, or greater than the value of the specified half-precision
            floating-point number. 
            </summary>
            <param name="other">A half-precision floating-point number to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. If the number is:
            <para>Less than zero, then this instance is less than other, or this instance is not a number
            (OpenTK.Half.NaN) and other is a number.</para>
            <para>Zero: this instance is equal to value, or both this instance and other
            are not a number (OpenTK.Half.NaN), OpenTK.Half.PositiveInfinity, or
            OpenTK.Half.NegativeInfinity.</para>
            <para>Greater than zero: this instance is greater than othrs, or this instance is a number
            and other is not a number (OpenTK.Half.NaN).</para>
            </returns>
        </member>
        <member name="M:OpenTK.Half.ToString">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Half.ToString(System.String,System.IFormatProvider)">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <param name="format">Formatting for the output string.</param>
            <param name="formatProvider">Culture-specific formatting information.</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Half.Parse(System.String)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent.</summary>
            <param name="s">String representation of the number to convert.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:OpenTK.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="style">Specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:OpenTK.Half.TryParse(System.String,OpenTK.Half@)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent. Returns success.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,OpenTK.Half@)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent. Returns success.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="style">Specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Half.GetBytes(OpenTK.Half)">
            <summary>Returns the Half as an array of bytes.</summary>
            <param name="h">The Half to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Half.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half.</summary>
            <param name="value">A Half in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="T:OpenTK.MathHelper">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.Pi">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver2">
            <summary>
            Defines the value of Pi divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver3">
            <summary>
            Defines the value of Pi divided by three as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver4">
            <summary>
            Definesthe value of  Pi divided by four as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver6">
            <summary>
            Defines the value of Pi divided by six as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.TwoPi">
            <summary>
            Defines the value of Pi multiplied by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.ThreePiOver2">
            <summary>
            Defines the value of Pi multiplied by 3 and divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.E">
            <summary>
            Defines the value of E as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.Log10E">
            <summary>
            Defines the base-10 logarithm of E.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.Log2E">
            <summary>
            Defines the base-2 logarithm of E.
            </summary>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:OpenTK.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:OpenTK.MathHelper.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.MathHelper.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.MathHelper.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenTK.MathHelper.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:OpenTK.MathHelper.DegreesToRadians(System.Double)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenTK.MathHelper.RadiansToDegrees(System.Double)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:OpenTK.MathHelper.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps two double values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:OpenTK.MathHelper.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="F:OpenTK.Matrix2.R0C0">
            <summary>Row 0, Column 0</summary>
        </member>
        <member name="F:OpenTK.Matrix2.R0C1">
            <summary>Row 0, Column 1</summary>
        </member>
        <member name="F:OpenTK.Matrix2.R1C0">
            <summary>Row 1, Column 0</summary>
        </member>
        <member name="F:OpenTK.Matrix2.R1C1">
            <summary>Row 1, Column 1</summary>
        </member>
        <member name="P:OpenTK.Matrix2.Item(System.Int32,System.Int32)">
            <summary>Gets the component at the given row and column in the matrix.</summary>
            <param name="row">The row of the matrix.</param>
            <param name="column">The column of the matrix.</param>
            <returns>The component at the given row and column in the matrix.</returns>
        </member>
        <member name="P:OpenTK.Matrix2.Item(System.Int32)">
            <summary>Gets the component at the index into the matrix.</summary>
            <param name="index">The index into the components of the matrix.</param>
            <returns>The component at the given index into the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.op_Explicit(OpenTK.Matrix2)~System.IntPtr">
            <summary>Converts the matrix into an IntPtr.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An IntPtr for the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.op_Explicit(OpenTK.Matrix2)~System.Single*">
            <summary>Converts the matrix into left float*.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>A float* for the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.op_Explicit(OpenTK.Matrix2)~System.Single[]">
            <summary>Converts the matrix into an array of floats.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An array of floats for the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.#ctor(OpenTK.Matrix2@)">
            <summary>Constructs left matrix with the same components as the given matrix.</summary>
            <param name="vector">The matrix whose components to copy.</param>
        </member>
        <member name="M:OpenTK.Matrix2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructs left matrix with the given values.</summary>
            <param name="r0c0">The value for row 0 column 0.</param>
            <param name="r0c1">The value for row 0 column 1.</param>
            <param name="r1c0">The value for row 1 column 0.</param>
            <param name="r1c1">The value for row 1 column 1.</param>
        </member>
        <member name="M:OpenTK.Matrix2.#ctor(System.Single[])">
            <summary>Constructs left matrix from the given array of float-precision floating-point numbers.</summary>
            <param name="floatArray">The array of floats for the components of the matrix.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Equals(OpenTK.Matrix2)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix2 structure to compare with.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.Equals(OpenTK.Matrix2@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix2 structure to compare to.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.Equals(OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.EqualsApprox(OpenTK.Matrix2@,System.Single)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix2 structure to compare with.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.EqualsApprox(OpenTK.Matrix2@,OpenTK.Matrix2@,System.Single)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.Add(OpenTK.Matrix2@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Add(OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Add(OpenTK.Matrix2@,OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Add left matrix to left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Subtract(OpenTK.Matrix2@)">
            <summary>Subtract left matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Subtract(OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Subtract matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Subtract(OpenTK.Matrix2@,OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Subtract right matrix from left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Multiply(OpenTK.Matrix2@)">
            <summary>Multiply left martix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Multiply(OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Multiply(OpenTK.Matrix2@,OpenTK.Matrix2@,OpenTK.Matrix2@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Multiply(System.Single)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Multiply(System.Single,OpenTK.Matrix2@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenTK.Matrix2.Multiply(OpenTK.Matrix2@,System.Single,OpenTK.Matrix2@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="F:OpenTK.Matrix2.Identity">
            <summary>The identity matrix.</summary>
        </member>
        <member name="F:OpenTK.Matrix2.Zero">
            <summary>A matrix of all zeros.</summary>
        </member>
        <member name="M:OpenTK.Matrix2.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix2.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A System.String containing left fully qualified type name.</returns>
        </member>
        <member name="F:OpenTK.Matrix3.R0C0">
            <summary>Row 0, Column 0</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R0C1">
            <summary>Row 0, Column 1</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R0C2">
            <summary>Row 0, Column 2</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R1C0">
            <summary>Row 1, Column 0</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R1C1">
            <summary>Row 1, Column 1</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R1C2">
            <summary>Row 1, Column 2</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R2C0">
            <summary>Row 2, Column 0</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R2C1">
            <summary>Row 2, Column 1</summary>
        </member>
        <member name="F:OpenTK.Matrix3.R2C2">
            <summary>Row 2, Column 2</summary>
        </member>
        <member name="P:OpenTK.Matrix3.Item(System.Int32,System.Int32)">
            <summary>Gets the component at the given row and column in the matrix.</summary>
            <param name="row">The row of the matrix.</param>
            <param name="column">The column of the matrix.</param>
            <returns>The component at the given row and column in the matrix.</returns>
        </member>
        <member name="P:OpenTK.Matrix3.Item(System.Int32)">
            <summary>Gets the component at the index into the matrix.</summary>
            <param name="index">The index into the components of the matrix.</param>
            <returns>The component at the given index into the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.op_Explicit(OpenTK.Matrix3)~System.IntPtr">
            <summary>Converts the matrix into an IntPtr.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An IntPtr for the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.op_Explicit(OpenTK.Matrix3)~System.Single*">
            <summary>Converts the matrix into left float*.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>A float* for the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.op_Explicit(OpenTK.Matrix3)~System.Single[]">
            <summary>Converts the matrix into an array of floats.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An array of floats for the matrix.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.#ctor(OpenTK.Matrix3@)">
            <summary>Constructs left matrix with the same components as the given matrix.</summary>
            <param name="vector">The matrix whose components to copy.</param>
        </member>
        <member name="M:OpenTK.Matrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructs left matrix with the given values.</summary>
            <param name="r0c0">The value for row 0 column 0.</param>
            <param name="r0c1">The value for row 0 column 1.</param>
            <param name="r0c2">The value for row 0 column 2.</param>
            <param name="r1c0">The value for row 1 column 0.</param>
            <param name="r1c1">The value for row 1 column 1.</param>
            <param name="r1c2">The value for row 1 column 2.</param>
            <param name="r2c0">The value for row 2 column 0.</param>
            <param name="r2c1">The value for row 2 column 1.</param>
            <param name="r2c2">The value for row 2 column 2.</param>
        </member>
        <member name="M:OpenTK.Matrix3.#ctor(System.Single[])">
            <summary>Constructs left matrix from the given array of float-precision floating-point numbers.</summary>
            <param name="floatArray">The array of floats for the components of the matrix.</param>
        </member>
        <member name="M:OpenTK.Matrix3.#ctor(OpenTK.Quaterniond)">
            <summary>Constructs left matrix from the given quaternion.</summary>
            <param name="quaternion">The quaternion to use to construct the martix.</param>
        </member>
        <member name="M:OpenTK.Matrix3.#ctor(OpenTK.Matrix4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="matrix">A Matrix4 to take the upper-left 3x3 from.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Equals(OpenTK.Matrix3)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3 structure to compare with.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.Equals(OpenTK.Matrix3@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3 structure to compare to.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.Equals(OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.EqualsApprox(OpenTK.Matrix3@,System.Single)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3 structure to compare with.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.EqualsApprox(OpenTK.Matrix3@,OpenTK.Matrix3@,System.Single)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.Add(OpenTK.Matrix3@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Add(OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Add(OpenTK.Matrix3@,OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Add left matrix to left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Subtract(OpenTK.Matrix3@)">
            <summary>Subtract matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Subtract(OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Subtract matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Subtract(OpenTK.Matrix3@,OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Subtract right matrix from left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Multiply(OpenTK.Matrix3@)">
            <summary>Multiply left martix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Multiply(OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Multiply(OpenTK.Matrix3@,OpenTK.Matrix3@,OpenTK.Matrix3@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Multiply(System.Single)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Multiply(System.Single,OpenTK.Matrix3@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenTK.Matrix3.Multiply(OpenTK.Matrix3@,System.Single,OpenTK.Matrix3@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="F:OpenTK.Matrix3.Identity">
            <summary>The identity matrix.</summary>
        </member>
        <member name="F:OpenTK.Matrix3.Zero">
            <summary>A matrix of all zeros.</summary>
        </member>
        <member name="M:OpenTK.Matrix3.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix3.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A System.String containing left fully qualified type name.</returns>
        </member>
        <member name="T:OpenTK.Matrix4">
            <summary>
            Represents a 4x4 Matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.#ctor(OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenTK.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="P:OpenTK.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.CreateFromAxisAngle(OpenTK.Vector3,System.Single,OpenTK.Matrix4@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateFromAxisAngle(OpenTK.Vector3,System.Single)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationX(System.Single,OpenTK.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationX(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationY(System.Single,OpenTK.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationY(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationZ(System.Single,OpenTK.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationZ(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(OpenTK.Vector3@,OpenTK.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(OpenTK.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4 instance.</rereturns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.Translation(OpenTK.Vector3)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="trans">The translation vector.</param>
            <returns>A new Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Scale(System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Scale(OpenTK.Vector3)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.RotateX(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.RotateY(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.RotateZ(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Rotate(OpenTK.Vector3,System.Single)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Rotate(OpenTK.Quaternion)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.LookAt(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.LookAt(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eyeX">Eye (camera) position in world space</param>
            <param name="eyeY">Eye (camera) position in world space</param>
            <param name="eyeZ">Eye (camera) position in world space</param>
            <param name="targetX">Target position in world space</param>
            <param name="targetY">Target position in world space</param>
            <param name="targetZ">Target position in world space</param>
            <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Mult(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Mult(OpenTK.Matrix4@,OpenTK.Matrix4@,OpenTK.Matrix4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Matrix4.Invert(OpenTK.Matrix4)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:OpenTK.Matrix4.Transpose(OpenTK.Matrix4)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Transpose(OpenTK.Matrix4@,OpenTK.Matrix4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenTK.Matrix4.op_Multiply(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Matrix4.op_Equality(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.op_Inequality(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare tresult.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Equals(OpenTK.Matrix4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Matrix4d">
            <summary>
            Represents a 4x4 Matrix with double-precision components.
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4d.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4d.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4d.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4d.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4d.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4d.#ctor(OpenTK.Vector4d,OpenTK.Vector4d,OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenTK.Matrix4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row.</param>
            <param name="m01">Second item of the first row.</param>
            <param name="m02">Third item of the first row.</param>
            <param name="m03">Fourth item of the first row.</param>
            <param name="m10">First item of the second row.</param>
            <param name="m11">Second item of the second row.</param>
            <param name="m12">Third item of the second row.</param>
            <param name="m13">Fourth item of the second row.</param>
            <param name="m20">First item of the third row.</param>
            <param name="m21">Second item of the third row.</param>
            <param name="m22">Third item of the third row.</param>
            <param name="m23">First item of the third row.</param>
            <param name="m30">Fourth item of the fourth row.</param>
            <param name="m31">Second item of the fourth row.</param>
            <param name="m32">Third item of the fourth row.</param>
            <param name="m33">Fourth item of the fourth row.</param>
        </member>
        <member name="P:OpenTK.Matrix4d.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4d.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4d.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4d.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateFromAxisAngle(OpenTK.Vector3d,System.Double,OpenTK.Matrix4d@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateFromAxisAngle(OpenTK.Vector3d,System.Double)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateRotationX(System.Double,OpenTK.Matrix4d@)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateRotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateRotationY(System.Double,OpenTK.Matrix4d@)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateRotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateRotationZ(System.Double,OpenTK.Matrix4d@)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateRotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateTranslation(System.Double,System.Double,System.Double,OpenTK.Matrix4d@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateTranslation(OpenTK.Vector3d@,OpenTK.Matrix4d@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateTranslation(OpenTK.Vector3d)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,OpenTK.Matrix4d@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4d instance.</rereturns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,OpenTK.Matrix4d@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4d.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double,OpenTK.Matrix4d@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4d.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4d.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,OpenTK.Matrix4d@)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4d.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4d.Translation(OpenTK.Vector3d)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="trans">The vector to translate along</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Scale(System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Scale(OpenTK.Vector3d)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.RotateX(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.RotateY(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.RotateZ(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Rotate(OpenTK.Vector3d,System.Double)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Rotate(OpenTK.Quaterniond)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.LookAt(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.LookAt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eyeX">Eye (camera) position in world space</param>
            <param name="eyeY">Eye (camera) position in world space</param>
            <param name="eyeZ">Eye (camera) position in world space</param>
            <param name="targetX">Target position in world space</param>
            <param name="targetY">Target position in world space</param>
            <param name="targetZ">Target position in world space</param>
            <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Mult(OpenTK.Matrix4d,OpenTK.Matrix4d)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Mult(OpenTK.Matrix4d@,OpenTK.Matrix4d@,OpenTK.Matrix4d@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Matrix4d.Invert(OpenTK.Matrix4d)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4d is singular.</exception>
        </member>
        <member name="M:OpenTK.Matrix4d.Transpose(OpenTK.Matrix4d)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Transpose(OpenTK.Matrix4d@,OpenTK.Matrix4d@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenTK.Matrix4d.op_Multiply(OpenTK.Matrix4d,OpenTK.Matrix4d)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.op_Equality(OpenTK.Matrix4d,OpenTK.Matrix4d)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.op_Inequality(OpenTK.Matrix4d,OpenTK.Matrix4d)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Matrix4d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4d.Equals(OpenTK.Matrix4d)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Quaternion">
            <summary>
            Represents a Quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Construct a new Quaternion from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:OpenTK.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new Quaternion
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="P:OpenTK.Quaternion.XYZ">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.ToAxisAngle(OpenTK.Vector3@,System.Single@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:OpenTK.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="P:OpenTK.Quaternion.Length">
            <summary>
            Gets the length (magnitude) of the quaternion.
            </summary>
            <seealso cref="P:OpenTK.Quaternion.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Quaternion.LengthSquared">
            <summary>
            Gets the square of the quaternion length (magnitude).
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.Normalize">
            <summary>
            Scales the Quaternion to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.Conjugate">
            <summary>
            Convert this quaternion to its conjugate
            </summary>
        </member>
        <member name="F:OpenTK.Quaternion.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.Add(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Add(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:OpenTK.Quaternion.Sub(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Sub(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Mult(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Mult(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion@,System.Single,OpenTK.Quaternion@)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Conjugate(OpenTK.Quaternion)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <returns>The conjugate of the given quaternion</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Conjugate(OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <param name="result">The conjugate of the given quaternion</param>
        </member>
        <member name="M:OpenTK.Quaternion.Invert(OpenTK.Quaternion)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <returns>The inverse of the given quaternion</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Invert(OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <param name="result">The inverse of the given quaternion</param>
        </member>
        <member name="M:OpenTK.Quaternion.Normalize(OpenTK.Quaternion)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <returns>The normalized quaternion</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Normalize(OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <param name="result">The normalized quaternion</param>
        </member>
        <member name="M:OpenTK.Quaternion.FromAxisAngle(OpenTK.Vector3,System.Single)">
            <summary>
            Build a quaternion from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Quaternion.Slerp(OpenTK.Quaternion,OpenTK.Quaternion,System.Single)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Addition(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Subtraction(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Multiply(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Multiply(OpenTK.Quaternion,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Multiply(System.Single,OpenTK.Quaternion)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Equality(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Inequality(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.ToString">
            <summary>
            Returns a System.String that represents the current Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Quaternion.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Equals(OpenTK.Quaternion)">
            <summary>
            Compares this Quaternion instance to another Quaternion for equality. 
            </summary>
            <param name="other">The other Quaternion to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.Quaterniond">
            <summary>
            Represents a double-precision Quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Quaterniond.#ctor(OpenTK.Vector3d,System.Double)">
            <summary>
            Construct a new Quaterniond from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:OpenTK.Quaterniond.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new Quaterniond
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="P:OpenTK.Quaterniond.XYZ">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaterniond.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaterniond.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaterniond.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaterniond.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaterniond.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Quaterniond.ToAxisAngle(OpenTK.Vector3d@,System.Double@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:OpenTK.Quaterniond.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="P:OpenTK.Quaterniond.Length">
            <summary>
            Gets the length (magnitude) of the Quaterniond.
            </summary>
            <seealso cref="P:OpenTK.Quaterniond.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Quaterniond.LengthSquared">
            <summary>
            Gets the square of the Quaterniond length (magnitude).
            </summary>
        </member>
        <member name="M:OpenTK.Quaterniond.Normalize">
            <summary>
            Scales the Quaterniond to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Quaterniond.Conjugate">
            <summary>
            Convert this Quaterniond to its conjugate
            </summary>
        </member>
        <member name="F:OpenTK.Quaterniond.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Quaterniond.Add(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Add(OpenTK.Quaterniond@,OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Sub(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Sub(OpenTK.Quaterniond@,OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Mult(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Mult(OpenTK.Quaterniond@,OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Multiply(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Multiply(OpenTK.Quaterniond@,OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Multiply(OpenTK.Quaterniond@,System.Double,OpenTK.Quaterniond@)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Multiply(OpenTK.Quaterniond@,System.Double@,OpenTK.Quaterniond@)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Multiply(OpenTK.Quaterniond,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Conjugate(OpenTK.Quaterniond)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <returns>The conjugate of the given Quaterniond</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Conjugate(OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <param name="result">The conjugate of the given Quaterniond</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Invert(OpenTK.Quaterniond)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <returns>The inverse of the given Quaterniond</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Invert(OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <param name="result">The inverse of the given Quaterniond</param>
        </member>
        <member name="M:OpenTK.Quaterniond.Normalize(OpenTK.Quaterniond)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <returns>The normalized Quaterniond</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Normalize(OpenTK.Quaterniond@,OpenTK.Quaterniond@)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <param name="result">The normalized Quaterniond</param>
        </member>
        <member name="M:OpenTK.Quaterniond.FromAxisAngle(OpenTK.Vector3d,System.Double)">
            <summary>
            Build a Quaterniond from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Slerp(OpenTK.Quaterniond,OpenTK.Quaterniond,System.Double)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first Quaterniond</param>
            <param name="q2">The second Quaterniond</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Addition(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Subtraction(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Multiply(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Multiply(OpenTK.Quaterniond,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Multiply(System.Double,OpenTK.Quaterniond)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Equality(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.op_Inequality(OpenTK.Quaterniond,OpenTK.Quaterniond)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.ToString">
            <summary>
            Returns a System.String that represents the current Quaterniond.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:OpenTK.Quaterniond.Equals(OpenTK.Quaterniond)">
            <summary>
            Compares this Quaterniond instance to another Quaterniond for equality. 
            </summary>
            <param name="other">The other Quaterniond to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="T:OpenTK.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(OpenTK.Vector2)">
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(OpenTK.Vector3)">
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(OpenTK.Vector4)">
            <summary>
            Constructs a new Vector2 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from. Z and W are discarded.</param>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector2.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:OpenTK.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector2.LengthFast"/>
            <seealso cref="P:OpenTK.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector2.Length"/>
            <seealso cref="P:OpenTK.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector2.Length"/>
            <seealso cref="P:OpenTK.Vector2.LengthFast"/>
        </member>
        <member name="P:OpenTK.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenTK.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.NormalizeFast">
            <summary>
            Scales the Vector2 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.Scale(System.Single,System.Single)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenTK.Vector2.Scale(OpenTK.Vector2)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector2.Scale(OpenTK.Vector2@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector2.Mult(OpenTK.Vector2,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector2.Mult(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector2.Div(OpenTK.Vector2,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector2.Div(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Subtract(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector2.Subtract(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMin(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMin(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMax(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMax(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector2.Min(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector2.Max(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector2.Clamp(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector2.Clamp(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector2.Normalize(OpenTK.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector2.Normalize(OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector2.NormalizeFast(OpenTK.Vector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector2.NormalizeFast(OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector2.Dot(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector2.Dot(OpenTK.Vector2@,OpenTK.Vector2@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector2.Lerp(OpenTK.Vector2,OpenTK.Vector2,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector2.Lerp(OpenTK.Vector2@,OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector2.BaryCentric(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector2.BaryCentric(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@,System.Single,System.Single,OpenTK.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector2.Transform(OpenTK.Vector2,OpenTK.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Transform(OpenTK.Vector2@,OpenTK.Quaternion@,OpenTK.Vector2@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.op_Addition(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Subtraction(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_UnaryNegation(OpenTK.Vector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Multiply(OpenTK.Vector2,System.Single)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Multiply(System.Single,OpenTK.Vector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Division(OpenTK.Vector2,System.Single)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Equality(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Inequality(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Equals(OpenTK.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Vector2d">
            <summary>Represents a 2D vector using two double-precision floating-point numbers.</summary>
        </member>
        <member name="F:OpenTK.Vector2d.X">
            <summary>The X coordinate of this instance.</summary>
        </member>
        <member name="F:OpenTK.Vector2d.Y">
            <summary>The Y coordinate of this instance.</summary>
        </member>
        <member name="F:OpenTK.Vector2d.UnitX">
            <summary>
            Defines a unit-length Vector2d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2d.UnitY">
            <summary>
            Defines a unit-length Vector2d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2d.Zero">
            <summary>
            Defines a zero-length Vector2d.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2d.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2d.SizeInBytes">
            <summary>
            Defines the size of the Vector2d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2d.#ctor(System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector2d.#ctor(System.Double,System.Double)">
            <summary>Constructs left vector with the given coordinates.</summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Add(OpenTK.Vector2d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Add(OpenTK.Vector2d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Sub(OpenTK.Vector2d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Sub(OpenTK.Vector2d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:OpenTK.Vector2d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:OpenTK.Vector2d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector2d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector2d.Length"/>
        </member>
        <member name="P:OpenTK.Vector2d.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenTK.Vector2d.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2d.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2d.Scale(System.Double,System.Double)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Scale(OpenTK.Vector2d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Scale(OpenTK.Vector2d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Sub(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Sub(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector2d.Mult(OpenTK.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Mult(OpenTK.Vector2d@,System.Double,OpenTK.Vector2d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector2d.Div(OpenTK.Vector2d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Div(OpenTK.Vector2d@,System.Double,OpenTK.Vector2d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector2d.Add(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Add(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Subtract(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Subtract(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector2d.Multiply(OpenTK.Vector2d,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Multiply(OpenTK.Vector2d@,System.Double,OpenTK.Vector2d@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Multiply(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Multiply(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Divide(OpenTK.Vector2d,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Divide(OpenTK.Vector2d@,System.Double,OpenTK.Vector2d@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Divide(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Divide(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2d.Min(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Min(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector2d.Max(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Max(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector2d.Clamp(OpenTK.Vector2d,OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Clamp(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector2d.Normalize(OpenTK.Vector2d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Normalize(OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector2d.NormalizeFast(OpenTK.Vector2d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector2d.NormalizeFast(OpenTK.Vector2d@,OpenTK.Vector2d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector2d.Dot(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Dot(OpenTK.Vector2d@,OpenTK.Vector2d@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector2d.Lerp(OpenTK.Vector2d,OpenTK.Vector2d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Lerp(OpenTK.Vector2d@,OpenTK.Vector2d@,System.Double,OpenTK.Vector2d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector2d.BaryCentric(OpenTK.Vector2d,OpenTK.Vector2d,OpenTK.Vector2d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector2d.BaryCentric(OpenTK.Vector2d@,OpenTK.Vector2d@,OpenTK.Vector2d@,System.Double,System.Double,OpenTK.Vector2d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector2d.Transform(OpenTK.Vector2d,OpenTK.Quaterniond)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Transform(OpenTK.Vector2d@,OpenTK.Quaterniond@,OpenTK.Vector2d@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2d.op_Addition(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Subtraction(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_UnaryNegation(OpenTK.Vector2d)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Multiply(OpenTK.Vector2d,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="f">The scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Multiply(System.Double,OpenTK.Vector2d)">
            <summary>
            Multiply an instance by a scalar.
            </summary>
            <param name="f">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Division(OpenTK.Vector2d,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="f">The scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Equality(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True, if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Inequality(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Compares two instances for ienquality.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True, if the instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Explicit(OpenTK.Vector2)~OpenTK.Vector2d">
            <summary>Converts OpenTK.Vector2 to OpenTK.Vector2d.</summary>
            <param name="v2">The Vector2 to convert.</param>
            <returns>The resulting Vector2d.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.op_Explicit(OpenTK.Vector2d)~OpenTK.Vector2">
            <summary>Converts OpenTK.Vector2d to OpenTK.Vector2.</summary>
            <param name="v2d">The Vector2d to convert.</param>
            <returns>The resulting Vector2.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.ToString">
            <summary>
            Returns a System.String that represents the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector2d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2d.Equals(OpenTK.Vector2d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Vector2h">
            <summary>2-component Vector of the Half type. Occupies 4 Byte total.</summary>
        </member>
        <member name="F:OpenTK.Vector2h.X">
            <summary>The X component of the Half2.</summary>
        </member>
        <member name="F:OpenTK.Vector2h.Y">
            <summary>The Y component of the Half2.</summary>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Half)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Half,OpenTK.Half)">
            <summary>
            The new Half2 instance will avoid conversion and copy directly from the Half parameters.
            </summary>
            <param name="x">An Half instance of a 16-bit half-precision floating-point number.</param>
            <param name="y">An Half instance of a 16-bit half-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(System.Single,System.Single)">
            <summary>
            The new Half2 instance will convert the 2 parameters into 16-bit half-precision floating-point.
            </summary>
            <param name="x">32-bit single-precision floating-point number.</param>
            <param name="y">32-bit single-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            The new Half2 instance will convert the 2 parameters into 16-bit half-precision floating-point.
            </summary>
            <param name="x">32-bit single-precision floating-point number.</param>
            <param name="y">32-bit single-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector2</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector2</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2@)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-bit half-precision floating-point.
            This is the fastest constructor.
            </summary>
            <param name="v">OpenTK.Vector2</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2@,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector2</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2d)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector2d</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2d,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector2d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2d@)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-bit half-precision floating-point.
            This is the faster constructor.
            </summary>
            <param name="v">OpenTK.Vector2d</param>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(OpenTK.Vector2d@,System.Boolean)">
            <summary>
            The new Half2 instance will convert the Vector2d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector2d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector2h.ToVector2">
            <summary>
            Returns this Half2 instance's contents as Vector2.
            </summary>
            <returns>OpenTK.Vector2</returns>
        </member>
        <member name="M:OpenTK.Vector2h.ToVector2d">
            <summary>
            Returns this Half2 instance's contents as Vector2d.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2h.op_Explicit(OpenTK.Vector2)~OpenTK.Vector2h">
            <summary>Converts OpenTK.Vector2 to OpenTK.Half2.</summary>
            <param name="v">The Vector2 to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Vector2h.op_Explicit(OpenTK.Vector2d)~OpenTK.Vector2h">
            <summary>Converts OpenTK.Vector2d to OpenTK.Half2.</summary>
            <param name="v">The Vector2d to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Vector2h.op_Explicit(OpenTK.Vector2h)~OpenTK.Vector2">
            <summary>Converts OpenTK.Half2 to OpenTK.Vector2.</summary>
            <param name="h">The Half2 to convert.</param>
            <returns>The resulting Vector2.</returns>
        </member>
        <member name="M:OpenTK.Vector2h.op_Explicit(OpenTK.Vector2h)~OpenTK.Vector2d">
            <summary>Converts OpenTK.Half2 to OpenTK.Vector2d.</summary>
            <param name="h">The Half2 to convert.</param>
            <returns>The resulting Vector2d.</returns>
        </member>
        <member name="F:OpenTK.Vector2h.SizeInBytes">
            <summary>The size in bytes for an instance of the Half2 struct is 4.</summary>
        </member>
        <member name="M:OpenTK.Vector2h.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Vector2h.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Vector2h.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the X and Y components of this instance by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Vector2h.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the X and Y components of this instance into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Vector2h.Equals(OpenTK.Vector2h)">
            <summary>Returns a value indicating whether this instance is equal to a specified OpenTK.Half2 vector.</summary>
            <param name="other">OpenTK.Half2 to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2h.ToString">
            <summary>Returns a string that contains this Half2's numbers in human-legible form.</summary>
        </member>
        <member name="M:OpenTK.Vector2h.GetBytes(OpenTK.Vector2h)">
            <summary>Returns the Half2 as an array of bytes.</summary>
            <param name="h">The Half2 to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Vector2h.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half2.</summary>
            <param name="value">A Half2 in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half2 instance.</returns>
        </member>
        <member name="T:OpenTK.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
            <remarks>
            The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(OpenTK.Vector2)">
            <summary>
            Constructs a new Vector3 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(OpenTK.Vector3)">
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(OpenTK.Vector4)">
            <summary>
            Constructs a new Vector3 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector3.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:OpenTK.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector3.LengthFast"/>
            <seealso cref="P:OpenTK.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector3.Length"/>
            <seealso cref="P:OpenTK.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector3.Length"/>
            <seealso cref="P:OpenTK.Vector3.LengthFast"/>
        </member>
        <member name="M:OpenTK.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Vector3.Scale(OpenTK.Vector3)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector3.Scale(OpenTK.Vector3@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector3.Mult(OpenTK.Vector3,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector3.Mult(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector3.Div(OpenTK.Vector3,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector3.Div(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Subtract(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector3.Subtract(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMin(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMin(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMax(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMax(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector3.Min(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3.Max(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3.Clamp(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.Clamp(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Normalize(OpenTK.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.Normalize(OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector3.NormalizeFast(OpenTK.Vector3)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.NormalizeFast(OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Dot(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector3.Dot(OpenTK.Vector3@,OpenTK.Vector3@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector3.Cross(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector3.Cross(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector3.Lerp(OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector3.Lerp(OpenTK.Vector3@,OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector3.BaryCentric(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector3.BaryCentric(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Single,System.Single,OpenTK.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformVector(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformVector(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormal(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormal(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormalInverse(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormalInverse(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformPosition(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformPosition(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3,OpenTK.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3@,OpenTK.Quaternion@,OpenTK.Vector3@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformPerspective(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformPerspective(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.CalculateAngle(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Vector3.CalculateAngle(OpenTK.Vector3@,OpenTK.Vector3@,System.Single@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="P:OpenTK.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.op_Addition(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Subtraction(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_UnaryNegation(OpenTK.Vector3)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Multiply(OpenTK.Vector3,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Multiply(System.Single,OpenTK.Vector3)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Division(OpenTK.Vector3,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Equality(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Inequality(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Equals(OpenTK.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Vector3d">
            <summary>
            Represents a 3D vector using three double-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3d.#ctor(System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenTK.Vector3d.#ctor(OpenTK.Vector2d)">
            <summary>
            Constructs a new instance from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.#ctor(OpenTK.Vector3d)">
            <summary>
            Constructs a new instance from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.#ctor(OpenTK.Vector4d)">
            <summary>
            Constructs a new instance from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Add(OpenTK.Vector3d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Add(OpenTK.Vector3d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Sub(OpenTK.Vector3d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Sub(OpenTK.Vector3d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:OpenTK.Vector3d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector3d.LengthFast"/>
            <seealso cref="P:OpenTK.Vector3d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector3d.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector3d.Length"/>
            <seealso cref="P:OpenTK.Vector3d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector3d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector3d.Length"/>
            <seealso cref="P:OpenTK.Vector3d.LengthFast"/>
        </member>
        <member name="M:OpenTK.Vector3d.Normalize">
            <summary>
            Scales the Vector3d to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3d.NormalizeFast">
            <summary>
            Scales the Vector3d to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector3d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Scale(OpenTK.Vector3d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Scale(OpenTK.Vector3d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Vector3d.UnitX">
            <summary>
            Defines a unit-length Vector3d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.UnitY">
            <summary>
            Defines a unit-length Vector3d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.UnitZ">
            <summary>
            /// Defines a unit-length Vector3d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3d.SizeInBytes">
            <summary>
            Defines the size of the Vector3d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3d.Sub(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Sub(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector3d.Mult(OpenTK.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Mult(OpenTK.Vector3d@,System.Double,OpenTK.Vector3d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector3d.Div(OpenTK.Vector3d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Div(OpenTK.Vector3d@,System.Double,OpenTK.Vector3d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector3d.Add(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Add(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Subtract(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Subtract(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector3d.Multiply(OpenTK.Vector3d,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Multiply(OpenTK.Vector3d@,System.Double,OpenTK.Vector3d@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Multiply(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Multiply(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Divide(OpenTK.Vector3d,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Divide(OpenTK.Vector3d@,System.Double,OpenTK.Vector3d@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Divide(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Divide(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3d.ComponentMin(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector3d.ComponentMin(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector3d.ComponentMax(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector3d.ComponentMax(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector3d.Min(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Max(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Clamp(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Clamp(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.Normalize(OpenTK.Vector3d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Normalize(OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.NormalizeFast(OpenTK.Vector3d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector3d.NormalizeFast(OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.Dot(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Dot(OpenTK.Vector3d@,OpenTK.Vector3d@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector3d.Cross(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Cross(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector3d.Lerp(OpenTK.Vector3d,OpenTK.Vector3d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Lerp(OpenTK.Vector3d@,OpenTK.Vector3d@,System.Double,OpenTK.Vector3d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector3d.BaryCentric(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector3d.BaryCentric(OpenTK.Vector3d@,OpenTK.Vector3d@,OpenTK.Vector3d@,System.Double,System.Double,OpenTK.Vector3d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector3d.TransformVector(OpenTK.Vector3d,OpenTK.Matrix4d)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3d.TransformVector(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector3d@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.TransformNormal(OpenTK.Vector3d,OpenTK.Matrix4d)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Vector3d.TransformNormal(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector3d@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Vector3d.TransformNormalInverse(OpenTK.Vector3d,OpenTK.Matrix4d)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Vector3d.TransformNormalInverse(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector3d@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Vector3d.TransformPosition(OpenTK.Vector3d,OpenTK.Matrix4d)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenTK.Vector3d.TransformPosition(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector3d@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenTK.Vector3d.Transform(OpenTK.Vector3d,OpenTK.Matrix4d)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Transform(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector3d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.Transform(OpenTK.Vector3d,OpenTK.Quaterniond)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Transform(OpenTK.Vector3d@,OpenTK.Quaterniond@,OpenTK.Vector3d@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3d.Transform(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector4d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.TransformPerspective(OpenTK.Vector3d,OpenTK.Matrix4d)">
            <summary>
            Transform a Vector3d by the given Matrix, and project the resulting Vector4 back to a Vector3
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3d.TransformPerspective(OpenTK.Vector3d@,OpenTK.Matrix4d@,OpenTK.Vector3d@)">
            <summary>Transform a Vector3d by the given Matrix, and project the resulting Vector4d back to a Vector3d</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3d.CalculateAngle(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Vector3d.CalculateAngle(OpenTK.Vector3d@,OpenTK.Vector3d@,System.Double@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="P:OpenTK.Vector3d.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3d.op_Addition(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Subtraction(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_UnaryNegation(OpenTK.Vector3d)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Multiply(OpenTK.Vector3d,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Multiply(System.Double,OpenTK.Vector3d)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Division(OpenTK.Vector3d,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Equality(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Inequality(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Explicit(OpenTK.Vector3)~OpenTK.Vector3d">
            <summary>Converts OpenTK.Vector3 to OpenTK.Vector3d.</summary>
            <param name="v3">The Vector3 to convert.</param>
            <returns>The resulting Vector3d.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.op_Explicit(OpenTK.Vector3d)~OpenTK.Vector3">
            <summary>Converts OpenTK.Vector3d to OpenTK.Vector3.</summary>
            <param name="v3d">The Vector3d to convert.</param>
            <returns>The resulting Vector3.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector3d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3d.Equals(OpenTK.Vector3d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Vector3h">
            <summary>
            3-component Vector of the Half type. Occupies 6 Byte total.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3h.X">
            <summary>The X component of the Half3.</summary>
        </member>
        <member name="F:OpenTK.Vector3h.Y">
            <summary>The Y component of the Half3.</summary>
        </member>
        <member name="F:OpenTK.Vector3h.Z">
            <summary>The Z component of the Half3.</summary>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Half)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Half,OpenTK.Half,OpenTK.Half)">
            <summary>
            The new Half3 instance will avoid conversion and copy directly from the Half parameters.
            </summary>
            <param name="x">An Half instance of a 16-bit half-precision floating-point number.</param>
            <param name="y">An Half instance of a 16-bit half-precision floating-point number.</param>
            <param name="z">An Half instance of a 16-bit half-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            The new Half3 instance will convert the 3 parameters into 16-bit half-precision floating-point.
            </summary>
            <param name="x">32-bit single-precision floating-point number.</param>
            <param name="y">32-bit single-precision floating-point number.</param>
            <param name="z">32-bit single-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            The new Half3 instance will convert the 3 parameters into 16-bit half-precision floating-point.
            </summary>
            <param name="x">32-bit single-precision floating-point number.</param>
            <param name="y">32-bit single-precision floating-point number.</param>
            <param name="z">32-bit single-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector3</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector3</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3@)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-bit half-precision floating-point.
            This is the fastest constructor.
            </summary>
            <param name="v">OpenTK.Vector3</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3@,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector3</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3d)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector3d</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3d,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector3d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3d@)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-bit half-precision floating-point.
            This is the faster constructor.
            </summary>
            <param name="v">OpenTK.Vector3d</param>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(OpenTK.Vector3d@,System.Boolean)">
            <summary>
            The new Half3 instance will convert the Vector3d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector3d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="P:OpenTK.Vector3h.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2h with the X and Y components of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3h.ToVector3">
            <summary>
            Returns this Half3 instance's contents as Vector3.
            </summary>
            <returns>OpenTK.Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3h.ToVector3d">
            <summary>
            Returns this Half3 instance's contents as Vector3d.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3h.op_Explicit(OpenTK.Vector3)~OpenTK.Vector3h">
            <summary>Converts OpenTK.Vector3 to OpenTK.Half3.</summary>
            <param name="v3f">The Vector3 to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Vector3h.op_Explicit(OpenTK.Vector3d)~OpenTK.Vector3h">
            <summary>Converts OpenTK.Vector3d to OpenTK.Half3.</summary>
            <param name="v3d">The Vector3d to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Vector3h.op_Explicit(OpenTK.Vector3h)~OpenTK.Vector3">
            <summary>Converts OpenTK.Half3 to OpenTK.Vector3.</summary>
            <param name="h3">The Half3 to convert.</param>
            <returns>The resulting Vector3.</returns>
        </member>
        <member name="M:OpenTK.Vector3h.op_Explicit(OpenTK.Vector3h)~OpenTK.Vector3d">
            <summary>Converts OpenTK.Half3 to OpenTK.Vector3d.</summary>
            <param name="h3">The Half3 to convert.</param>
            <returns>The resulting Vector3d.</returns>
        </member>
        <member name="F:OpenTK.Vector3h.SizeInBytes">
            <summary>The size in bytes for an instance of the Half3 struct is 6.</summary>
        </member>
        <member name="M:OpenTK.Vector3h.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Vector3h.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Vector3h.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the X,Y and Z components of this instance by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Vector3h.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the X,Y and Z components of this instance into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Vector3h.Equals(OpenTK.Vector3h)">
            <summary>Returns a value indicating whether this instance is equal to a specified OpenTK.Half3 vector.</summary>
            <param name="other">OpenTK.Half3 to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3h.ToString">
            <summary>Returns a string that contains this Half3's numbers in human-legible form.</summary>
        </member>
        <member name="M:OpenTK.Vector3h.GetBytes(OpenTK.Vector3h)">
            <summary>Returns the Half3 as an array of bytes.</summary>
            <param name="h">The Half3 to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Vector3h.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half3.</summary>
            <param name="value">A Half3 in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half3 instance.</returns>
        </member>
        <member name="T:OpenTK.Vector4">
            <summary>Represents a 4D vector using four single-precision floating-point numbers.</summary>
            <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.W">
            <summary>
            The W component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector4.
            </summary>
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The w component of the Vector4.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector2)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector3)">
            <summary>
            Constructs a new Vector4 from the given Vector3.
            The w component is initialized to 0.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <remarks><seealso cref="M:OpenTK.Vector4.#ctor(OpenTK.Vector3,System.Single)"/></remarks>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Constructs a new Vector4 from the specified Vector3 and w component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The w component of the new Vector4.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector4)">
            <summary>
            Constructs a new Vector4 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector4.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:OpenTK.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector4.LengthFast"/>
            <seealso cref="P:OpenTK.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector4.Length"/>
            <seealso cref="P:OpenTK.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector4.Length"/>
            <seealso cref="P:OpenTK.Vector4.LengthFast"/>
        </member>
        <member name="M:OpenTK.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector4 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Vector4.Scale(OpenTK.Vector4)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector4.Scale(OpenTK.Vector4@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector4.Mult(OpenTK.Vector4,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector4.Mult(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector4.Div(OpenTK.Vector4,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector4.Div(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Subtract(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector4.Subtract(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Min(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector4.Min(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector4.Max(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector4.Max(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector4.Clamp(OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.Clamp(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector4.Normalize(OpenTK.Vector4)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.Normalize(OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector4.NormalizeFast(OpenTK.Vector4)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.NormalizeFast(OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector4.Dot(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector4.Dot(OpenTK.Vector4@,OpenTK.Vector4@,System.Single@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector4.Lerp(OpenTK.Vector4,OpenTK.Vector4,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector4.Lerp(OpenTK.Vector4@,OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector4.BaryCentric(OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector4.BaryCentric(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@,System.Single,System.Single,OpenTK.Vector4@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4,OpenTK.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4@,OpenTK.Matrix4@,OpenTK.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4,OpenTK.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4@,OpenTK.Quaternion@,OpenTK.Vector4@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="P:OpenTK.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.op_Addition(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Subtraction(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_UnaryNegation(OpenTK.Vector4)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Multiply(OpenTK.Vector4,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Multiply(System.Single,OpenTK.Vector4)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Division(OpenTK.Vector4,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Equality(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Inequality(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Explicit(OpenTK.Vector4)~System.Single*">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Explicit(OpenTK.Vector4)~System.IntPtr">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:OpenTK.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Equals(OpenTK.Vector4)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Vector4d">
            <summary>Represents a 4D vector using four double-precision floating-point numbers.</summary>
        </member>
        <member name="F:OpenTK.Vector4d.X">
            <summary>
            The X component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.Y">
            <summary>
            The Y component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.Z">
            <summary>
            The Z component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.W">
            <summary>
            The W component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.UnitX">
            <summary>
            Defines a unit-length Vector4d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.UnitY">
            <summary>
            Defines a unit-length Vector4d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.UnitZ">
            <summary>
            Defines a unit-length Vector4d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.UnitW">
            <summary>
            Defines a unit-length Vector4d that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.Zero">
            <summary>
            Defines a zero-length Vector4d.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4d.SizeInBytes">
            <summary>
            Defines the size of the Vector4d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector4d.
            </summary>
            <param name="x">The x component of the Vector4d.</param>
            <param name="y">The y component of the Vector4d.</param>
            <param name="z">The z component of the Vector4d.</param>
            <param name="w">The w component of the Vector4d.</param>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(OpenTK.Vector2d)">
            <summary>
            Constructs a new Vector4d from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(OpenTK.Vector3d)">
            <summary>
            Constructs a new Vector4d from the given Vector3d.
            The w component is initialized to 0.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
            <remarks><seealso cref="M:OpenTK.Vector4d.#ctor(OpenTK.Vector3d,System.Double)"/></remarks>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(OpenTK.Vector3d,System.Double)">
            <summary>
            Constructs a new Vector4d from the specified Vector3d and w component.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
            <param name="w">The w component of the new Vector4.</param>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(OpenTK.Vector3,System.Double)">
            <summary>
            Constructs a new Vector4d from the specified Vector3 and w component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The w component of the new Vector4.</param>
        </member>
        <member name="M:OpenTK.Vector4d.#ctor(OpenTK.Vector4d)">
            <summary>
            Constructs a new Vector4d from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Add(OpenTK.Vector4d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Add(OpenTK.Vector4d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Sub(OpenTK.Vector4d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Sub(OpenTK.Vector4d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:OpenTK.Vector4d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector4d.LengthFast"/>
            <seealso cref="P:OpenTK.Vector4d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector4d.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector4d.Length"/>
            <seealso cref="P:OpenTK.Vector4d.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector4d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector4d.Length"/>
        </member>
        <member name="M:OpenTK.Vector4d.Normalize">
            <summary>
            Scales the Vector4d to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4d.NormalizeFast">
            <summary>
            Scales the Vector4d to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4d.Scale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector4d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Scale(OpenTK.Vector4d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Scale(OpenTK.Vector4d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Sub(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Sub(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector4d.Mult(OpenTK.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Mult(OpenTK.Vector4d@,System.Double,OpenTK.Vector4d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector4d.Div(OpenTK.Vector4d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Div(OpenTK.Vector4d@,System.Double,OpenTK.Vector4d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector4d.Add(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Add(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Subtract(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Subtract(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector4d.Multiply(OpenTK.Vector4d,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Multiply(OpenTK.Vector4d@,System.Double,OpenTK.Vector4d@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Multiply(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Multiply(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Divide(OpenTK.Vector4d,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Divide(OpenTK.Vector4d@,System.Double,OpenTK.Vector4d@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Divide(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Divide(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4d.Min(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Min(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector4d.Max(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Max(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector4d.Clamp(OpenTK.Vector4d,OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Clamp(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector4d.Normalize(OpenTK.Vector4d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Normalize(OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector4d.NormalizeFast(OpenTK.Vector4d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector4d.NormalizeFast(OpenTK.Vector4d@,OpenTK.Vector4d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector4d.Dot(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Dot(OpenTK.Vector4d@,OpenTK.Vector4d@,System.Double@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector4d.Lerp(OpenTK.Vector4d,OpenTK.Vector4d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Lerp(OpenTK.Vector4d@,OpenTK.Vector4d@,System.Double,OpenTK.Vector4d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector4d.BaryCentric(OpenTK.Vector4d,OpenTK.Vector4d,OpenTK.Vector4d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector4d.BaryCentric(OpenTK.Vector4d@,OpenTK.Vector4d@,OpenTK.Vector4d@,System.Double,System.Double,OpenTK.Vector4d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector4d.Transform(OpenTK.Vector4d,OpenTK.Matrix4d)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Transform(OpenTK.Vector4d@,OpenTK.Matrix4d@,OpenTK.Vector4d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector4d.Transform(OpenTK.Vector4d,OpenTK.Quaterniond)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Transform(OpenTK.Vector4d@,OpenTK.Quaterniond@,OpenTK.Vector4d@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="P:OpenTK.Vector4d.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Vector4d.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4d.op_Addition(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Subtraction(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_UnaryNegation(OpenTK.Vector4d)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Multiply(OpenTK.Vector4d,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Multiply(System.Double,OpenTK.Vector4d)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Division(OpenTK.Vector4d,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Equality(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Inequality(OpenTK.Vector4d,OpenTK.Vector4d)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Explicit(OpenTK.Vector4d)~System.Double*">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Explicit(OpenTK.Vector4d)~System.IntPtr">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Explicit(OpenTK.Vector4)~OpenTK.Vector4d">
            <summary>Converts OpenTK.Vector4 to OpenTK.Vector4d.</summary>
            <param name="v4">The Vector4 to convert.</param>
            <returns>The resulting Vector4d.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.op_Explicit(OpenTK.Vector4d)~OpenTK.Vector4">
            <summary>Converts OpenTK.Vector4d to OpenTK.Vector4.</summary>
            <param name="v4d">The Vector4d to convert.</param>
            <returns>The resulting Vector4.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.ToString">
            <summary>
            Returns a System.String that represents the current Vector4d.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector4d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4d.Equals(OpenTK.Vector4d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:OpenTK.Vector4h">
            <summary>
            4-component Vector of the Half type. Occupies 8 Byte total.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4h.X">
            <summary>The X component of the Half4.</summary>
        </member>
        <member name="F:OpenTK.Vector4h.Y">
            <summary>The Y component of the Half4.</summary>
        </member>
        <member name="F:OpenTK.Vector4h.Z">
            <summary>The Z component of the Half4.</summary>
        </member>
        <member name="F:OpenTK.Vector4h.W">
            <summary>The W component of the Half4.</summary>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Half)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half)">
            <summary>
            The new Half4 instance will avoid conversion and copy directly from the Half parameters.
            </summary>
            <param name="x">An Half instance of a 16-bit half-precision floating-point number.</param>
            <param name="y">An Half instance of a 16-bit half-precision floating-point number.</param>
            <param name="z">An Half instance of a 16-bit half-precision floating-point number.</param>
            <param name="w">An Half instance of a 16-bit half-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The new Half4 instance will convert the 4 parameters into 16-bit half-precision floating-point.
            </summary>
            <param name="x">32-bit single-precision floating-point number.</param>
            <param name="y">32-bit single-precision floating-point number.</param>
            <param name="z">32-bit single-precision floating-point number.</param>
            <param name="w">32-bit single-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            The new Half4 instance will convert the 4 parameters into 16-bit half-precision floating-point.
            </summary>
            <param name="x">32-bit single-precision floating-point number.</param>
            <param name="y">32-bit single-precision floating-point number.</param>
            <param name="z">32-bit single-precision floating-point number.</param>
            <param name="w">32-bit single-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector4</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector4</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4@)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-bit half-precision floating-point.
            This is the fastest constructor.
            </summary>
            <param name="v">OpenTK.Vector4</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4@,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4 into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector4</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4d)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector4d</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4d,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector4d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4d@)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-bit half-precision floating-point.
            This is the faster constructor.
            </summary>
            <param name="v">OpenTK.Vector4d</param>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(OpenTK.Vector4d@,System.Boolean)">
            <summary>
            The new Half4 instance will convert the Vector4d into 16-bit half-precision floating-point.
            </summary>
            <param name="v">OpenTK.Vector4d</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="P:OpenTK.Vector4h.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2h with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Vector4h.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3h with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4h.ToVector4">
            <summary>
            Returns this Half4 instance's contents as Vector4.
            </summary>
            <returns>OpenTK.Vector4</returns>
        </member>
        <member name="M:OpenTK.Vector4h.ToVector4d">
            <summary>
            Returns this Half4 instance's contents as Vector4d.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4h.op_Explicit(OpenTK.Vector4)~OpenTK.Vector4h">
            <summary>Converts OpenTK.Vector4 to OpenTK.Half4.</summary>
            <param name="v4f">The Vector4 to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Vector4h.op_Explicit(OpenTK.Vector4d)~OpenTK.Vector4h">
            <summary>Converts OpenTK.Vector4d to OpenTK.Half4.</summary>
            <param name="v4d">The Vector4d to convert.</param>
            <returns>The resulting Half vector.</returns>
        </member>
        <member name="M:OpenTK.Vector4h.op_Explicit(OpenTK.Vector4h)~OpenTK.Vector4">
            <summary>Converts OpenTK.Half4 to OpenTK.Vector4.</summary>
            <param name="h4">The Half4 to convert.</param>
            <returns>The resulting Vector4.</returns>
        </member>
        <member name="M:OpenTK.Vector4h.op_Explicit(OpenTK.Vector4h)~OpenTK.Vector4d">
            <summary>Converts OpenTK.Half4 to OpenTK.Vector4d.</summary>
            <param name="h4">The Half4 to convert.</param>
            <returns>The resulting Vector4d.</returns>
        </member>
        <member name="F:OpenTK.Vector4h.SizeInBytes">
            <summary>The size in bytes for an instance of the Half4 struct is 8.</summary>
        </member>
        <member name="M:OpenTK.Vector4h.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Vector4h.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Vector4h.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the X,Y,Z and W components of this instance by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Vector4h.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the X,Y,Z and W components of this instance into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Vector4h.Equals(OpenTK.Vector4h)">
            <summary>Returns a value indicating whether this instance is equal to a specified OpenTK.Half4 vector.</summary>
            <param name="other">OpenTK.Half4 to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4h.ToString">
            <summary>Returns a string that contains this Half4's numbers in human-legible form.</summary>
        </member>
        <member name="M:OpenTK.Vector4h.GetBytes(OpenTK.Vector4h)">
            <summary>Returns the Half4 as an array of bytes.</summary>
            <param name="h">The Half4 to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Vector4h.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half4.</summary>
            <param name="value">A Half4 in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half4 instance.</returns>
        </member>
        <member name="T:OpenTK.NativeWindow">
            <summary>
            Instances of this class implement the <see cref="T:OpenTK.INativeWindow"/> interface on the current platform.
            </summary>
        </member>
        <member name="M:OpenTK.NativeWindow.#ctor">
            <summary>Constructs a new NativeWindow with default attributes without enabling events.</summary>
        </member>
        <member name="M:OpenTK.NativeWindow.#ctor(System.Int32,System.Int32,System.String,OpenTK.GameWindowFlags,OpenTK.Graphics.GraphicsMode,OpenTK.DisplayDevice)">
            <summary>Constructs a new centered NativeWindow with the specified attributes.</summary>
            <param name="width">The width of the NativeWindow in pixels.</param>
            <param name="height">The height of the NativeWindow in pixels.</param>
            <param name="title">The title of the NativeWindow.</param>
            <param name="options">GameWindow options specifying window appearance and behavior.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the NativeWindow.</param>
            <param name="device">The OpenTK.Graphics.DisplayDevice to construct the NativeWindow in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If width or height is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException">If mode or device is null.</exception>
        </member>
        <member name="M:OpenTK.NativeWindow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,OpenTK.GameWindowFlags,OpenTK.Graphics.GraphicsMode,OpenTK.DisplayDevice)">
            <summary>Constructs a new NativeWindow with the specified attributes.</summary>
            <param name="x">Horizontal screen space coordinate of the NativeWindow's origin.</param>
            <param name="y">Vertical screen space coordinate of the NativeWindow's origin.</param>
            <param name="width">The width of the NativeWindow in pixels.</param>
            <param name="height">The height of the NativeWindow in pixels.</param>
            <param name="title">The title of the NativeWindow.</param>
            <param name="options">GameWindow options specifying window appearance and behavior.</param>
            <param name="mode">The OpenTK.Graphics.GraphicsMode of the NativeWindow.</param>
            <param name="device">The OpenTK.Graphics.DisplayDevice to construct the NativeWindow in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If width or height is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException">If mode or device is null.</exception>
        </member>
        <member name="M:OpenTK.NativeWindow.Close">
            <summary>
            Closes the NativeWindow.
            </summary>
        </member>
        <member name="M:OpenTK.NativeWindow.PointToClient(System.Drawing.Point)">
            <summary>
            Transforms the specified point from screen to client coordinates. 
            </summary>
            <param name="point">
            A <see cref="T:System.Drawing.Point"/> to transform.
            </param>
            <returns>
            The point transformed to client coordinates.
            </returns>
        </member>
        <member name="M:OpenTK.NativeWindow.PointToScreen(System.Drawing.Point)">
            <summary>
            Transforms the specified point from client to screen coordinates.
            </summary>
            <param name="point">
            A <see cref="T:System.Drawing.Point"/> to transform.
            </param>
            <returns>
            The point transformed to screen coordinates.
            </returns>
        </member>
        <member name="M:OpenTK.NativeWindow.ProcessEvents">
            <summary>
            Processes operating system events until the NativeWindow becomes idle.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Bounds">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Rectangle"/> structure that contains the external bounds of this window, in screen coordinates.
            External bounds include the title bar, borders and drawing area of the window.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.ClientRectangle">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Rectangle"/> structure that contains the internal bounds of this window, in client coordinates.
            The internal bounds include the drawing area of the window, but exclude the titlebar and window borders.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.ClientSize">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Size"/> structure that contains the internal size this window.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Exists">
            <summary>
            Gets a value indicating whether a render window exists.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Focused">
            <summary>
            Gets a System.Boolean that indicates whether this NativeWindow has input focus.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Height">
            <summary>
            Gets or sets the external height of this window.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.InputDriver">
            <summary>
            This property is deprecated.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Location">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that contains the location of this window on the desktop.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Size">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Size"/> structure that contains the external size of this window.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Title">
            <summary>
            Gets or sets the NativeWindow title.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Visible">
            <summary>
            Gets or sets a System.Boolean that indicates whether this NativeWindow is visible.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Width">
            <summary>
            Gets or sets the external width of this window.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.WindowBorder">
            <summary>
            Gets or states the border of the NativeWindow.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.WindowInfo">
            <summary>
            Gets the <see cref="T:OpenTK.Platform.IWindowInfo"/> of this window.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.WindowState">
            <summary>
            Gets or states the state of the NativeWindow.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.X">
            <summary>
            Gets or sets the horizontal location of this window on the desktop.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.Y">
            <summary>
            Gets or sets the vertical location of this window on the desktop.
            </summary>
        </member>
        <member name="P:OpenTK.NativeWindow.CursorVisible">
            <summary>
            Gets or sets a value indicating whether the mouse cursor is visible.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.Closed">
            <summary>
            Occurs after the window has closed.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.Closing">
            <summary>
            Occurs when the window is about to close.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.Disposed">
            <summary>
            Occurs when the window is disposed.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.FocusedChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.NativeWindow.Focused"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.KeyDown">
            <summary>
            Occurs whenever a keybord key is pressed.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.KeyPress">
            <summary>
            Occurs whenever a character is typed.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.KeyUp">
            <summary>
            Occurs whenever a keyboard key is released.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.Move">
            <summary>
            Occurs whenever the window is moved.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.MouseEnter">
            <summary>
            Occurs whenever the mouse cursor enters the window <see cref="P:OpenTK.NativeWindow.Bounds"/>.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.MouseLeave">
            <summary>
            Occurs whenever the mouse cursor leaves the window <see cref="P:OpenTK.NativeWindow.Bounds"/>.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.Resize">
            <summary>
            Occurs whenever the window is resized.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.TitleChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.NativeWindow.Title"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.NativeWindow.Visible"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.WindowBorderChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.NativeWindow.WindowBorder"/> property of the window changes.
            </summary>
        </member>
        <member name="E:OpenTK.NativeWindow.WindowStateChanged">
            <summary>
            Occurs when the <see cref="P:OpenTK.NativeWindow.WindowState"/> property of the window changes.
            </summary>
        </member>
        <member name="M:OpenTK.NativeWindow.Dispose">
            <summary>
            Releases all non-managed resources belonging to this NativeWindow.
            </summary>
        </member>
        <member name="M:OpenTK.NativeWindow.EnsureUndisposed">
            <summary>
            Ensures that this NativeWindow has not been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If this NativeWindow has been disposed.
            </exception>
        </member>
        <member name="P:OpenTK.NativeWindow.IsDisposed">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/>, which indicates whether
            this instance has been disposed.
            </summary>
        </member>
        <member name="M:OpenTK.NativeWindow.OnClosed(System.EventArgs)">
            <summary>
            Called when the NativeWindow has closed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the NativeWindow is about to close.
            </summary>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs" /> for this event.
            Set e.Cancel to true in order to stop the NativeWindow from closing.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnDisposed(System.EventArgs)">
            <summary>
            Called when the NativeWindow is disposed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnFocusedChanged(System.EventArgs)">
            <summary>
            Called when the <see cref="P:OpenTK.INativeWindow.Focused"/> property of the NativeWindow has changed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnKeyPress(OpenTK.KeyPressEventArgs)">
            <summary>
            Called when a character is typed.
            </summary>
            <param name="e">The <see cref="T:OpenTK.KeyPressEventArgs"/> for this event.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnKeyUp(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            Called when a keybord key is released.
            </summary>
            <param name="e">The <see cref="!:OpenTK.KeyboardKeyEventArgs"/> for this event.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnMove(System.EventArgs)">
            <summary>
            Called when the NativeWindow is moved.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnMouseEnter(System.EventArgs)">
            <summary>
            Called whenever the mouse cursor reenters the window <see cref="P:OpenTK.NativeWindow.Bounds"/>.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnMouseLeave(System.EventArgs)">
            <summary>
            Called whenever the mouse cursor leaves the window <see cref="P:OpenTK.NativeWindow.Bounds"/>.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnResize(System.EventArgs)">
            <summary>
            Called when the NativeWindow is resized.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnTitleChanged(System.EventArgs)">
            <summary>
            Called when the <see cref="P:OpenTK.INativeWindow.Title"/> property of the NativeWindow has changed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnVisibleChanged(System.EventArgs)">
            <summary>
            Called when the <see cref="P:OpenTK.INativeWindow.Visible"/> property of the NativeWindow has changed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnWindowBorderChanged(System.EventArgs)">
            <summary>
            Called when the WindowBorder of this NativeWindow has changed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.OnWindowStateChanged(System.EventArgs)">
            <summary>
            Called when the WindowState of this NativeWindow has changed.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:OpenTK.NativeWindow.ProcessEvents(System.Boolean)">
            <summary>
            Processes operating system events until the NativeWindow becomes idle.
            </summary>
            <param name="retainEvents">If true, the state of underlying system event propagation will be preserved, otherwise event propagation will be enabled if it has not been already.</param>
        </member>
        <member name="F:OpenTK.GameViewBase.ctx">
            <summary>
              Gets the <see cref="T:OpenTK.Graphics.IGraphicsContext" /> instance
              bound to this
              <see cref="T:OpenTK.Platform.Android.AndroidGameView" /> instance.
            </summary>
            <value>
              A <see cref="T:OpenTK.Graphics.IGraphicsContext" /> instance bound
              to this <see cref="T:OpenTK.Platform.Android.AndroidGameView" />
              instance.
            </value>
        </member>
        <member name="P:OpenTK.GameViewBase.AutoResize">
            <summary>
              Controls whether the graphics context is recreated when the display
              size changes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.Load">
            <summary>
              Occurs before the run loop starts.
            </summary>
            <remarks>
              <para>
                When using the run-loop processing architecture, events happen in
                the following order:
              </para>
              <list type="number">
                <item>
                  <term>
                    <c>Load</c>
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                  </term>
                </item>
              </list>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run" /> and
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run(System.Double)" />,
                invoke
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                before starting the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop which is invoked for every rendered frame.
              </para>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Stop" />
                ends the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop processing, then invokes the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                event.
              </para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnLoad(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
              event.
            </summary>
        </member>
        <member name="E:OpenTK.GameViewBase.Unload">
            <summary>
              Occurs when the run-loop is terminated.
            </summary>
            <remarks>
              <para>
                When using the run-loop processing architecture, events happen in
                the following order:
              </para>
              <list type="number">
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                  </term>
                </item>
                <item>
                  <term>
                    <c>Unload</c>
                  </term>
                </item>
              </list>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run" /> and
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run(System.Double)" />,
                invoke
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                before starting the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop which is invoked for every rendered frame.
              </para>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Stop" />
                ends the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop processing, then invokes the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                event.
              </para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnUnload(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnUnload</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnUnload</c> in a derived class, be sure to
                call the base class's <c>OnUnload</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.UpdateFrame">
            <summary>
              Occurs part of run-loop processing when a frame should be updated prior to rendering.
            </summary>
            <remarks>
              <para>
                When using the run-loop processing architecture, events happen in
                the following order:
              </para>
              <list type="number">
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                  </term>
                </item>
                <item>
                  <term>
                    <c>UpdateFrame</c>
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                  </term>
                </item>
              </list>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run" /> and
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run(System.Double)" />,
                invoke
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                before starting the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop which is invoked for every rendered frame.
              </para>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Stop" />
                ends the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop processing, then invokes the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                event.
              </para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnUpdateFrame(OpenTK.FrameEventArgs)">
            <param name="e">
              An <see cref="T:OpenTK.FrameEventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnUpdateFrame</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnUpdateFrame</c> in a derived class, be sure to
                call the base class's <c>OnUpdateFrame</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.RenderFrame">
            <summary>
              Occurs part of run-loop processing when a frame should be rendered.
            </summary>
            <remarks>
              <para>
                When using the run-loop processing architecture, events happen in
                the following order:
              </para>
              <list type="number">
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />
                  </term>
                </item>
                <item>
                  <term>
                    <c>RenderFrame</c>
                  </term>
                </item>
                <item>
                  <term>
                    <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                  </term>
                </item>
              </list>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run" /> and
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Run(System.Double)" />,
                invoke
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Load" />
                before starting the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop which is invoked for every rendered frame.
              </para>
              <para>
                <see cref="M:OpenTK.Platform.Android.AndroidGameView.Stop" />
                ends the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />/<see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                loop processing, then invokes the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.Unload" />
                event.
              </para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnRenderFrame(OpenTK.FrameEventArgs)">
            <param name="e">
              An <see cref="T:OpenTK.FrameEventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnRenderFrame</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnRenderFrame</c> in a derived class, be sure to
                call the base class's <c>OnRenderFrame</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.Run">
            <summary>
              Starts as-fast-as-possible run-loop processing.
            </summary>
            <remarks>
              <para>
                In this <c>Run</c> overload, there is no delay between raising of the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
                event and the
                <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />
                of the following frame; everything is executed as quickly as
                possible.  This may not be desirable.
              </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="M:OpenTK.GameViewBase.Run(System.Double)">
            <param name="updateRate">
              A <see cref="T:System.Double" /> containing the number of frames per
              second that should be updated and rendered.
            </param>
            <summary>
              Starts run-loop processing at a rate of <paramref name="updateRate" />
              frames per second.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="M:OpenTK.GameViewBase.MakeCurrent">
            <summary>
              Makes the
              <see cref="P:OpenTK.Platform.Android.AndroidGameView.GraphicsContext" />
              current on the calling thread.
            </summary>
            <remarks>
              <para>
                This method is equivalent to calling:
                <c>GraphicsContext.MakeCurrent(WindowInfo)</c>.
              </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="M:OpenTK.GameViewBase.SwapBuffers">
            <summary>
              Swaps the front and back buffers of the current GraphicsContext,
              presenting the rendered scene to the user.
            </summary>
            <remarks>
              <para>
                This method rebinds
                <see cref="P:OpenTK.Platform.Android.AndroidGameView.Renderbuffer" />
                to the OpenGL context's <c>RenderbufferOes</c> property, then
                invokes <see cref="M:OpenTK.Graphics.IGraphicsContext.SwapBuffers" />.
              </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="E:OpenTK.GameViewBase.Move">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.Resize">
            <summary>
              Occurs when the view's
              <see cref="P:OpenTK.Platform.Android.AndroidGameView.Size" />
              changes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnResize(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.Resize" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnResize</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnResize</c> in a derived class, be sure to
                call the base class's <c>OnResize</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.Closing">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.Closed">
            <summary>
              Occurs when the view has been closed.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnClosed(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.Closed" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnClosed</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnClosed</c> in a derived class, be sure to
                call the base class's <c>OnClosed</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.Disposed">
            <summary>
              Occurs when the view is disposed
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnDisposed(System.EventArgs)">
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.Disposed" />
              event.
            </summary>
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <remarks>
              <para>
                The <c>OnDisposed</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnDisposed</c> in a derived class, be sure to
                call the base class's <c>OnDisposed</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "E:OpenTK.GameViewBase.ContextLost" -->
        <member name="M:OpenTK.GameViewBase.OnContextLost(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.ContextLost" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnContextLost</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnContextLost</c> in a derived class, be sure to
                call the base class's <c>OnContextLost</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.ContextSet">
            <summary>
              Occurs when the
              <see cref="P:OpenTK.Platform.Android.AndroidGameView.GraphicsContext" />
              is created.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnContextSet(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.ContextSet" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnContextSet</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnContextSet</c> in a derived class, be sure to
                call the base class's <c>OnContextSet</c> method so that registered
                delegates receive the event.
              </block>
              <block>
              It is convenient place to create context related data, ie. load textures.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.RenderThreadExited">
            <summary>
              Occurs when the separate rendering thread exits without cancelation request.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnRenderThreadExited(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderThreadExited" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnRenderThreadExited</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnRenderThreadExited</c> in a derived class, be sure to
                call the base class's <c>OnRenderThreadExited</c> method so that registered
                delegates receive the event.
              </block>
              <block>
              It is convenient place to handle errors.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.TitleChanged">
            <summary>
              Occurs when the value of
              <see cref="P:OpenTK.Platform.Android.AndroidGameView.Title" />
              changes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnTitleChanged(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.TitleChanged" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnTitleChanged</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnTitleChanged</c> in a derived class, be sure to
                call the base class's <c>OnTitleChanged</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.VisibleChanged">
            <summary>
              Occurs when the value of
              <see cref="P:OpenTK.Platform.Android.AndroidGameView.Visible" />
              changes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnVisibleChanged(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.VisibleChanged" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnVisibleChanged</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnVisibleChanged</c> in a derived class, be sure to
                call the base class's <c>OnVisibleChanged</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.FocusedChanged">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.WindowBorderChanged">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.WindowStateChanged">
            <summary>
              Occurs when the value of
              <see cref="P:OpenTK.Platform.Android.AndroidGameView.WindowState" />
              changes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.OnWindowStateChanged(System.EventArgs)">
            <param name="e">
              An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
            <summary>
              Raises the
              <see cref="E:OpenTK.Platform.Android.AndroidGameView.WindowStateChanged" />
              event.
            </summary>
            <remarks>
              <para>
                The <c>OnWindowStateChanged</c> method also allows derived classes to handle
                the event without attaching a delegate.  This is the preferred
                technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
                When overriding <c>OnWindowStateChanged</c> in a derived class, be sure to
                call the base class's <c>OnWindowStateChanged</c> method so that registered
                delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.Close">
            <summary>
              Invokes the
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.OnClosed(System.EventArgs)" />
              event.
            </summary>
            <remarks>
              This method only invokes the
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.OnClosed(System.EventArgs)" />
              method.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="E:OpenTK.GameViewBase.OpenTK#INativeWindow#KeyPress">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.MouseEnter">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="E:OpenTK.GameViewBase.MouseLeave">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="M:OpenTK.GameViewBase.ProcessEvents">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.Focused">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.Visible">
            <summary>
              Gets or sets a value specifying whether the view is visible.
            </summary>
            <value>
              A <see cref="T:System.Boolean" /> specifying whether the view is
              visible.
            </value>
            <remarks>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="P:OpenTK.GameViewBase.Exists">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotImplementedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.WindowInfo">
            <summary>
              Gets information about the containing window.
            </summary>
            <value>
              A <see cref="T:OpenTK.Platform.IWindowInfo" /> which provides
              information about the containing window.
            </value>
            <exception cref="T:System.ObjectDisposedException">
              The instance has had
              <see cref="M:OpenTK.Platform.Android.AndroidGameView.Dispose" />
              invoked on it.
            </exception>
        </member>
        <member name="P:OpenTK.GameViewBase.WindowState">
            <summary>
              Gets or states the state of the view.
            </summary>
            <value>
              A <see cref="T:OpenTK.WindowState" /> value specifying the state of
              the window.
            </value>
            <remarks>
              <para>
                <see cref="F:OpenTK.WindowState.Normal" /> is always returned.
              </para>
            </remarks>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:OpenTK.GameViewBase.WindowBorder">
            <summary>
              Always returns <see cref="F:OpenTK.WindowBorder.Hidden" />.
            </summary>
            <value>
              A <see cref="T:OpenTK.WindowBorder" /> value controlling the border
              of the view.
            </value>
            <remarks>
              <para>
                Always returns <see cref="F:OpenTK.WindowBorder.Hidden" />.
              </para>
              <para>
                The setter is ignored.
              </para>
            </remarks>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:OpenTK.GameViewBase.Bounds">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotImplementedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.Location">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotImplementedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.Size">
            <summary>
              The size of the current view.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Size" /> which is the size of the
              current view.
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:OpenTK.GameViewBase.X">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.Y">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.ClientRectangle">
            <summary>This member is not supported.</summary>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="P:OpenTK.GameViewBase.ClientSize">
            <summary>This member is not supported.</summary>
            <value>To be added.</value>
            <remarks>
              <para>
                Throws a <see cref="T:System.NotSupportedException" />.
              </para>
            </remarks>
        </member>
        <member name="T:OpenTK.PlatformException">
            <summary>Defines a plaftorm specific exception.</summary>
        </member>
        <member name="M:OpenTK.PlatformException.#ctor(System.String)">
            <summary>Constructs a new PlatformException.</summary>
        </member>
        <member name="T:OpenTK.Toolkit">
            <summary>
            Provides static methods to manage an OpenTK application.
            </summary>
        </member>
        <member name="M:OpenTK.Toolkit.Init">
            <summary>
            Initializes OpenTK. This method is necessary only if you are using OpenTK
            alongside a different windowing toolkit (e.g. GTK#) and should be the very
            first method called by your application (i.e. calling this method should be
            the very first statement executed by the "Main" method).
            </summary>
            <remarks>
            Some windowing toolkits do not configure the underlying platform
            correctly or configure it in a way that is incompatible with OpenTK.
            Calling this method first ensures that OpenTK is given the chance to
            initialize itself and configure the platform correctly.
            </remarks>
        </member>
        <member name="T:OpenTK.WindowBorder">
            <summary>
            Enumerates available window borders.
            </summary>
        </member>
        <member name="F:OpenTK.WindowBorder.Resizable">
            <summary>
            The window has a resizable border. A window with a resizable border can be resized by the user or programmatically.
            </summary>
        </member>
        <member name="F:OpenTK.WindowBorder.Fixed">
            <summary>
            The window has a fixed border. A window with a fixed border can only be resized programmatically.
            </summary>
        </member>
        <member name="F:OpenTK.WindowBorder.Hidden">
            <summary>
            The window does not have a border. A window with a hidden border can only be resized programmatically.
            </summary>
        </member>
        <member name="T:OpenTK.WindowState">
            <summary>
            Enumerates available window states.
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Normal">
            <summary>
            The window is in its normal state.
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Minimized">
            <summary>
            The window is minimized to the taskbar (also known as 'iconified').
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Maximized">
            <summary>
            The window covers the whole working area, which includes the desktop but not the taskbar and/or panels.
            </summary>
        </member>
        <member name="F:OpenTK.WindowState.Fullscreen">
            <summary>
            The window covers the whole screen, including all taskbars and/or panels.
            </summary>
        </member>
    </members>
</doc>
